// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file test_complete.i
 * This header file contains the SWIG interface of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

%module(moduleimport="if __import__('os').name == 'nt': import win32api; win32api.LoadLibrary('test_complete.dll')\nif __package__ or '.' in __name__:\n    from . import _test_completeWrapper\nelse:\n    import _test_completeWrapper") test_complete

// If using windows in debug, it would try to use python_d, which would not be found.
%begin %{
#ifdef _MSC_VER
#define SWIG_PYTHON_INTERPRETER_NO_DEBUG
#endif
#include <exception>
%}

// SWIG helper modules
%include "stdint.i"
%include "std_array.i"
%include "std_map.i"
%include "std_string.i"
%include "std_vector.i"
%include "typemaps.i"

// Assignemt operators are ignored, as there is no such thing in Python.
// Trying to export them issues a warning
%ignore *::operator=;

// Macro declarations
// Any macro used on the Fast DDS header files will give an error if it is not redefined here
#define FASTDDS_EXPORTED_API
#define eProsima_user_DllExport

%include "test_included_modules.i"

%{
#include "test_complete.hpp"

#include <fastdds/dds/core/LoanableSequence.hpp>
%}

%include <fastcdr/config.h>
#if FASTCDR_VERSION_MAJOR > 1
%import(module="fastdds") "fastcdr/xcdr/optional.hpp"
#endif
%import(module="fastdds") "fastdds/dds/core/LoanableCollection.hpp"
%import(module="fastdds") "fastdds/dds/core/LoanableTypedCollection.hpp"
%import(module="fastdds") "fastdds/dds/core/LoanableSequence.hpp"

%define %traits_penumn(Type...)
  %fragment(SWIG_Traits_frag(Type),"header",
        fragment="StdTraits") {
namespace swig {
  template <> struct traits< Type > {
    typedef value_category category;
    static const char* type_name() { return  #Type; }
  };
}
}
%enddef

%traits_penumn(enum Color);
%traits_penumn(enum Material);
////////////////////////////////////////////////////////
// Binding for class StructType
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore StructType::StructType(StructType&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
%ignore StructType::char_field(char&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::char_field();
%rename("%s") StructType::char_field() const;



%ignore StructType::uint8_field(uint8_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::uint8_field();
%rename("%s") StructType::uint8_field() const;



%ignore StructType::int16_field(int16_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::int16_field();
%rename("%s") StructType::int16_field() const;



%ignore StructType::uint16_field(uint16_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::uint16_field();
%rename("%s") StructType::uint16_field() const;



%ignore StructType::int32_field(int32_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::int32_field();
%rename("%s") StructType::int32_field() const;



%ignore StructType::uint32_field(uint32_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::uint32_field();
%rename("%s") StructType::uint32_field() const;



%ignore StructType::int64_field(int64_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::int64_field();
%rename("%s") StructType::int64_field() const;



%ignore StructType::uint64_field(uint64_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::uint64_field();
%rename("%s") StructType::uint64_field() const;



%ignore StructType::float_field(float&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::float_field();
%rename("%s") StructType::float_field() const;



%ignore StructType::double_field(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::double_field();
%rename("%s") StructType::double_field() const;



%ignore StructType::bool_field(bool&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::bool_field();
%rename("%s") StructType::bool_field() const;



%ignore StructType::string_field(std::string&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::string_field();
%rename("%s") StructType::string_field() const;



%ignore StructType::enum_field(Color&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::enum_field();
%rename("%s") StructType::enum_field() const;



%ignore StructType::enum2_field(Material&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::enum2_field();
%rename("%s") StructType::enum2_field() const;



%ignore StructType::included_module_struct(eprosima::test2::StructType2&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::included_module_struct();
%rename("%s") StructType::included_module_struct() const;



%template(_StructTypeSeq) eprosima::fastdds::dds::LoanableTypedCollection<StructType, std::false_type>;
%template(StructTypeSeq) eprosima::fastdds::dds::LoanableSequence<StructType, std::false_type>;
%extend eprosima::fastdds::dds::LoanableSequence<StructType, std::false_type>
{
    size_t __len__() const
    {
        return self->length();
    }

    const StructType& __getitem__(size_t i) const
    {
        return (*self)[i];
    }
}



////////////////////////////////////////////////////////
// Binding for class CompleteTestType
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore CompleteTestType::CompleteTestType(CompleteTestType&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
%ignore CompleteTestType::char_field(char&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::char_field();
%rename("%s") CompleteTestType::char_field() const;



%ignore CompleteTestType::uint8_field(uint8_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::uint8_field();
%rename("%s") CompleteTestType::uint8_field() const;



%ignore CompleteTestType::int16_field(int16_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::int16_field();
%rename("%s") CompleteTestType::int16_field() const;



%ignore CompleteTestType::uint16_field(uint16_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::uint16_field();
%rename("%s") CompleteTestType::uint16_field() const;



%ignore CompleteTestType::int32_field(int32_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::int32_field();
%rename("%s") CompleteTestType::int32_field() const;



%ignore CompleteTestType::uint32_field(uint32_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::uint32_field();
%rename("%s") CompleteTestType::uint32_field() const;



%ignore CompleteTestType::int64_field(int64_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::int64_field();
%rename("%s") CompleteTestType::int64_field() const;



%ignore CompleteTestType::uint64_field(uint64_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::uint64_field();
%rename("%s") CompleteTestType::uint64_field() const;



%ignore CompleteTestType::float_field(float&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::float_field();
%rename("%s") CompleteTestType::float_field() const;



%ignore CompleteTestType::double_field(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::double_field();
%rename("%s") CompleteTestType::double_field() const;



%ignore CompleteTestType::bool_field(bool&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bool_field();
%rename("%s") CompleteTestType::bool_field() const;



%ignore CompleteTestType::string_field(std::string&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::string_field();
%rename("%s") CompleteTestType::string_field() const;



%ignore CompleteTestType::enum_field(Color&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::enum_field();
%rename("%s") CompleteTestType::enum_field() const;



%ignore CompleteTestType::enum2_field(Material&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::enum2_field();
%rename("%s") CompleteTestType::enum2_field() const;



%ignore CompleteTestType::struct_field(StructType&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::struct_field();
%rename("%s") CompleteTestType::struct_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore CompleteTestType::char_opt_field(char&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(charOpt) eprosima::fastcdr::optional<char>;
%extend eprosima::fastcdr::optional<char> {
  char get_value() const {
      return $self->value();
  }

  void set_value(const char& value) {
      *$self = value;
  }
}
%ignore CompleteTestType::char_opt_field(eprosima::fastcdr::optional<char>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::char_opt_field();
%rename("%s") CompleteTestType::char_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore CompleteTestType::uint8_opt_field(uint8_t&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(uint8_tOpt) eprosima::fastcdr::optional<uint8_t>;
%extend eprosima::fastcdr::optional<uint8_t> {
  uint8_t get_value() const {
      return $self->value();
  }

  void set_value(const uint8_t& value) {
      *$self = value;
  }
}
%ignore CompleteTestType::uint8_opt_field(eprosima::fastcdr::optional<uint8_t>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::uint8_opt_field();
%rename("%s") CompleteTestType::uint8_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore CompleteTestType::int16_opt_field(int16_t&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(int16_tOpt) eprosima::fastcdr::optional<int16_t>;
%extend eprosima::fastcdr::optional<int16_t> {
  int16_t get_value() const {
      return $self->value();
  }

  void set_value(const int16_t& value) {
      *$self = value;
  }
}
%ignore CompleteTestType::int16_opt_field(eprosima::fastcdr::optional<int16_t>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::int16_opt_field();
%rename("%s") CompleteTestType::int16_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore CompleteTestType::uint16_opt_field(uint16_t&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(uint16_tOpt) eprosima::fastcdr::optional<uint16_t>;
%extend eprosima::fastcdr::optional<uint16_t> {
  uint16_t get_value() const {
      return $self->value();
  }

  void set_value(const uint16_t& value) {
      *$self = value;
  }
}
%ignore CompleteTestType::uint16_opt_field(eprosima::fastcdr::optional<uint16_t>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::uint16_opt_field();
%rename("%s") CompleteTestType::uint16_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore CompleteTestType::int32_opt_field(int32_t&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(int32_tOpt) eprosima::fastcdr::optional<int32_t>;
%extend eprosima::fastcdr::optional<int32_t> {
  int32_t get_value() const {
      return $self->value();
  }

  void set_value(const int32_t& value) {
      *$self = value;
  }
}
%ignore CompleteTestType::int32_opt_field(eprosima::fastcdr::optional<int32_t>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::int32_opt_field();
%rename("%s") CompleteTestType::int32_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore CompleteTestType::uint32_opt_field(uint32_t&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(uint32_tOpt) eprosima::fastcdr::optional<uint32_t>;
%extend eprosima::fastcdr::optional<uint32_t> {
  uint32_t get_value() const {
      return $self->value();
  }

  void set_value(const uint32_t& value) {
      *$self = value;
  }
}
%ignore CompleteTestType::uint32_opt_field(eprosima::fastcdr::optional<uint32_t>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::uint32_opt_field();
%rename("%s") CompleteTestType::uint32_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore CompleteTestType::int64_opt_field(int64_t&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(int64_tOpt) eprosima::fastcdr::optional<int64_t>;
%extend eprosima::fastcdr::optional<int64_t> {
  int64_t get_value() const {
      return $self->value();
  }

  void set_value(const int64_t& value) {
      *$self = value;
  }
}
%ignore CompleteTestType::int64_opt_field(eprosima::fastcdr::optional<int64_t>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::int64_opt_field();
%rename("%s") CompleteTestType::int64_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore CompleteTestType::uint64_opt_field(uint64_t&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(uint64_tOpt) eprosima::fastcdr::optional<uint64_t>;
%extend eprosima::fastcdr::optional<uint64_t> {
  uint64_t get_value() const {
      return $self->value();
  }

  void set_value(const uint64_t& value) {
      *$self = value;
  }
}
%ignore CompleteTestType::uint64_opt_field(eprosima::fastcdr::optional<uint64_t>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::uint64_opt_field();
%rename("%s") CompleteTestType::uint64_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore CompleteTestType::float_opt_field(float&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(floatOpt) eprosima::fastcdr::optional<float>;
%extend eprosima::fastcdr::optional<float> {
  float get_value() const {
      return $self->value();
  }

  void set_value(const float& value) {
      *$self = value;
  }
}
%ignore CompleteTestType::float_opt_field(eprosima::fastcdr::optional<float>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::float_opt_field();
%rename("%s") CompleteTestType::float_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore CompleteTestType::double_opt_field(double&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(doubleOpt) eprosima::fastcdr::optional<double>;
%extend eprosima::fastcdr::optional<double> {
  double get_value() const {
      return $self->value();
  }

  void set_value(const double& value) {
      *$self = value;
  }
}
%ignore CompleteTestType::double_opt_field(eprosima::fastcdr::optional<double>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::double_opt_field();
%rename("%s") CompleteTestType::double_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore CompleteTestType::bool_opt_field(bool&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(boolOpt) eprosima::fastcdr::optional<bool>;
%extend eprosima::fastcdr::optional<bool> {
  bool get_value() const {
      return $self->value();
  }

  void set_value(const bool& value) {
      *$self = value;
  }
}
%ignore CompleteTestType::bool_opt_field(eprosima::fastcdr::optional<bool>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bool_opt_field();
%rename("%s") CompleteTestType::bool_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore CompleteTestType::string_opt_field(std::string&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(stringOpt) eprosima::fastcdr::optional<std::string>;
%extend eprosima::fastcdr::optional<std::string> {
  std::string get_value() const {
      return $self->value();
  }

  void set_value(const std::string& value) {
      *$self = value;
  }
}
%ignore CompleteTestType::string_opt_field(eprosima::fastcdr::optional<std::string>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::string_opt_field();
%rename("%s") CompleteTestType::string_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore CompleteTestType::enum_opt_field(Color&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(ColorOpt) eprosima::fastcdr::optional<Color>;
%extend eprosima::fastcdr::optional<Color> {
  Color get_value() const {
      return $self->value();
  }

  void set_value(const Color& value) {
      *$self = value;
  }
}
%ignore CompleteTestType::enum_opt_field(eprosima::fastcdr::optional<Color>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::enum_opt_field();
%rename("%s") CompleteTestType::enum_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore CompleteTestType::enum2_opt_field(Material&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(MaterialOpt) eprosima::fastcdr::optional<Material>;
%extend eprosima::fastcdr::optional<Material> {
  Material get_value() const {
      return $self->value();
  }

  void set_value(const Material& value) {
      *$self = value;
  }
}
%ignore CompleteTestType::enum2_opt_field(eprosima::fastcdr::optional<Material>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::enum2_opt_field();
%rename("%s") CompleteTestType::enum2_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore CompleteTestType::struct_opt_field(StructType&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(StructTypeOpt) eprosima::fastcdr::optional<StructType>;
%extend eprosima::fastcdr::optional<StructType> {
  StructType get_value() const {
      return $self->value();
  }

  void set_value(const StructType& value) {
      *$self = value;
  }
}
%ignore CompleteTestType::struct_opt_field(eprosima::fastcdr::optional<StructType>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::struct_opt_field();
%rename("%s") CompleteTestType::struct_opt_field() const;



%ignore CompleteTestType::array_char_field(std::array<char, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_char_field() const;
%template(char_3_array) std::array<char,3>;
%extend std::array<char, 3>
{
    const char* get_buffer() const
    {
        return self->data();
    }
}


%ignore CompleteTestType::array_uint8_field(std::array<uint8_t, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_uint8_field() const;
%template(uint8_t_3_array) std::array<uint8_t,3>;
%extend std::array<uint8_t, 3>
{
    const uint8_t* get_buffer() const
    {
        return self->data();
    }
}


%ignore CompleteTestType::array_int16_field(std::array<int16_t, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_int16_field() const;
%template(int16_t_3_array) std::array<int16_t,3>;
%extend std::array<int16_t, 3>
{
    const int16_t* get_buffer() const
    {
        return self->data();
    }
}


%ignore CompleteTestType::array_uint16_field(std::array<uint16_t, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_uint16_field() const;
%template(uint16_t_3_array) std::array<uint16_t,3>;
%extend std::array<uint16_t, 3>
{
    const uint16_t* get_buffer() const
    {
        return self->data();
    }
}


%ignore CompleteTestType::array_int32_field(std::array<int32_t, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_int32_field() const;
%template(int32_t_3_array) std::array<int32_t,3>;
%extend std::array<int32_t, 3>
{
    const int32_t* get_buffer() const
    {
        return self->data();
    }
}


%ignore CompleteTestType::array_uint32_field(std::array<uint32_t, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_uint32_field() const;
%template(uint32_t_3_array) std::array<uint32_t,3>;
%extend std::array<uint32_t, 3>
{
    const uint32_t* get_buffer() const
    {
        return self->data();
    }
}


%ignore CompleteTestType::array_int64_field(std::array<int64_t, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_int64_field() const;
%template(int64_t_3_array) std::array<int64_t,3>;
%extend std::array<int64_t, 3>
{
    const int64_t* get_buffer() const
    {
        return self->data();
    }
}


%ignore CompleteTestType::array_uint64_field(std::array<uint64_t, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_uint64_field() const;
%template(uint64_t_3_array) std::array<uint64_t,3>;
%extend std::array<uint64_t, 3>
{
    const uint64_t* get_buffer() const
    {
        return self->data();
    }
}


%ignore CompleteTestType::array_float_field(std::array<float, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_float_field() const;
%template(float_3_array) std::array<float,3>;
%extend std::array<float, 3>
{
    const float* get_buffer() const
    {
        return self->data();
    }
}


%ignore CompleteTestType::array_double_field(std::array<double, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_double_field() const;
%template(double_3_array) std::array<double,3>;
%extend std::array<double, 3>
{
    const double* get_buffer() const
    {
        return self->data();
    }
}


%ignore CompleteTestType::array_bool_field(std::array<bool, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_bool_field() const;
%template(bool_3_array) std::array<bool,3>;
%extend std::array<bool, 3>
{
    const bool* get_buffer() const
    {
        return self->data();
    }
}


%ignore CompleteTestType::array_enum_field(std::array<Color, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_enum_field() const;
%template(Color_3_array) std::array<enum Color,3>;
%extend std::array<enum Color, 3>
{
    const enum Color* get_buffer() const
    {
        return self->data();
    }
}


%ignore CompleteTestType::array_enum2_field(std::array<Material, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_enum2_field() const;
%template(Material_3_array) std::array<enum Material,3>;
%extend std::array<enum Material, 3>
{
    const enum Material* get_buffer() const
    {
        return self->data();
    }
}


%ignore CompleteTestType::array_struct_field(std::array<StructType, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_struct_field() const;
%template(StructType_3_array) std::array<StructType,3>;


%ignore CompleteTestType::bounded_sequence_char_field(std::vector<char>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_char_field() const;
%extend std::vector<char>
{
    const char* get_buffer() const
    {
        return self->data();
    }
}

%template(char_vector) std::vector<char>;


%ignore CompleteTestType::bounded_sequence_uint8_field(std::vector<uint8_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_uint8_field() const;
%extend std::vector<uint8_t>
{
    const uint8_t* get_buffer() const
    {
        return self->data();
    }
}

%template(uint8_t_vector) std::vector<uint8_t>;


%ignore CompleteTestType::bounded_sequence_int16_field(std::vector<int16_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_int16_field() const;
%extend std::vector<int16_t>
{
    const int16_t* get_buffer() const
    {
        return self->data();
    }
}

%template(int16_t_vector) std::vector<int16_t>;


%ignore CompleteTestType::bounded_sequence_uint16_field(std::vector<uint16_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_uint16_field() const;
%extend std::vector<uint16_t>
{
    const uint16_t* get_buffer() const
    {
        return self->data();
    }
}

%template(uint16_t_vector) std::vector<uint16_t>;


%ignore CompleteTestType::bounded_sequence_int32_field(std::vector<int32_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_int32_field() const;
%extend std::vector<int32_t>
{
    const int32_t* get_buffer() const
    {
        return self->data();
    }
}

%template(int32_t_vector) std::vector<int32_t>;


%ignore CompleteTestType::bounded_sequence_uint32_field(std::vector<uint32_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_uint32_field() const;
%extend std::vector<uint32_t>
{
    const uint32_t* get_buffer() const
    {
        return self->data();
    }
}

%template(uint32_t_vector) std::vector<uint32_t>;


%ignore CompleteTestType::bounded_sequence_int64_field(std::vector<int64_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_int64_field() const;
%extend std::vector<int64_t>
{
    const int64_t* get_buffer() const
    {
        return self->data();
    }
}

%template(int64_t_vector) std::vector<int64_t>;


%ignore CompleteTestType::bounded_sequence_uint64_field(std::vector<uint64_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_uint64_field() const;
%extend std::vector<uint64_t>
{
    const uint64_t* get_buffer() const
    {
        return self->data();
    }
}

%template(uint64_t_vector) std::vector<uint64_t>;


%ignore CompleteTestType::bounded_sequence_float_field(std::vector<float>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_float_field() const;
%extend std::vector<float>
{
    const float* get_buffer() const
    {
        return self->data();
    }
}

%template(float_vector) std::vector<float>;


%ignore CompleteTestType::bounded_sequence_double_field(std::vector<double>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_double_field() const;
%extend std::vector<double>
{
    const double* get_buffer() const
    {
        return self->data();
    }
}

%template(double_vector) std::vector<double>;


%ignore CompleteTestType::bounded_sequence_bool_field(std::vector<bool>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_bool_field() const;
%template(bool_vector) std::vector<bool>;


%ignore CompleteTestType::bounded_sequence_enum_field(std::vector<Color>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_enum_field() const;
%extend std::vector<Color>
{
    const Color* get_buffer() const
    {
        return self->data();
    }
}

%template(Color_vector) std::vector<enum Color>;


%ignore CompleteTestType::bounded_sequence_enum2_field(std::vector<Material>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_enum2_field() const;
%extend std::vector<Material>
{
    const Material* get_buffer() const
    {
        return self->data();
    }
}

%template(Material_vector) std::vector<enum Material>;


%ignore CompleteTestType::bounded_sequence_struct_field(std::vector<StructType>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_struct_field() const;
%template(StructType_vector) std::vector<StructType>;


%ignore CompleteTestType::unbounded_sequence_char_field(std::vector<char>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_char_field() const;
%extend std::vector<char>
{
    const char* get_buffer() const
    {
        return self->data();
    }
}

%template(char_vector) std::vector<char>;


%ignore CompleteTestType::unbounded_sequence_uint8_field(std::vector<uint8_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_uint8_field() const;
%extend std::vector<uint8_t>
{
    const uint8_t* get_buffer() const
    {
        return self->data();
    }
}

%template(uint8_t_vector) std::vector<uint8_t>;


%ignore CompleteTestType::unbounded_sequence_int16_field(std::vector<int16_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_int16_field() const;
%extend std::vector<int16_t>
{
    const int16_t* get_buffer() const
    {
        return self->data();
    }
}

%template(int16_t_vector) std::vector<int16_t>;


%ignore CompleteTestType::unbounded_sequence_uint16_field(std::vector<uint16_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_uint16_field() const;
%extend std::vector<uint16_t>
{
    const uint16_t* get_buffer() const
    {
        return self->data();
    }
}

%template(uint16_t_vector) std::vector<uint16_t>;


%ignore CompleteTestType::unbounded_sequence_int32_field(std::vector<int32_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_int32_field() const;
%extend std::vector<int32_t>
{
    const int32_t* get_buffer() const
    {
        return self->data();
    }
}

%template(int32_t_vector) std::vector<int32_t>;


%ignore CompleteTestType::unbounded_sequence_uint32_field(std::vector<uint32_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_uint32_field() const;
%extend std::vector<uint32_t>
{
    const uint32_t* get_buffer() const
    {
        return self->data();
    }
}

%template(uint32_t_vector) std::vector<uint32_t>;


%ignore CompleteTestType::unbounded_sequence_int64_field(std::vector<int64_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_int64_field() const;
%extend std::vector<int64_t>
{
    const int64_t* get_buffer() const
    {
        return self->data();
    }
}

%template(int64_t_vector) std::vector<int64_t>;


%ignore CompleteTestType::unbounded_sequence_uint64_field(std::vector<uint64_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_uint64_field() const;
%extend std::vector<uint64_t>
{
    const uint64_t* get_buffer() const
    {
        return self->data();
    }
}

%template(uint64_t_vector) std::vector<uint64_t>;


%ignore CompleteTestType::unbounded_sequence_float_field(std::vector<float>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_float_field() const;
%extend std::vector<float>
{
    const float* get_buffer() const
    {
        return self->data();
    }
}

%template(float_vector) std::vector<float>;


%ignore CompleteTestType::unbounded_sequence_double_field(std::vector<double>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_double_field() const;
%extend std::vector<double>
{
    const double* get_buffer() const
    {
        return self->data();
    }
}

%template(double_vector) std::vector<double>;


%ignore CompleteTestType::unbounded_sequence_bool_field(std::vector<bool>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_bool_field() const;
%template(bool_vector) std::vector<bool>;


%ignore CompleteTestType::unbounded_sequence_enum_field(std::vector<Color>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_enum_field() const;
%extend std::vector<Color>
{
    const Color* get_buffer() const
    {
        return self->data();
    }
}

%template(Color_vector) std::vector<enum Color>;


%ignore CompleteTestType::unbounded_sequence_enum2_field(std::vector<Material>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_enum2_field() const;
%extend std::vector<Material>
{
    const Material* get_buffer() const
    {
        return self->data();
    }
}

%template(Material_vector) std::vector<enum Material>;


%ignore CompleteTestType::unbounded_sequence_struct_field(std::vector<StructType>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_struct_field() const;
%template(StructType_vector) std::vector<StructType>;


%template(_CompleteTestTypeSeq) eprosima::fastdds::dds::LoanableTypedCollection<CompleteTestType, std::false_type>;
%template(CompleteTestTypeSeq) eprosima::fastdds::dds::LoanableSequence<CompleteTestType, std::false_type>;
%extend eprosima::fastdds::dds::LoanableSequence<CompleteTestType, std::false_type>
{
    size_t __len__() const
    {
        return self->length();
    }

    const CompleteTestType& __getitem__(size_t i) const
    {
        return (*self)[i];
    }
}

////////////////////////////////////////////////////////
// Binding for class KeyedCompleteTestType
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore KeyedCompleteTestType::KeyedCompleteTestType(KeyedCompleteTestType&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
%ignore KeyedCompleteTestType::id(int32_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::id();
%rename("%s") KeyedCompleteTestType::id() const;



%ignore KeyedCompleteTestType::char_field(char&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::char_field();
%rename("%s") KeyedCompleteTestType::char_field() const;



%ignore KeyedCompleteTestType::uint8_field(uint8_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::uint8_field();
%rename("%s") KeyedCompleteTestType::uint8_field() const;



%ignore KeyedCompleteTestType::int16_field(int16_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::int16_field();
%rename("%s") KeyedCompleteTestType::int16_field() const;



%ignore KeyedCompleteTestType::uint16_field(uint16_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::uint16_field();
%rename("%s") KeyedCompleteTestType::uint16_field() const;



%ignore KeyedCompleteTestType::int32_field(int32_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::int32_field();
%rename("%s") KeyedCompleteTestType::int32_field() const;



%ignore KeyedCompleteTestType::uint32_field(uint32_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::uint32_field();
%rename("%s") KeyedCompleteTestType::uint32_field() const;



%ignore KeyedCompleteTestType::int64_field(int64_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::int64_field();
%rename("%s") KeyedCompleteTestType::int64_field() const;



%ignore KeyedCompleteTestType::uint64_field(uint64_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::uint64_field();
%rename("%s") KeyedCompleteTestType::uint64_field() const;



%ignore KeyedCompleteTestType::float_field(float&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::float_field();
%rename("%s") KeyedCompleteTestType::float_field() const;



%ignore KeyedCompleteTestType::double_field(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::double_field();
%rename("%s") KeyedCompleteTestType::double_field() const;



%ignore KeyedCompleteTestType::bool_field(bool&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bool_field();
%rename("%s") KeyedCompleteTestType::bool_field() const;



%ignore KeyedCompleteTestType::string_field(std::string&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::string_field();
%rename("%s") KeyedCompleteTestType::string_field() const;



%ignore KeyedCompleteTestType::enum_field(Color&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::enum_field();
%rename("%s") KeyedCompleteTestType::enum_field() const;



%ignore KeyedCompleteTestType::enum2_field(Material&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::enum2_field();
%rename("%s") KeyedCompleteTestType::enum2_field() const;



%ignore KeyedCompleteTestType::struct_field(StructType&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::struct_field();
%rename("%s") KeyedCompleteTestType::struct_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore KeyedCompleteTestType::char_opt_field(char&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(charOpt) eprosima::fastcdr::optional<char>;
%extend eprosima::fastcdr::optional<char> {
  char get_value() const {
      return $self->value();
  }

  void set_value(const char& value) {
      *$self = value;
  }
}
%ignore KeyedCompleteTestType::char_opt_field(eprosima::fastcdr::optional<char>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::char_opt_field();
%rename("%s") KeyedCompleteTestType::char_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore KeyedCompleteTestType::uint8_opt_field(uint8_t&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(uint8_tOpt) eprosima::fastcdr::optional<uint8_t>;
%extend eprosima::fastcdr::optional<uint8_t> {
  uint8_t get_value() const {
      return $self->value();
  }

  void set_value(const uint8_t& value) {
      *$self = value;
  }
}
%ignore KeyedCompleteTestType::uint8_opt_field(eprosima::fastcdr::optional<uint8_t>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::uint8_opt_field();
%rename("%s") KeyedCompleteTestType::uint8_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore KeyedCompleteTestType::int16_opt_field(int16_t&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(int16_tOpt) eprosima::fastcdr::optional<int16_t>;
%extend eprosima::fastcdr::optional<int16_t> {
  int16_t get_value() const {
      return $self->value();
  }

  void set_value(const int16_t& value) {
      *$self = value;
  }
}
%ignore KeyedCompleteTestType::int16_opt_field(eprosima::fastcdr::optional<int16_t>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::int16_opt_field();
%rename("%s") KeyedCompleteTestType::int16_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore KeyedCompleteTestType::uint16_opt_field(uint16_t&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(uint16_tOpt) eprosima::fastcdr::optional<uint16_t>;
%extend eprosima::fastcdr::optional<uint16_t> {
  uint16_t get_value() const {
      return $self->value();
  }

  void set_value(const uint16_t& value) {
      *$self = value;
  }
}
%ignore KeyedCompleteTestType::uint16_opt_field(eprosima::fastcdr::optional<uint16_t>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::uint16_opt_field();
%rename("%s") KeyedCompleteTestType::uint16_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore KeyedCompleteTestType::int32_opt_field(int32_t&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(int32_tOpt) eprosima::fastcdr::optional<int32_t>;
%extend eprosima::fastcdr::optional<int32_t> {
  int32_t get_value() const {
      return $self->value();
  }

  void set_value(const int32_t& value) {
      *$self = value;
  }
}
%ignore KeyedCompleteTestType::int32_opt_field(eprosima::fastcdr::optional<int32_t>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::int32_opt_field();
%rename("%s") KeyedCompleteTestType::int32_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore KeyedCompleteTestType::uint32_opt_field(uint32_t&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(uint32_tOpt) eprosima::fastcdr::optional<uint32_t>;
%extend eprosima::fastcdr::optional<uint32_t> {
  uint32_t get_value() const {
      return $self->value();
  }

  void set_value(const uint32_t& value) {
      *$self = value;
  }
}
%ignore KeyedCompleteTestType::uint32_opt_field(eprosima::fastcdr::optional<uint32_t>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::uint32_opt_field();
%rename("%s") KeyedCompleteTestType::uint32_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore KeyedCompleteTestType::int64_opt_field(int64_t&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(int64_tOpt) eprosima::fastcdr::optional<int64_t>;
%extend eprosima::fastcdr::optional<int64_t> {
  int64_t get_value() const {
      return $self->value();
  }

  void set_value(const int64_t& value) {
      *$self = value;
  }
}
%ignore KeyedCompleteTestType::int64_opt_field(eprosima::fastcdr::optional<int64_t>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::int64_opt_field();
%rename("%s") KeyedCompleteTestType::int64_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore KeyedCompleteTestType::uint64_opt_field(uint64_t&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(uint64_tOpt) eprosima::fastcdr::optional<uint64_t>;
%extend eprosima::fastcdr::optional<uint64_t> {
  uint64_t get_value() const {
      return $self->value();
  }

  void set_value(const uint64_t& value) {
      *$self = value;
  }
}
%ignore KeyedCompleteTestType::uint64_opt_field(eprosima::fastcdr::optional<uint64_t>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::uint64_opt_field();
%rename("%s") KeyedCompleteTestType::uint64_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore KeyedCompleteTestType::float_opt_field(float&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(floatOpt) eprosima::fastcdr::optional<float>;
%extend eprosima::fastcdr::optional<float> {
  float get_value() const {
      return $self->value();
  }

  void set_value(const float& value) {
      *$self = value;
  }
}
%ignore KeyedCompleteTestType::float_opt_field(eprosima::fastcdr::optional<float>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::float_opt_field();
%rename("%s") KeyedCompleteTestType::float_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore KeyedCompleteTestType::double_opt_field(double&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(doubleOpt) eprosima::fastcdr::optional<double>;
%extend eprosima::fastcdr::optional<double> {
  double get_value() const {
      return $self->value();
  }

  void set_value(const double& value) {
      *$self = value;
  }
}
%ignore KeyedCompleteTestType::double_opt_field(eprosima::fastcdr::optional<double>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::double_opt_field();
%rename("%s") KeyedCompleteTestType::double_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore KeyedCompleteTestType::bool_opt_field(bool&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(boolOpt) eprosima::fastcdr::optional<bool>;
%extend eprosima::fastcdr::optional<bool> {
  bool get_value() const {
      return $self->value();
  }

  void set_value(const bool& value) {
      *$self = value;
  }
}
%ignore KeyedCompleteTestType::bool_opt_field(eprosima::fastcdr::optional<bool>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bool_opt_field();
%rename("%s") KeyedCompleteTestType::bool_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore KeyedCompleteTestType::string_opt_field(std::string&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(stringOpt) eprosima::fastcdr::optional<std::string>;
%extend eprosima::fastcdr::optional<std::string> {
  std::string get_value() const {
      return $self->value();
  }

  void set_value(const std::string& value) {
      *$self = value;
  }
}
%ignore KeyedCompleteTestType::string_opt_field(eprosima::fastcdr::optional<std::string>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::string_opt_field();
%rename("%s") KeyedCompleteTestType::string_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore KeyedCompleteTestType::enum_opt_field(Color&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(ColorOpt) eprosima::fastcdr::optional<Color>;
%extend eprosima::fastcdr::optional<Color> {
  Color get_value() const {
      return $self->value();
  }

  void set_value(const Color& value) {
      *$self = value;
  }
}
%ignore KeyedCompleteTestType::enum_opt_field(eprosima::fastcdr::optional<Color>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::enum_opt_field();
%rename("%s") KeyedCompleteTestType::enum_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore KeyedCompleteTestType::enum2_opt_field(Material&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(MaterialOpt) eprosima::fastcdr::optional<Material>;
%extend eprosima::fastcdr::optional<Material> {
  Material get_value() const {
      return $self->value();
  }

  void set_value(const Material& value) {
      *$self = value;
  }
}
%ignore KeyedCompleteTestType::enum2_opt_field(eprosima::fastcdr::optional<Material>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::enum2_opt_field();
%rename("%s") KeyedCompleteTestType::enum2_opt_field() const;



#if FASTCDR_VERSION_MAJOR == 1
%ignore KeyedCompleteTestType::struct_opt_field(StructType&&);
#else
%ignore eprosima::fastcdr::optional::value;
%ignore eprosima::fastcdr::optional::reset;
%template(StructTypeOpt) eprosima::fastcdr::optional<StructType>;
%extend eprosima::fastcdr::optional<StructType> {
  StructType get_value() const {
      return $self->value();
  }

  void set_value(const StructType& value) {
      *$self = value;
  }
}
%ignore KeyedCompleteTestType::struct_opt_field(eprosima::fastcdr::optional<StructType>&&);
#endif

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::struct_opt_field();
%rename("%s") KeyedCompleteTestType::struct_opt_field() const;



%ignore KeyedCompleteTestType::array_char_field(std::array<char, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_char_field() const;
%template(char_3_array) std::array<char,3>;
%extend std::array<char, 3>
{
    const char* get_buffer() const
    {
        return self->data();
    }
}


%ignore KeyedCompleteTestType::array_uint8_field(std::array<uint8_t, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_uint8_field() const;
%template(uint8_t_3_array) std::array<uint8_t,3>;
%extend std::array<uint8_t, 3>
{
    const uint8_t* get_buffer() const
    {
        return self->data();
    }
}


%ignore KeyedCompleteTestType::array_int16_field(std::array<int16_t, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_int16_field() const;
%template(int16_t_3_array) std::array<int16_t,3>;
%extend std::array<int16_t, 3>
{
    const int16_t* get_buffer() const
    {
        return self->data();
    }
}


%ignore KeyedCompleteTestType::array_uint16_field(std::array<uint16_t, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_uint16_field() const;
%template(uint16_t_3_array) std::array<uint16_t,3>;
%extend std::array<uint16_t, 3>
{
    const uint16_t* get_buffer() const
    {
        return self->data();
    }
}


%ignore KeyedCompleteTestType::array_int32_field(std::array<int32_t, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_int32_field() const;
%template(int32_t_3_array) std::array<int32_t,3>;
%extend std::array<int32_t, 3>
{
    const int32_t* get_buffer() const
    {
        return self->data();
    }
}


%ignore KeyedCompleteTestType::array_uint32_field(std::array<uint32_t, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_uint32_field() const;
%template(uint32_t_3_array) std::array<uint32_t,3>;
%extend std::array<uint32_t, 3>
{
    const uint32_t* get_buffer() const
    {
        return self->data();
    }
}


%ignore KeyedCompleteTestType::array_int64_field(std::array<int64_t, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_int64_field() const;
%template(int64_t_3_array) std::array<int64_t,3>;
%extend std::array<int64_t, 3>
{
    const int64_t* get_buffer() const
    {
        return self->data();
    }
}


%ignore KeyedCompleteTestType::array_uint64_field(std::array<uint64_t, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_uint64_field() const;
%template(uint64_t_3_array) std::array<uint64_t,3>;
%extend std::array<uint64_t, 3>
{
    const uint64_t* get_buffer() const
    {
        return self->data();
    }
}


%ignore KeyedCompleteTestType::array_float_field(std::array<float, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_float_field() const;
%template(float_3_array) std::array<float,3>;
%extend std::array<float, 3>
{
    const float* get_buffer() const
    {
        return self->data();
    }
}


%ignore KeyedCompleteTestType::array_double_field(std::array<double, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_double_field() const;
%template(double_3_array) std::array<double,3>;
%extend std::array<double, 3>
{
    const double* get_buffer() const
    {
        return self->data();
    }
}


%ignore KeyedCompleteTestType::array_bool_field(std::array<bool, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_bool_field() const;
%template(bool_3_array) std::array<bool,3>;
%extend std::array<bool, 3>
{
    const bool* get_buffer() const
    {
        return self->data();
    }
}


%ignore KeyedCompleteTestType::array_enum_field(std::array<Color, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_enum_field() const;
%template(Color_3_array) std::array<enum Color,3>;
%extend std::array<enum Color, 3>
{
    const enum Color* get_buffer() const
    {
        return self->data();
    }
}


%ignore KeyedCompleteTestType::array_enum2_field(std::array<Material, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_enum2_field() const;
%template(Material_3_array) std::array<enum Material,3>;
%extend std::array<enum Material, 3>
{
    const enum Material* get_buffer() const
    {
        return self->data();
    }
}


%ignore KeyedCompleteTestType::array_struct_field(std::array<StructType, max_array_size>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_struct_field() const;
%template(StructType_3_array) std::array<StructType,3>;


%ignore KeyedCompleteTestType::bounded_sequence_char_field(std::vector<char>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_char_field() const;
%extend std::vector<char>
{
    const char* get_buffer() const
    {
        return self->data();
    }
}

%template(char_vector) std::vector<char>;


%ignore KeyedCompleteTestType::bounded_sequence_uint8_field(std::vector<uint8_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_uint8_field() const;
%extend std::vector<uint8_t>
{
    const uint8_t* get_buffer() const
    {
        return self->data();
    }
}

%template(uint8_t_vector) std::vector<uint8_t>;


%ignore KeyedCompleteTestType::bounded_sequence_int16_field(std::vector<int16_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_int16_field() const;
%extend std::vector<int16_t>
{
    const int16_t* get_buffer() const
    {
        return self->data();
    }
}

%template(int16_t_vector) std::vector<int16_t>;


%ignore KeyedCompleteTestType::bounded_sequence_uint16_field(std::vector<uint16_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_uint16_field() const;
%extend std::vector<uint16_t>
{
    const uint16_t* get_buffer() const
    {
        return self->data();
    }
}

%template(uint16_t_vector) std::vector<uint16_t>;


%ignore KeyedCompleteTestType::bounded_sequence_int32_field(std::vector<int32_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_int32_field() const;
%extend std::vector<int32_t>
{
    const int32_t* get_buffer() const
    {
        return self->data();
    }
}

%template(int32_t_vector) std::vector<int32_t>;


%ignore KeyedCompleteTestType::bounded_sequence_uint32_field(std::vector<uint32_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_uint32_field() const;
%extend std::vector<uint32_t>
{
    const uint32_t* get_buffer() const
    {
        return self->data();
    }
}

%template(uint32_t_vector) std::vector<uint32_t>;


%ignore KeyedCompleteTestType::bounded_sequence_int64_field(std::vector<int64_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_int64_field() const;
%extend std::vector<int64_t>
{
    const int64_t* get_buffer() const
    {
        return self->data();
    }
}

%template(int64_t_vector) std::vector<int64_t>;


%ignore KeyedCompleteTestType::bounded_sequence_uint64_field(std::vector<uint64_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_uint64_field() const;
%extend std::vector<uint64_t>
{
    const uint64_t* get_buffer() const
    {
        return self->data();
    }
}

%template(uint64_t_vector) std::vector<uint64_t>;


%ignore KeyedCompleteTestType::bounded_sequence_float_field(std::vector<float>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_float_field() const;
%extend std::vector<float>
{
    const float* get_buffer() const
    {
        return self->data();
    }
}

%template(float_vector) std::vector<float>;


%ignore KeyedCompleteTestType::bounded_sequence_double_field(std::vector<double>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_double_field() const;
%extend std::vector<double>
{
    const double* get_buffer() const
    {
        return self->data();
    }
}

%template(double_vector) std::vector<double>;


%ignore KeyedCompleteTestType::bounded_sequence_bool_field(std::vector<bool>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_bool_field() const;
%template(bool_vector) std::vector<bool>;


%ignore KeyedCompleteTestType::bounded_sequence_enum_field(std::vector<Color>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_enum_field() const;
%extend std::vector<Color>
{
    const Color* get_buffer() const
    {
        return self->data();
    }
}

%template(Color_vector) std::vector<enum Color>;


%ignore KeyedCompleteTestType::bounded_sequence_enum2_field(std::vector<Material>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_enum2_field() const;
%extend std::vector<Material>
{
    const Material* get_buffer() const
    {
        return self->data();
    }
}

%template(Material_vector) std::vector<enum Material>;


%ignore KeyedCompleteTestType::bounded_sequence_struct_field(std::vector<StructType>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_struct_field() const;
%template(StructType_vector) std::vector<StructType>;


%ignore KeyedCompleteTestType::unbounded_sequence_char_field(std::vector<char>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_char_field() const;
%extend std::vector<char>
{
    const char* get_buffer() const
    {
        return self->data();
    }
}

%template(char_vector) std::vector<char>;


%ignore KeyedCompleteTestType::unbounded_sequence_uint8_field(std::vector<uint8_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_uint8_field() const;
%extend std::vector<uint8_t>
{
    const uint8_t* get_buffer() const
    {
        return self->data();
    }
}

%template(uint8_t_vector) std::vector<uint8_t>;


%ignore KeyedCompleteTestType::unbounded_sequence_int16_field(std::vector<int16_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_int16_field() const;
%extend std::vector<int16_t>
{
    const int16_t* get_buffer() const
    {
        return self->data();
    }
}

%template(int16_t_vector) std::vector<int16_t>;


%ignore KeyedCompleteTestType::unbounded_sequence_uint16_field(std::vector<uint16_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_uint16_field() const;
%extend std::vector<uint16_t>
{
    const uint16_t* get_buffer() const
    {
        return self->data();
    }
}

%template(uint16_t_vector) std::vector<uint16_t>;


%ignore KeyedCompleteTestType::unbounded_sequence_int32_field(std::vector<int32_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_int32_field() const;
%extend std::vector<int32_t>
{
    const int32_t* get_buffer() const
    {
        return self->data();
    }
}

%template(int32_t_vector) std::vector<int32_t>;


%ignore KeyedCompleteTestType::unbounded_sequence_uint32_field(std::vector<uint32_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_uint32_field() const;
%extend std::vector<uint32_t>
{
    const uint32_t* get_buffer() const
    {
        return self->data();
    }
}

%template(uint32_t_vector) std::vector<uint32_t>;


%ignore KeyedCompleteTestType::unbounded_sequence_int64_field(std::vector<int64_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_int64_field() const;
%extend std::vector<int64_t>
{
    const int64_t* get_buffer() const
    {
        return self->data();
    }
}

%template(int64_t_vector) std::vector<int64_t>;


%ignore KeyedCompleteTestType::unbounded_sequence_uint64_field(std::vector<uint64_t>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_uint64_field() const;
%extend std::vector<uint64_t>
{
    const uint64_t* get_buffer() const
    {
        return self->data();
    }
}

%template(uint64_t_vector) std::vector<uint64_t>;


%ignore KeyedCompleteTestType::unbounded_sequence_float_field(std::vector<float>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_float_field() const;
%extend std::vector<float>
{
    const float* get_buffer() const
    {
        return self->data();
    }
}

%template(float_vector) std::vector<float>;


%ignore KeyedCompleteTestType::unbounded_sequence_double_field(std::vector<double>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_double_field() const;
%extend std::vector<double>
{
    const double* get_buffer() const
    {
        return self->data();
    }
}

%template(double_vector) std::vector<double>;


%ignore KeyedCompleteTestType::unbounded_sequence_bool_field(std::vector<bool>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_bool_field() const;
%template(bool_vector) std::vector<bool>;


%ignore KeyedCompleteTestType::unbounded_sequence_enum_field(std::vector<Color>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_enum_field() const;
%extend std::vector<Color>
{
    const Color* get_buffer() const
    {
        return self->data();
    }
}

%template(Color_vector) std::vector<enum Color>;


%ignore KeyedCompleteTestType::unbounded_sequence_enum2_field(std::vector<Material>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_enum2_field() const;
%extend std::vector<Material>
{
    const Material* get_buffer() const
    {
        return self->data();
    }
}

%template(Material_vector) std::vector<enum Material>;


%ignore KeyedCompleteTestType::unbounded_sequence_struct_field(std::vector<StructType>&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_struct_field() const;
%template(StructType_vector) std::vector<StructType>;


%template(_KeyedCompleteTestTypeSeq) eprosima::fastdds::dds::LoanableTypedCollection<KeyedCompleteTestType, std::false_type>;
%template(KeyedCompleteTestTypeSeq) eprosima::fastdds::dds::LoanableSequence<KeyedCompleteTestType, std::false_type>;
%extend eprosima::fastdds::dds::LoanableSequence<KeyedCompleteTestType, std::false_type>
{
    size_t __len__() const
    {
        return self->length();
    }

    const KeyedCompleteTestType& __getitem__(size_t i) const
    {
        return (*self)[i];
    }
}


// Include the class interfaces
%include "test_complete.hpp"

// Include the corresponding TopicDataType
%include "test_completePubSubTypes.i"
