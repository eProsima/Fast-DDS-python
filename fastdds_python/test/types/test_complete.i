// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file test_complete.i
 * This header file contains the SWIG interface of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

%module test_complete

// SWIG helper modules
%include "stdint.i"
%include "std_string.i"
%include "std_vector.i"
%include "std_array.i"
%include "std_map.i"
%include "typemaps.i"

// Assignemt operators are ignored, as there is no such thing in Python.
// Trying to export them issues a warning
%ignore *::operator=;

// Macro declarations
// Any macro used on the Fast DDS header files will give an error if it is not redefined here
#define RTPS_DllAPI
#define eProsima_user_DllExport


%{
#include "test_complete.h"
%}



////////////////////////////////////////////////////////
// Binding for class StructType
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore StructType::StructType(StructType&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
%ignore StructType::char_field(char&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::char_field();
%rename("%s") StructType::char_field() const;

%ignore StructType::uint8_field(uint8_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::uint8_field();
%rename("%s") StructType::uint8_field() const;

%ignore StructType::int16_field(int16_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::int16_field();
%rename("%s") StructType::int16_field() const;

%ignore StructType::uint16_field(uint16_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::uint16_field();
%rename("%s") StructType::uint16_field() const;

%ignore StructType::int32_field(int32_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::int32_field();
%rename("%s") StructType::int32_field() const;

%ignore StructType::uint32_field(uint32_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::uint32_field();
%rename("%s") StructType::uint32_field() const;

%ignore StructType::int64_field(int64_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::int64_field();
%rename("%s") StructType::int64_field() const;

%ignore StructType::uint64_field(uint64_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::uint64_field();
%rename("%s") StructType::uint64_field() const;

%ignore StructType::float_field(float&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::float_field();
%rename("%s") StructType::float_field() const;

%ignore StructType::double_field(double&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::double_field();
%rename("%s") StructType::double_field() const;

%ignore StructType::bool_field(bool&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::bool_field();
%rename("%s") StructType::bool_field() const;

%ignore StructType::string_field(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::string_field();
%rename("%s") StructType::string_field() const;

%ignore StructType::enum_field(Color&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::enum_field();
%rename("%s") StructType::enum_field() const;

%ignore StructType::enum2_field(Material&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore StructType::enum2_field();
%rename("%s") StructType::enum2_field() const;




////////////////////////////////////////////////////////
// Binding for class CompleteTestType
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore CompleteTestType::CompleteTestType(CompleteTestType&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
%ignore CompleteTestType::char_field(char&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::char_field();
%rename("%s") CompleteTestType::char_field() const;

%ignore CompleteTestType::uint8_field(uint8_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::uint8_field();
%rename("%s") CompleteTestType::uint8_field() const;

%ignore CompleteTestType::int16_field(int16_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::int16_field();
%rename("%s") CompleteTestType::int16_field() const;

%ignore CompleteTestType::uint16_field(uint16_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::uint16_field();
%rename("%s") CompleteTestType::uint16_field() const;

%ignore CompleteTestType::int32_field(int32_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::int32_field();
%rename("%s") CompleteTestType::int32_field() const;

%ignore CompleteTestType::uint32_field(uint32_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::uint32_field();
%rename("%s") CompleteTestType::uint32_field() const;

%ignore CompleteTestType::int64_field(int64_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::int64_field();
%rename("%s") CompleteTestType::int64_field() const;

%ignore CompleteTestType::uint64_field(uint64_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::uint64_field();
%rename("%s") CompleteTestType::uint64_field() const;

%ignore CompleteTestType::float_field(float&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::float_field();
%rename("%s") CompleteTestType::float_field() const;

%ignore CompleteTestType::double_field(double&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::double_field();
%rename("%s") CompleteTestType::double_field() const;

%ignore CompleteTestType::bool_field(bool&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bool_field();
%rename("%s") CompleteTestType::bool_field() const;

%ignore CompleteTestType::string_field(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::string_field();
%rename("%s") CompleteTestType::string_field() const;

%ignore CompleteTestType::enum_field(Color&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::enum_field();
%rename("%s") CompleteTestType::enum_field() const;

%ignore CompleteTestType::enum2_field(Material&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::enum2_field();
%rename("%s") CompleteTestType::enum2_field() const;

%ignore CompleteTestType::struct_field(StructType&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::struct_field();
%rename("%s") CompleteTestType::struct_field() const;

%ignore CompleteTestType::array_char_field(std::array<char, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_char_field() const;
%template(char_max_array_size_array) std::array<char,max_array_size>;
%ignore CompleteTestType::array_uint8_field(std::array<uint8_t, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_uint8_field() const;
%template(uint8_t_max_array_size_array) std::array<uint8_t,max_array_size>;
%ignore CompleteTestType::array_int16_field(std::array<int16_t, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_int16_field() const;
%template(int16_t_max_array_size_array) std::array<int16_t,max_array_size>;
%ignore CompleteTestType::array_uint16_field(std::array<uint16_t, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_uint16_field() const;
%template(uint16_t_max_array_size_array) std::array<uint16_t,max_array_size>;
%ignore CompleteTestType::array_int32_field(std::array<int32_t, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_int32_field() const;
%template(int32_t_max_array_size_array) std::array<int32_t,max_array_size>;
%ignore CompleteTestType::array_uint32_field(std::array<uint32_t, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_uint32_field() const;
%template(uint32_t_max_array_size_array) std::array<uint32_t,max_array_size>;
%ignore CompleteTestType::array_int64_field(std::array<int64_t, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_int64_field() const;
%template(int64_t_max_array_size_array) std::array<int64_t,max_array_size>;
%ignore CompleteTestType::array_uint64_field(std::array<uint64_t, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_uint64_field() const;
%template(uint64_t_max_array_size_array) std::array<uint64_t,max_array_size>;
%ignore CompleteTestType::array_float_field(std::array<float, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_float_field() const;
%template(float_max_array_size_array) std::array<float,max_array_size>;
%ignore CompleteTestType::array_double_field(std::array<double, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_double_field() const;
%template(double_max_array_size_array) std::array<double,max_array_size>;
%ignore CompleteTestType::array_bool_field(std::array<bool, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_bool_field() const;
%template(bool_max_array_size_array) std::array<bool,max_array_size>;
%ignore CompleteTestType::array_enum_field(std::array<Color, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_enum_field() const;
%template(Color_max_array_size_array) std::array<Color,max_array_size>;
%ignore CompleteTestType::array_enum2_field(std::array<Material, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_enum2_field() const;
%template(Material_max_array_size_array) std::array<Material,max_array_size>;
%ignore CompleteTestType::array_struct_field(std::array<StructType, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::array_struct_field() const;
%template(StructType_max_array_size_array) std::array<StructType,max_array_size>;
%ignore CompleteTestType::bounded_sequence_char_field(std::vector<char>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_char_field() const;
%template(char_vector) std::vector<char>;

%ignore CompleteTestType::bounded_sequence_uint8_field(std::vector<uint8_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_uint8_field() const;
%template(uint8_t_vector) std::vector<uint8_t>;

%ignore CompleteTestType::bounded_sequence_int16_field(std::vector<int16_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_int16_field() const;
%template(int16_t_vector) std::vector<int16_t>;

%ignore CompleteTestType::bounded_sequence_uint16_field(std::vector<uint16_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_uint16_field() const;
%template(uint16_t_vector) std::vector<uint16_t>;

%ignore CompleteTestType::bounded_sequence_int32_field(std::vector<int32_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_int32_field() const;
%template(int32_t_vector) std::vector<int32_t>;

%ignore CompleteTestType::bounded_sequence_uint32_field(std::vector<uint32_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_uint32_field() const;
%template(uint32_t_vector) std::vector<uint32_t>;

%ignore CompleteTestType::bounded_sequence_int64_field(std::vector<int64_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_int64_field() const;
%template(int64_t_vector) std::vector<int64_t>;

%ignore CompleteTestType::bounded_sequence_uint64_field(std::vector<uint64_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_uint64_field() const;
%template(uint64_t_vector) std::vector<uint64_t>;

%ignore CompleteTestType::bounded_sequence_float_field(std::vector<float>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_float_field() const;
%template(float_vector) std::vector<float>;

%ignore CompleteTestType::bounded_sequence_double_field(std::vector<double>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_double_field() const;
%template(double_vector) std::vector<double>;

%ignore CompleteTestType::bounded_sequence_bool_field(std::vector<bool>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_bool_field() const;
%template(bool_vector) std::vector<bool>;

%ignore CompleteTestType::bounded_sequence_enum_field(std::vector<Color>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_enum_field() const;
%template(Color_vector) std::vector<Color>;

%ignore CompleteTestType::bounded_sequence_enum2_field(std::vector<Material>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_enum2_field() const;
%template(Material_vector) std::vector<Material>;

%ignore CompleteTestType::bounded_sequence_struct_field(std::vector<StructType>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::bounded_sequence_struct_field() const;
%template(StructType_vector) std::vector<StructType>;

%ignore CompleteTestType::unbounded_sequence_char_field(std::vector<char>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_char_field() const;
%template(char_vector) std::vector<char>;

%ignore CompleteTestType::unbounded_sequence_uint8_field(std::vector<uint8_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_uint8_field() const;
%template(uint8_t_vector) std::vector<uint8_t>;

%ignore CompleteTestType::unbounded_sequence_int16_field(std::vector<int16_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_int16_field() const;
%template(int16_t_vector) std::vector<int16_t>;

%ignore CompleteTestType::unbounded_sequence_uint16_field(std::vector<uint16_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_uint16_field() const;
%template(uint16_t_vector) std::vector<uint16_t>;

%ignore CompleteTestType::unbounded_sequence_int32_field(std::vector<int32_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_int32_field() const;
%template(int32_t_vector) std::vector<int32_t>;

%ignore CompleteTestType::unbounded_sequence_uint32_field(std::vector<uint32_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_uint32_field() const;
%template(uint32_t_vector) std::vector<uint32_t>;

%ignore CompleteTestType::unbounded_sequence_int64_field(std::vector<int64_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_int64_field() const;
%template(int64_t_vector) std::vector<int64_t>;

%ignore CompleteTestType::unbounded_sequence_uint64_field(std::vector<uint64_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_uint64_field() const;
%template(uint64_t_vector) std::vector<uint64_t>;

%ignore CompleteTestType::unbounded_sequence_float_field(std::vector<float>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_float_field() const;
%template(float_vector) std::vector<float>;

%ignore CompleteTestType::unbounded_sequence_double_field(std::vector<double>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_double_field() const;
%template(double_vector) std::vector<double>;

%ignore CompleteTestType::unbounded_sequence_bool_field(std::vector<bool>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_bool_field() const;
%template(bool_vector) std::vector<bool>;

%ignore CompleteTestType::unbounded_sequence_enum_field(std::vector<Color>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_enum_field() const;
%template(Color_vector) std::vector<Color>;

%ignore CompleteTestType::unbounded_sequence_enum2_field(std::vector<Material>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_enum2_field() const;
%template(Material_vector) std::vector<Material>;

%ignore CompleteTestType::unbounded_sequence_struct_field(std::vector<StructType>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore CompleteTestType::unbounded_sequence_struct_field() const;
%template(StructType_vector) std::vector<StructType>;


////////////////////////////////////////////////////////
// Binding for class KeyedCompleteTestType
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore KeyedCompleteTestType::KeyedCompleteTestType(KeyedCompleteTestType&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
%ignore KeyedCompleteTestType::id(int32_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::id();
%rename("%s") KeyedCompleteTestType::id() const;

%ignore KeyedCompleteTestType::char_field(char&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::char_field();
%rename("%s") KeyedCompleteTestType::char_field() const;

%ignore KeyedCompleteTestType::uint8_field(uint8_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::uint8_field();
%rename("%s") KeyedCompleteTestType::uint8_field() const;

%ignore KeyedCompleteTestType::int16_field(int16_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::int16_field();
%rename("%s") KeyedCompleteTestType::int16_field() const;

%ignore KeyedCompleteTestType::uint16_field(uint16_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::uint16_field();
%rename("%s") KeyedCompleteTestType::uint16_field() const;

%ignore KeyedCompleteTestType::int32_field(int32_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::int32_field();
%rename("%s") KeyedCompleteTestType::int32_field() const;

%ignore KeyedCompleteTestType::uint32_field(uint32_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::uint32_field();
%rename("%s") KeyedCompleteTestType::uint32_field() const;

%ignore KeyedCompleteTestType::int64_field(int64_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::int64_field();
%rename("%s") KeyedCompleteTestType::int64_field() const;

%ignore KeyedCompleteTestType::uint64_field(uint64_t&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::uint64_field();
%rename("%s") KeyedCompleteTestType::uint64_field() const;

%ignore KeyedCompleteTestType::float_field(float&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::float_field();
%rename("%s") KeyedCompleteTestType::float_field() const;

%ignore KeyedCompleteTestType::double_field(double&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::double_field();
%rename("%s") KeyedCompleteTestType::double_field() const;

%ignore KeyedCompleteTestType::bool_field(bool&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bool_field();
%rename("%s") KeyedCompleteTestType::bool_field() const;

%ignore KeyedCompleteTestType::string_field(std::string&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::string_field();
%rename("%s") KeyedCompleteTestType::string_field() const;

%ignore KeyedCompleteTestType::enum_field(Color&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::enum_field();
%rename("%s") KeyedCompleteTestType::enum_field() const;

%ignore KeyedCompleteTestType::enum2_field(Material&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::enum2_field();
%rename("%s") KeyedCompleteTestType::enum2_field() const;

%ignore KeyedCompleteTestType::struct_field(StructType&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::struct_field();
%rename("%s") KeyedCompleteTestType::struct_field() const;

%ignore KeyedCompleteTestType::array_char_field(std::array<char, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_char_field() const;
%template(char_max_array_size_array) std::array<char,max_array_size>;
%ignore KeyedCompleteTestType::array_uint8_field(std::array<uint8_t, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_uint8_field() const;
%template(uint8_t_max_array_size_array) std::array<uint8_t,max_array_size>;
%ignore KeyedCompleteTestType::array_int16_field(std::array<int16_t, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_int16_field() const;
%template(int16_t_max_array_size_array) std::array<int16_t,max_array_size>;
%ignore KeyedCompleteTestType::array_uint16_field(std::array<uint16_t, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_uint16_field() const;
%template(uint16_t_max_array_size_array) std::array<uint16_t,max_array_size>;
%ignore KeyedCompleteTestType::array_int32_field(std::array<int32_t, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_int32_field() const;
%template(int32_t_max_array_size_array) std::array<int32_t,max_array_size>;
%ignore KeyedCompleteTestType::array_uint32_field(std::array<uint32_t, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_uint32_field() const;
%template(uint32_t_max_array_size_array) std::array<uint32_t,max_array_size>;
%ignore KeyedCompleteTestType::array_int64_field(std::array<int64_t, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_int64_field() const;
%template(int64_t_max_array_size_array) std::array<int64_t,max_array_size>;
%ignore KeyedCompleteTestType::array_uint64_field(std::array<uint64_t, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_uint64_field() const;
%template(uint64_t_max_array_size_array) std::array<uint64_t,max_array_size>;
%ignore KeyedCompleteTestType::array_float_field(std::array<float, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_float_field() const;
%template(float_max_array_size_array) std::array<float,max_array_size>;
%ignore KeyedCompleteTestType::array_double_field(std::array<double, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_double_field() const;
%template(double_max_array_size_array) std::array<double,max_array_size>;
%ignore KeyedCompleteTestType::array_bool_field(std::array<bool, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_bool_field() const;
%template(bool_max_array_size_array) std::array<bool,max_array_size>;
%ignore KeyedCompleteTestType::array_enum_field(std::array<Color, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_enum_field() const;
%template(Color_max_array_size_array) std::array<Color,max_array_size>;
%ignore KeyedCompleteTestType::array_enum2_field(std::array<Material, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_enum2_field() const;
%template(Material_max_array_size_array) std::array<Material,max_array_size>;
%ignore KeyedCompleteTestType::array_struct_field(std::array<StructType, max_array_size>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::array_struct_field() const;
%template(StructType_max_array_size_array) std::array<StructType,max_array_size>;
%ignore KeyedCompleteTestType::bounded_sequence_char_field(std::vector<char>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_char_field() const;
%template(char_vector) std::vector<char>;

%ignore KeyedCompleteTestType::bounded_sequence_uint8_field(std::vector<uint8_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_uint8_field() const;
%template(uint8_t_vector) std::vector<uint8_t>;

%ignore KeyedCompleteTestType::bounded_sequence_int16_field(std::vector<int16_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_int16_field() const;
%template(int16_t_vector) std::vector<int16_t>;

%ignore KeyedCompleteTestType::bounded_sequence_uint16_field(std::vector<uint16_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_uint16_field() const;
%template(uint16_t_vector) std::vector<uint16_t>;

%ignore KeyedCompleteTestType::bounded_sequence_int32_field(std::vector<int32_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_int32_field() const;
%template(int32_t_vector) std::vector<int32_t>;

%ignore KeyedCompleteTestType::bounded_sequence_uint32_field(std::vector<uint32_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_uint32_field() const;
%template(uint32_t_vector) std::vector<uint32_t>;

%ignore KeyedCompleteTestType::bounded_sequence_int64_field(std::vector<int64_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_int64_field() const;
%template(int64_t_vector) std::vector<int64_t>;

%ignore KeyedCompleteTestType::bounded_sequence_uint64_field(std::vector<uint64_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_uint64_field() const;
%template(uint64_t_vector) std::vector<uint64_t>;

%ignore KeyedCompleteTestType::bounded_sequence_float_field(std::vector<float>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_float_field() const;
%template(float_vector) std::vector<float>;

%ignore KeyedCompleteTestType::bounded_sequence_double_field(std::vector<double>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_double_field() const;
%template(double_vector) std::vector<double>;

%ignore KeyedCompleteTestType::bounded_sequence_bool_field(std::vector<bool>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_bool_field() const;
%template(bool_vector) std::vector<bool>;

%ignore KeyedCompleteTestType::bounded_sequence_enum_field(std::vector<Color>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_enum_field() const;
%template(Color_vector) std::vector<Color>;

%ignore KeyedCompleteTestType::bounded_sequence_enum2_field(std::vector<Material>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_enum2_field() const;
%template(Material_vector) std::vector<Material>;

%ignore KeyedCompleteTestType::bounded_sequence_struct_field(std::vector<StructType>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::bounded_sequence_struct_field() const;
%template(StructType_vector) std::vector<StructType>;

%ignore KeyedCompleteTestType::unbounded_sequence_char_field(std::vector<char>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_char_field() const;
%template(char_vector) std::vector<char>;

%ignore KeyedCompleteTestType::unbounded_sequence_uint8_field(std::vector<uint8_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_uint8_field() const;
%template(uint8_t_vector) std::vector<uint8_t>;

%ignore KeyedCompleteTestType::unbounded_sequence_int16_field(std::vector<int16_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_int16_field() const;
%template(int16_t_vector) std::vector<int16_t>;

%ignore KeyedCompleteTestType::unbounded_sequence_uint16_field(std::vector<uint16_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_uint16_field() const;
%template(uint16_t_vector) std::vector<uint16_t>;

%ignore KeyedCompleteTestType::unbounded_sequence_int32_field(std::vector<int32_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_int32_field() const;
%template(int32_t_vector) std::vector<int32_t>;

%ignore KeyedCompleteTestType::unbounded_sequence_uint32_field(std::vector<uint32_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_uint32_field() const;
%template(uint32_t_vector) std::vector<uint32_t>;

%ignore KeyedCompleteTestType::unbounded_sequence_int64_field(std::vector<int64_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_int64_field() const;
%template(int64_t_vector) std::vector<int64_t>;

%ignore KeyedCompleteTestType::unbounded_sequence_uint64_field(std::vector<uint64_t>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_uint64_field() const;
%template(uint64_t_vector) std::vector<uint64_t>;

%ignore KeyedCompleteTestType::unbounded_sequence_float_field(std::vector<float>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_float_field() const;
%template(float_vector) std::vector<float>;

%ignore KeyedCompleteTestType::unbounded_sequence_double_field(std::vector<double>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_double_field() const;
%template(double_vector) std::vector<double>;

%ignore KeyedCompleteTestType::unbounded_sequence_bool_field(std::vector<bool>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_bool_field() const;
%template(bool_vector) std::vector<bool>;

%ignore KeyedCompleteTestType::unbounded_sequence_enum_field(std::vector<Color>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_enum_field() const;
%template(Color_vector) std::vector<Color>;

%ignore KeyedCompleteTestType::unbounded_sequence_enum2_field(std::vector<Material>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_enum2_field() const;
%template(Material_vector) std::vector<Material>;

%ignore KeyedCompleteTestType::unbounded_sequence_struct_field(std::vector<StructType>&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore KeyedCompleteTestType::unbounded_sequence_struct_field() const;
%template(StructType_vector) std::vector<StructType>;



// Include the class interfaces
%include "test_complete.h"

// Include the corresponding TopicDataType
%include "test_completePubSubTypes.i"
