// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file test_complete.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "test_complete.h"

#if FASTCDR_VERSION_MAJOR > 1

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




StructType::StructType()
{
}

StructType::~StructType()
{
}

StructType::StructType(
        const StructType& x)
{
    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = x.m_string_field;
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
    m_included_module_struct = x.m_included_module_struct;
}

StructType::StructType(
        StructType&& x) noexcept
{
    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = std::move(x.m_string_field);
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
    m_included_module_struct = std::move(x.m_included_module_struct);
}

StructType& StructType::operator =(
        const StructType& x)
{

    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = x.m_string_field;
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
    m_included_module_struct = x.m_included_module_struct;
    return *this;
}

StructType& StructType::operator =(
        StructType&& x) noexcept
{

    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = std::move(x.m_string_field);
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
    m_included_module_struct = std::move(x.m_included_module_struct);
    return *this;
}

bool StructType::operator ==(
        const StructType& x) const
{
    return (m_char_field == x.m_char_field &&
           m_uint8_field == x.m_uint8_field &&
           m_int16_field == x.m_int16_field &&
           m_uint16_field == x.m_uint16_field &&
           m_int32_field == x.m_int32_field &&
           m_uint32_field == x.m_uint32_field &&
           m_int64_field == x.m_int64_field &&
           m_uint64_field == x.m_uint64_field &&
           m_float_field == x.m_float_field &&
           m_double_field == x.m_double_field &&
           m_bool_field == x.m_bool_field &&
           m_string_field == x.m_string_field &&
           m_enum_field == x.m_enum_field &&
           m_enum2_field == x.m_enum2_field &&
           m_included_module_struct == x.m_included_module_struct);
}

bool StructType::operator !=(
        const StructType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member char_field
 * @param _char_field New value for member char_field
 */
void StructType::char_field(
        char _char_field)
{
    m_char_field = _char_field;
}

/*!
 * @brief This function returns the value of member char_field
 * @return Value of member char_field
 */
char StructType::char_field() const
{
    return m_char_field;
}

/*!
 * @brief This function returns a reference to member char_field
 * @return Reference to member char_field
 */
char& StructType::char_field()
{
    return m_char_field;
}


/*!
 * @brief This function sets a value in member uint8_field
 * @param _uint8_field New value for member uint8_field
 */
void StructType::uint8_field(
        uint8_t _uint8_field)
{
    m_uint8_field = _uint8_field;
}

/*!
 * @brief This function returns the value of member uint8_field
 * @return Value of member uint8_field
 */
uint8_t StructType::uint8_field() const
{
    return m_uint8_field;
}

/*!
 * @brief This function returns a reference to member uint8_field
 * @return Reference to member uint8_field
 */
uint8_t& StructType::uint8_field()
{
    return m_uint8_field;
}


/*!
 * @brief This function sets a value in member int16_field
 * @param _int16_field New value for member int16_field
 */
void StructType::int16_field(
        int16_t _int16_field)
{
    m_int16_field = _int16_field;
}

/*!
 * @brief This function returns the value of member int16_field
 * @return Value of member int16_field
 */
int16_t StructType::int16_field() const
{
    return m_int16_field;
}

/*!
 * @brief This function returns a reference to member int16_field
 * @return Reference to member int16_field
 */
int16_t& StructType::int16_field()
{
    return m_int16_field;
}


/*!
 * @brief This function sets a value in member uint16_field
 * @param _uint16_field New value for member uint16_field
 */
void StructType::uint16_field(
        uint16_t _uint16_field)
{
    m_uint16_field = _uint16_field;
}

/*!
 * @brief This function returns the value of member uint16_field
 * @return Value of member uint16_field
 */
uint16_t StructType::uint16_field() const
{
    return m_uint16_field;
}

/*!
 * @brief This function returns a reference to member uint16_field
 * @return Reference to member uint16_field
 */
uint16_t& StructType::uint16_field()
{
    return m_uint16_field;
}


/*!
 * @brief This function sets a value in member int32_field
 * @param _int32_field New value for member int32_field
 */
void StructType::int32_field(
        int32_t _int32_field)
{
    m_int32_field = _int32_field;
}

/*!
 * @brief This function returns the value of member int32_field
 * @return Value of member int32_field
 */
int32_t StructType::int32_field() const
{
    return m_int32_field;
}

/*!
 * @brief This function returns a reference to member int32_field
 * @return Reference to member int32_field
 */
int32_t& StructType::int32_field()
{
    return m_int32_field;
}


/*!
 * @brief This function sets a value in member uint32_field
 * @param _uint32_field New value for member uint32_field
 */
void StructType::uint32_field(
        uint32_t _uint32_field)
{
    m_uint32_field = _uint32_field;
}

/*!
 * @brief This function returns the value of member uint32_field
 * @return Value of member uint32_field
 */
uint32_t StructType::uint32_field() const
{
    return m_uint32_field;
}

/*!
 * @brief This function returns a reference to member uint32_field
 * @return Reference to member uint32_field
 */
uint32_t& StructType::uint32_field()
{
    return m_uint32_field;
}


/*!
 * @brief This function sets a value in member int64_field
 * @param _int64_field New value for member int64_field
 */
void StructType::int64_field(
        int64_t _int64_field)
{
    m_int64_field = _int64_field;
}

/*!
 * @brief This function returns the value of member int64_field
 * @return Value of member int64_field
 */
int64_t StructType::int64_field() const
{
    return m_int64_field;
}

/*!
 * @brief This function returns a reference to member int64_field
 * @return Reference to member int64_field
 */
int64_t& StructType::int64_field()
{
    return m_int64_field;
}


/*!
 * @brief This function sets a value in member uint64_field
 * @param _uint64_field New value for member uint64_field
 */
void StructType::uint64_field(
        uint64_t _uint64_field)
{
    m_uint64_field = _uint64_field;
}

/*!
 * @brief This function returns the value of member uint64_field
 * @return Value of member uint64_field
 */
uint64_t StructType::uint64_field() const
{
    return m_uint64_field;
}

/*!
 * @brief This function returns a reference to member uint64_field
 * @return Reference to member uint64_field
 */
uint64_t& StructType::uint64_field()
{
    return m_uint64_field;
}


/*!
 * @brief This function sets a value in member float_field
 * @param _float_field New value for member float_field
 */
void StructType::float_field(
        float _float_field)
{
    m_float_field = _float_field;
}

/*!
 * @brief This function returns the value of member float_field
 * @return Value of member float_field
 */
float StructType::float_field() const
{
    return m_float_field;
}

/*!
 * @brief This function returns a reference to member float_field
 * @return Reference to member float_field
 */
float& StructType::float_field()
{
    return m_float_field;
}


/*!
 * @brief This function sets a value in member double_field
 * @param _double_field New value for member double_field
 */
void StructType::double_field(
        double _double_field)
{
    m_double_field = _double_field;
}

/*!
 * @brief This function returns the value of member double_field
 * @return Value of member double_field
 */
double StructType::double_field() const
{
    return m_double_field;
}

/*!
 * @brief This function returns a reference to member double_field
 * @return Reference to member double_field
 */
double& StructType::double_field()
{
    return m_double_field;
}


/*!
 * @brief This function sets a value in member bool_field
 * @param _bool_field New value for member bool_field
 */
void StructType::bool_field(
        bool _bool_field)
{
    m_bool_field = _bool_field;
}

/*!
 * @brief This function returns the value of member bool_field
 * @return Value of member bool_field
 */
bool StructType::bool_field() const
{
    return m_bool_field;
}

/*!
 * @brief This function returns a reference to member bool_field
 * @return Reference to member bool_field
 */
bool& StructType::bool_field()
{
    return m_bool_field;
}


/*!
 * @brief This function copies the value in member string_field
 * @param _string_field New value to be copied in member string_field
 */
void StructType::string_field(
        const std::string& _string_field)
{
    m_string_field = _string_field;
}

/*!
 * @brief This function moves the value in member string_field
 * @param _string_field New value to be moved in member string_field
 */
void StructType::string_field(
        std::string&& _string_field)
{
    m_string_field = std::move(_string_field);
}

/*!
 * @brief This function returns a constant reference to member string_field
 * @return Constant reference to member string_field
 */
const std::string& StructType::string_field() const
{
    return m_string_field;
}

/*!
 * @brief This function returns a reference to member string_field
 * @return Reference to member string_field
 */
std::string& StructType::string_field()
{
    return m_string_field;
}


/*!
 * @brief This function sets a value in member enum_field
 * @param _enum_field New value for member enum_field
 */
void StructType::enum_field(
        Color _enum_field)
{
    m_enum_field = _enum_field;
}

/*!
 * @brief This function returns the value of member enum_field
 * @return Value of member enum_field
 */
Color StructType::enum_field() const
{
    return m_enum_field;
}

/*!
 * @brief This function returns a reference to member enum_field
 * @return Reference to member enum_field
 */
Color& StructType::enum_field()
{
    return m_enum_field;
}


/*!
 * @brief This function sets a value in member enum2_field
 * @param _enum2_field New value for member enum2_field
 */
void StructType::enum2_field(
        Material _enum2_field)
{
    m_enum2_field = _enum2_field;
}

/*!
 * @brief This function returns the value of member enum2_field
 * @return Value of member enum2_field
 */
Material StructType::enum2_field() const
{
    return m_enum2_field;
}

/*!
 * @brief This function returns a reference to member enum2_field
 * @return Reference to member enum2_field
 */
Material& StructType::enum2_field()
{
    return m_enum2_field;
}


/*!
 * @brief This function copies the value in member included_module_struct
 * @param _included_module_struct New value to be copied in member included_module_struct
 */
void StructType::included_module_struct(
        const eprosima::test2::StructType2& _included_module_struct)
{
    m_included_module_struct = _included_module_struct;
}

/*!
 * @brief This function moves the value in member included_module_struct
 * @param _included_module_struct New value to be moved in member included_module_struct
 */
void StructType::included_module_struct(
        eprosima::test2::StructType2&& _included_module_struct)
{
    m_included_module_struct = std::move(_included_module_struct);
}

/*!
 * @brief This function returns a constant reference to member included_module_struct
 * @return Constant reference to member included_module_struct
 */
const eprosima::test2::StructType2& StructType::included_module_struct() const
{
    return m_included_module_struct;
}

/*!
 * @brief This function returns a reference to member included_module_struct
 * @return Reference to member included_module_struct
 */
eprosima::test2::StructType2& StructType::included_module_struct()
{
    return m_included_module_struct;
}








CompleteTestType::CompleteTestType()
{
}

CompleteTestType::~CompleteTestType()
{
}

CompleteTestType::CompleteTestType(
        const CompleteTestType& x)
{
    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = x.m_string_field;
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
    m_struct_field = x.m_struct_field;
    m_char_opt_field = x.m_char_opt_field;
    m_uint8_opt_field = x.m_uint8_opt_field;
    m_int16_opt_field = x.m_int16_opt_field;
    m_uint16_opt_field = x.m_uint16_opt_field;
    m_int32_opt_field = x.m_int32_opt_field;
    m_uint32_opt_field = x.m_uint32_opt_field;
    m_int64_opt_field = x.m_int64_opt_field;
    m_uint64_opt_field = x.m_uint64_opt_field;
    m_float_opt_field = x.m_float_opt_field;
    m_double_opt_field = x.m_double_opt_field;
    m_bool_opt_field = x.m_bool_opt_field;
    m_string_opt_field = x.m_string_opt_field;
    m_enum_opt_field = x.m_enum_opt_field;
    m_enum2_opt_field = x.m_enum2_opt_field;
    m_struct_opt_field = x.m_struct_opt_field;
    m_array_char_field = x.m_array_char_field;
    m_array_uint8_field = x.m_array_uint8_field;
    m_array_int16_field = x.m_array_int16_field;
    m_array_uint16_field = x.m_array_uint16_field;
    m_array_int32_field = x.m_array_int32_field;
    m_array_uint32_field = x.m_array_uint32_field;
    m_array_int64_field = x.m_array_int64_field;
    m_array_uint64_field = x.m_array_uint64_field;
    m_array_float_field = x.m_array_float_field;
    m_array_double_field = x.m_array_double_field;
    m_array_bool_field = x.m_array_bool_field;
    m_array_enum_field = x.m_array_enum_field;
    m_array_enum2_field = x.m_array_enum2_field;
    m_array_struct_field = x.m_array_struct_field;
    m_bounded_sequence_char_field = x.m_bounded_sequence_char_field;
    m_bounded_sequence_uint8_field = x.m_bounded_sequence_uint8_field;
    m_bounded_sequence_int16_field = x.m_bounded_sequence_int16_field;
    m_bounded_sequence_uint16_field = x.m_bounded_sequence_uint16_field;
    m_bounded_sequence_int32_field = x.m_bounded_sequence_int32_field;
    m_bounded_sequence_uint32_field = x.m_bounded_sequence_uint32_field;
    m_bounded_sequence_int64_field = x.m_bounded_sequence_int64_field;
    m_bounded_sequence_uint64_field = x.m_bounded_sequence_uint64_field;
    m_bounded_sequence_float_field = x.m_bounded_sequence_float_field;
    m_bounded_sequence_double_field = x.m_bounded_sequence_double_field;
    m_bounded_sequence_bool_field = x.m_bounded_sequence_bool_field;
    m_bounded_sequence_enum_field = x.m_bounded_sequence_enum_field;
    m_bounded_sequence_enum2_field = x.m_bounded_sequence_enum2_field;
    m_bounded_sequence_struct_field = x.m_bounded_sequence_struct_field;
    m_unbounded_sequence_char_field = x.m_unbounded_sequence_char_field;
    m_unbounded_sequence_uint8_field = x.m_unbounded_sequence_uint8_field;
    m_unbounded_sequence_int16_field = x.m_unbounded_sequence_int16_field;
    m_unbounded_sequence_uint16_field = x.m_unbounded_sequence_uint16_field;
    m_unbounded_sequence_int32_field = x.m_unbounded_sequence_int32_field;
    m_unbounded_sequence_uint32_field = x.m_unbounded_sequence_uint32_field;
    m_unbounded_sequence_int64_field = x.m_unbounded_sequence_int64_field;
    m_unbounded_sequence_uint64_field = x.m_unbounded_sequence_uint64_field;
    m_unbounded_sequence_float_field = x.m_unbounded_sequence_float_field;
    m_unbounded_sequence_double_field = x.m_unbounded_sequence_double_field;
    m_unbounded_sequence_bool_field = x.m_unbounded_sequence_bool_field;
    m_unbounded_sequence_enum_field = x.m_unbounded_sequence_enum_field;
    m_unbounded_sequence_enum2_field = x.m_unbounded_sequence_enum2_field;
    m_unbounded_sequence_struct_field = x.m_unbounded_sequence_struct_field;
}

CompleteTestType::CompleteTestType(
        CompleteTestType&& x) noexcept
{
    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = std::move(x.m_string_field);
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
    m_struct_field = std::move(x.m_struct_field);
    m_char_opt_field = x.m_char_opt_field;
    m_uint8_opt_field = x.m_uint8_opt_field;
    m_int16_opt_field = x.m_int16_opt_field;
    m_uint16_opt_field = x.m_uint16_opt_field;
    m_int32_opt_field = x.m_int32_opt_field;
    m_uint32_opt_field = x.m_uint32_opt_field;
    m_int64_opt_field = x.m_int64_opt_field;
    m_uint64_opt_field = x.m_uint64_opt_field;
    m_float_opt_field = x.m_float_opt_field;
    m_double_opt_field = x.m_double_opt_field;
    m_bool_opt_field = x.m_bool_opt_field;
    m_string_opt_field = std::move(x.m_string_opt_field);
    m_enum_opt_field = x.m_enum_opt_field;
    m_enum2_opt_field = x.m_enum2_opt_field;
    m_struct_opt_field = std::move(x.m_struct_opt_field);
    m_array_char_field = std::move(x.m_array_char_field);
    m_array_uint8_field = std::move(x.m_array_uint8_field);
    m_array_int16_field = std::move(x.m_array_int16_field);
    m_array_uint16_field = std::move(x.m_array_uint16_field);
    m_array_int32_field = std::move(x.m_array_int32_field);
    m_array_uint32_field = std::move(x.m_array_uint32_field);
    m_array_int64_field = std::move(x.m_array_int64_field);
    m_array_uint64_field = std::move(x.m_array_uint64_field);
    m_array_float_field = std::move(x.m_array_float_field);
    m_array_double_field = std::move(x.m_array_double_field);
    m_array_bool_field = std::move(x.m_array_bool_field);
    m_array_enum_field = std::move(x.m_array_enum_field);
    m_array_enum2_field = std::move(x.m_array_enum2_field);
    m_array_struct_field = std::move(x.m_array_struct_field);
    m_bounded_sequence_char_field = std::move(x.m_bounded_sequence_char_field);
    m_bounded_sequence_uint8_field = std::move(x.m_bounded_sequence_uint8_field);
    m_bounded_sequence_int16_field = std::move(x.m_bounded_sequence_int16_field);
    m_bounded_sequence_uint16_field = std::move(x.m_bounded_sequence_uint16_field);
    m_bounded_sequence_int32_field = std::move(x.m_bounded_sequence_int32_field);
    m_bounded_sequence_uint32_field = std::move(x.m_bounded_sequence_uint32_field);
    m_bounded_sequence_int64_field = std::move(x.m_bounded_sequence_int64_field);
    m_bounded_sequence_uint64_field = std::move(x.m_bounded_sequence_uint64_field);
    m_bounded_sequence_float_field = std::move(x.m_bounded_sequence_float_field);
    m_bounded_sequence_double_field = std::move(x.m_bounded_sequence_double_field);
    m_bounded_sequence_bool_field = std::move(x.m_bounded_sequence_bool_field);
    m_bounded_sequence_enum_field = std::move(x.m_bounded_sequence_enum_field);
    m_bounded_sequence_enum2_field = std::move(x.m_bounded_sequence_enum2_field);
    m_bounded_sequence_struct_field = std::move(x.m_bounded_sequence_struct_field);
    m_unbounded_sequence_char_field = std::move(x.m_unbounded_sequence_char_field);
    m_unbounded_sequence_uint8_field = std::move(x.m_unbounded_sequence_uint8_field);
    m_unbounded_sequence_int16_field = std::move(x.m_unbounded_sequence_int16_field);
    m_unbounded_sequence_uint16_field = std::move(x.m_unbounded_sequence_uint16_field);
    m_unbounded_sequence_int32_field = std::move(x.m_unbounded_sequence_int32_field);
    m_unbounded_sequence_uint32_field = std::move(x.m_unbounded_sequence_uint32_field);
    m_unbounded_sequence_int64_field = std::move(x.m_unbounded_sequence_int64_field);
    m_unbounded_sequence_uint64_field = std::move(x.m_unbounded_sequence_uint64_field);
    m_unbounded_sequence_float_field = std::move(x.m_unbounded_sequence_float_field);
    m_unbounded_sequence_double_field = std::move(x.m_unbounded_sequence_double_field);
    m_unbounded_sequence_bool_field = std::move(x.m_unbounded_sequence_bool_field);
    m_unbounded_sequence_enum_field = std::move(x.m_unbounded_sequence_enum_field);
    m_unbounded_sequence_enum2_field = std::move(x.m_unbounded_sequence_enum2_field);
    m_unbounded_sequence_struct_field = std::move(x.m_unbounded_sequence_struct_field);
}

CompleteTestType& CompleteTestType::operator =(
        const CompleteTestType& x)
{

    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = x.m_string_field;
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
    m_struct_field = x.m_struct_field;
    m_char_opt_field = x.m_char_opt_field;
    m_uint8_opt_field = x.m_uint8_opt_field;
    m_int16_opt_field = x.m_int16_opt_field;
    m_uint16_opt_field = x.m_uint16_opt_field;
    m_int32_opt_field = x.m_int32_opt_field;
    m_uint32_opt_field = x.m_uint32_opt_field;
    m_int64_opt_field = x.m_int64_opt_field;
    m_uint64_opt_field = x.m_uint64_opt_field;
    m_float_opt_field = x.m_float_opt_field;
    m_double_opt_field = x.m_double_opt_field;
    m_bool_opt_field = x.m_bool_opt_field;
    m_string_opt_field = x.m_string_opt_field;
    m_enum_opt_field = x.m_enum_opt_field;
    m_enum2_opt_field = x.m_enum2_opt_field;
    m_struct_opt_field = x.m_struct_opt_field;
    m_array_char_field = x.m_array_char_field;
    m_array_uint8_field = x.m_array_uint8_field;
    m_array_int16_field = x.m_array_int16_field;
    m_array_uint16_field = x.m_array_uint16_field;
    m_array_int32_field = x.m_array_int32_field;
    m_array_uint32_field = x.m_array_uint32_field;
    m_array_int64_field = x.m_array_int64_field;
    m_array_uint64_field = x.m_array_uint64_field;
    m_array_float_field = x.m_array_float_field;
    m_array_double_field = x.m_array_double_field;
    m_array_bool_field = x.m_array_bool_field;
    m_array_enum_field = x.m_array_enum_field;
    m_array_enum2_field = x.m_array_enum2_field;
    m_array_struct_field = x.m_array_struct_field;
    m_bounded_sequence_char_field = x.m_bounded_sequence_char_field;
    m_bounded_sequence_uint8_field = x.m_bounded_sequence_uint8_field;
    m_bounded_sequence_int16_field = x.m_bounded_sequence_int16_field;
    m_bounded_sequence_uint16_field = x.m_bounded_sequence_uint16_field;
    m_bounded_sequence_int32_field = x.m_bounded_sequence_int32_field;
    m_bounded_sequence_uint32_field = x.m_bounded_sequence_uint32_field;
    m_bounded_sequence_int64_field = x.m_bounded_sequence_int64_field;
    m_bounded_sequence_uint64_field = x.m_bounded_sequence_uint64_field;
    m_bounded_sequence_float_field = x.m_bounded_sequence_float_field;
    m_bounded_sequence_double_field = x.m_bounded_sequence_double_field;
    m_bounded_sequence_bool_field = x.m_bounded_sequence_bool_field;
    m_bounded_sequence_enum_field = x.m_bounded_sequence_enum_field;
    m_bounded_sequence_enum2_field = x.m_bounded_sequence_enum2_field;
    m_bounded_sequence_struct_field = x.m_bounded_sequence_struct_field;
    m_unbounded_sequence_char_field = x.m_unbounded_sequence_char_field;
    m_unbounded_sequence_uint8_field = x.m_unbounded_sequence_uint8_field;
    m_unbounded_sequence_int16_field = x.m_unbounded_sequence_int16_field;
    m_unbounded_sequence_uint16_field = x.m_unbounded_sequence_uint16_field;
    m_unbounded_sequence_int32_field = x.m_unbounded_sequence_int32_field;
    m_unbounded_sequence_uint32_field = x.m_unbounded_sequence_uint32_field;
    m_unbounded_sequence_int64_field = x.m_unbounded_sequence_int64_field;
    m_unbounded_sequence_uint64_field = x.m_unbounded_sequence_uint64_field;
    m_unbounded_sequence_float_field = x.m_unbounded_sequence_float_field;
    m_unbounded_sequence_double_field = x.m_unbounded_sequence_double_field;
    m_unbounded_sequence_bool_field = x.m_unbounded_sequence_bool_field;
    m_unbounded_sequence_enum_field = x.m_unbounded_sequence_enum_field;
    m_unbounded_sequence_enum2_field = x.m_unbounded_sequence_enum2_field;
    m_unbounded_sequence_struct_field = x.m_unbounded_sequence_struct_field;
    return *this;
}

CompleteTestType& CompleteTestType::operator =(
        CompleteTestType&& x) noexcept
{

    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = std::move(x.m_string_field);
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
    m_struct_field = std::move(x.m_struct_field);
    m_char_opt_field = x.m_char_opt_field;
    m_uint8_opt_field = x.m_uint8_opt_field;
    m_int16_opt_field = x.m_int16_opt_field;
    m_uint16_opt_field = x.m_uint16_opt_field;
    m_int32_opt_field = x.m_int32_opt_field;
    m_uint32_opt_field = x.m_uint32_opt_field;
    m_int64_opt_field = x.m_int64_opt_field;
    m_uint64_opt_field = x.m_uint64_opt_field;
    m_float_opt_field = x.m_float_opt_field;
    m_double_opt_field = x.m_double_opt_field;
    m_bool_opt_field = x.m_bool_opt_field;
    m_string_opt_field = std::move(x.m_string_opt_field);
    m_enum_opt_field = x.m_enum_opt_field;
    m_enum2_opt_field = x.m_enum2_opt_field;
    m_struct_opt_field = std::move(x.m_struct_opt_field);
    m_array_char_field = std::move(x.m_array_char_field);
    m_array_uint8_field = std::move(x.m_array_uint8_field);
    m_array_int16_field = std::move(x.m_array_int16_field);
    m_array_uint16_field = std::move(x.m_array_uint16_field);
    m_array_int32_field = std::move(x.m_array_int32_field);
    m_array_uint32_field = std::move(x.m_array_uint32_field);
    m_array_int64_field = std::move(x.m_array_int64_field);
    m_array_uint64_field = std::move(x.m_array_uint64_field);
    m_array_float_field = std::move(x.m_array_float_field);
    m_array_double_field = std::move(x.m_array_double_field);
    m_array_bool_field = std::move(x.m_array_bool_field);
    m_array_enum_field = std::move(x.m_array_enum_field);
    m_array_enum2_field = std::move(x.m_array_enum2_field);
    m_array_struct_field = std::move(x.m_array_struct_field);
    m_bounded_sequence_char_field = std::move(x.m_bounded_sequence_char_field);
    m_bounded_sequence_uint8_field = std::move(x.m_bounded_sequence_uint8_field);
    m_bounded_sequence_int16_field = std::move(x.m_bounded_sequence_int16_field);
    m_bounded_sequence_uint16_field = std::move(x.m_bounded_sequence_uint16_field);
    m_bounded_sequence_int32_field = std::move(x.m_bounded_sequence_int32_field);
    m_bounded_sequence_uint32_field = std::move(x.m_bounded_sequence_uint32_field);
    m_bounded_sequence_int64_field = std::move(x.m_bounded_sequence_int64_field);
    m_bounded_sequence_uint64_field = std::move(x.m_bounded_sequence_uint64_field);
    m_bounded_sequence_float_field = std::move(x.m_bounded_sequence_float_field);
    m_bounded_sequence_double_field = std::move(x.m_bounded_sequence_double_field);
    m_bounded_sequence_bool_field = std::move(x.m_bounded_sequence_bool_field);
    m_bounded_sequence_enum_field = std::move(x.m_bounded_sequence_enum_field);
    m_bounded_sequence_enum2_field = std::move(x.m_bounded_sequence_enum2_field);
    m_bounded_sequence_struct_field = std::move(x.m_bounded_sequence_struct_field);
    m_unbounded_sequence_char_field = std::move(x.m_unbounded_sequence_char_field);
    m_unbounded_sequence_uint8_field = std::move(x.m_unbounded_sequence_uint8_field);
    m_unbounded_sequence_int16_field = std::move(x.m_unbounded_sequence_int16_field);
    m_unbounded_sequence_uint16_field = std::move(x.m_unbounded_sequence_uint16_field);
    m_unbounded_sequence_int32_field = std::move(x.m_unbounded_sequence_int32_field);
    m_unbounded_sequence_uint32_field = std::move(x.m_unbounded_sequence_uint32_field);
    m_unbounded_sequence_int64_field = std::move(x.m_unbounded_sequence_int64_field);
    m_unbounded_sequence_uint64_field = std::move(x.m_unbounded_sequence_uint64_field);
    m_unbounded_sequence_float_field = std::move(x.m_unbounded_sequence_float_field);
    m_unbounded_sequence_double_field = std::move(x.m_unbounded_sequence_double_field);
    m_unbounded_sequence_bool_field = std::move(x.m_unbounded_sequence_bool_field);
    m_unbounded_sequence_enum_field = std::move(x.m_unbounded_sequence_enum_field);
    m_unbounded_sequence_enum2_field = std::move(x.m_unbounded_sequence_enum2_field);
    m_unbounded_sequence_struct_field = std::move(x.m_unbounded_sequence_struct_field);
    return *this;
}

bool CompleteTestType::operator ==(
        const CompleteTestType& x) const
{
    return (m_char_field == x.m_char_field &&
           m_uint8_field == x.m_uint8_field &&
           m_int16_field == x.m_int16_field &&
           m_uint16_field == x.m_uint16_field &&
           m_int32_field == x.m_int32_field &&
           m_uint32_field == x.m_uint32_field &&
           m_int64_field == x.m_int64_field &&
           m_uint64_field == x.m_uint64_field &&
           m_float_field == x.m_float_field &&
           m_double_field == x.m_double_field &&
           m_bool_field == x.m_bool_field &&
           m_string_field == x.m_string_field &&
           m_enum_field == x.m_enum_field &&
           m_enum2_field == x.m_enum2_field &&
           m_struct_field == x.m_struct_field &&
           m_char_opt_field == x.m_char_opt_field &&
           m_uint8_opt_field == x.m_uint8_opt_field &&
           m_int16_opt_field == x.m_int16_opt_field &&
           m_uint16_opt_field == x.m_uint16_opt_field &&
           m_int32_opt_field == x.m_int32_opt_field &&
           m_uint32_opt_field == x.m_uint32_opt_field &&
           m_int64_opt_field == x.m_int64_opt_field &&
           m_uint64_opt_field == x.m_uint64_opt_field &&
           m_float_opt_field == x.m_float_opt_field &&
           m_double_opt_field == x.m_double_opt_field &&
           m_bool_opt_field == x.m_bool_opt_field &&
           m_string_opt_field == x.m_string_opt_field &&
           m_enum_opt_field == x.m_enum_opt_field &&
           m_enum2_opt_field == x.m_enum2_opt_field &&
           m_struct_opt_field == x.m_struct_opt_field &&
           m_array_char_field == x.m_array_char_field &&
           m_array_uint8_field == x.m_array_uint8_field &&
           m_array_int16_field == x.m_array_int16_field &&
           m_array_uint16_field == x.m_array_uint16_field &&
           m_array_int32_field == x.m_array_int32_field &&
           m_array_uint32_field == x.m_array_uint32_field &&
           m_array_int64_field == x.m_array_int64_field &&
           m_array_uint64_field == x.m_array_uint64_field &&
           m_array_float_field == x.m_array_float_field &&
           m_array_double_field == x.m_array_double_field &&
           m_array_bool_field == x.m_array_bool_field &&
           m_array_enum_field == x.m_array_enum_field &&
           m_array_enum2_field == x.m_array_enum2_field &&
           m_array_struct_field == x.m_array_struct_field &&
           m_bounded_sequence_char_field == x.m_bounded_sequence_char_field &&
           m_bounded_sequence_uint8_field == x.m_bounded_sequence_uint8_field &&
           m_bounded_sequence_int16_field == x.m_bounded_sequence_int16_field &&
           m_bounded_sequence_uint16_field == x.m_bounded_sequence_uint16_field &&
           m_bounded_sequence_int32_field == x.m_bounded_sequence_int32_field &&
           m_bounded_sequence_uint32_field == x.m_bounded_sequence_uint32_field &&
           m_bounded_sequence_int64_field == x.m_bounded_sequence_int64_field &&
           m_bounded_sequence_uint64_field == x.m_bounded_sequence_uint64_field &&
           m_bounded_sequence_float_field == x.m_bounded_sequence_float_field &&
           m_bounded_sequence_double_field == x.m_bounded_sequence_double_field &&
           m_bounded_sequence_bool_field == x.m_bounded_sequence_bool_field &&
           m_bounded_sequence_enum_field == x.m_bounded_sequence_enum_field &&
           m_bounded_sequence_enum2_field == x.m_bounded_sequence_enum2_field &&
           m_bounded_sequence_struct_field == x.m_bounded_sequence_struct_field &&
           m_unbounded_sequence_char_field == x.m_unbounded_sequence_char_field &&
           m_unbounded_sequence_uint8_field == x.m_unbounded_sequence_uint8_field &&
           m_unbounded_sequence_int16_field == x.m_unbounded_sequence_int16_field &&
           m_unbounded_sequence_uint16_field == x.m_unbounded_sequence_uint16_field &&
           m_unbounded_sequence_int32_field == x.m_unbounded_sequence_int32_field &&
           m_unbounded_sequence_uint32_field == x.m_unbounded_sequence_uint32_field &&
           m_unbounded_sequence_int64_field == x.m_unbounded_sequence_int64_field &&
           m_unbounded_sequence_uint64_field == x.m_unbounded_sequence_uint64_field &&
           m_unbounded_sequence_float_field == x.m_unbounded_sequence_float_field &&
           m_unbounded_sequence_double_field == x.m_unbounded_sequence_double_field &&
           m_unbounded_sequence_bool_field == x.m_unbounded_sequence_bool_field &&
           m_unbounded_sequence_enum_field == x.m_unbounded_sequence_enum_field &&
           m_unbounded_sequence_enum2_field == x.m_unbounded_sequence_enum2_field &&
           m_unbounded_sequence_struct_field == x.m_unbounded_sequence_struct_field);
}

bool CompleteTestType::operator !=(
        const CompleteTestType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member char_field
 * @param _char_field New value for member char_field
 */
void CompleteTestType::char_field(
        char _char_field)
{
    m_char_field = _char_field;
}

/*!
 * @brief This function returns the value of member char_field
 * @return Value of member char_field
 */
char CompleteTestType::char_field() const
{
    return m_char_field;
}

/*!
 * @brief This function returns a reference to member char_field
 * @return Reference to member char_field
 */
char& CompleteTestType::char_field()
{
    return m_char_field;
}


/*!
 * @brief This function sets a value in member uint8_field
 * @param _uint8_field New value for member uint8_field
 */
void CompleteTestType::uint8_field(
        uint8_t _uint8_field)
{
    m_uint8_field = _uint8_field;
}

/*!
 * @brief This function returns the value of member uint8_field
 * @return Value of member uint8_field
 */
uint8_t CompleteTestType::uint8_field() const
{
    return m_uint8_field;
}

/*!
 * @brief This function returns a reference to member uint8_field
 * @return Reference to member uint8_field
 */
uint8_t& CompleteTestType::uint8_field()
{
    return m_uint8_field;
}


/*!
 * @brief This function sets a value in member int16_field
 * @param _int16_field New value for member int16_field
 */
void CompleteTestType::int16_field(
        int16_t _int16_field)
{
    m_int16_field = _int16_field;
}

/*!
 * @brief This function returns the value of member int16_field
 * @return Value of member int16_field
 */
int16_t CompleteTestType::int16_field() const
{
    return m_int16_field;
}

/*!
 * @brief This function returns a reference to member int16_field
 * @return Reference to member int16_field
 */
int16_t& CompleteTestType::int16_field()
{
    return m_int16_field;
}


/*!
 * @brief This function sets a value in member uint16_field
 * @param _uint16_field New value for member uint16_field
 */
void CompleteTestType::uint16_field(
        uint16_t _uint16_field)
{
    m_uint16_field = _uint16_field;
}

/*!
 * @brief This function returns the value of member uint16_field
 * @return Value of member uint16_field
 */
uint16_t CompleteTestType::uint16_field() const
{
    return m_uint16_field;
}

/*!
 * @brief This function returns a reference to member uint16_field
 * @return Reference to member uint16_field
 */
uint16_t& CompleteTestType::uint16_field()
{
    return m_uint16_field;
}


/*!
 * @brief This function sets a value in member int32_field
 * @param _int32_field New value for member int32_field
 */
void CompleteTestType::int32_field(
        int32_t _int32_field)
{
    m_int32_field = _int32_field;
}

/*!
 * @brief This function returns the value of member int32_field
 * @return Value of member int32_field
 */
int32_t CompleteTestType::int32_field() const
{
    return m_int32_field;
}

/*!
 * @brief This function returns a reference to member int32_field
 * @return Reference to member int32_field
 */
int32_t& CompleteTestType::int32_field()
{
    return m_int32_field;
}


/*!
 * @brief This function sets a value in member uint32_field
 * @param _uint32_field New value for member uint32_field
 */
void CompleteTestType::uint32_field(
        uint32_t _uint32_field)
{
    m_uint32_field = _uint32_field;
}

/*!
 * @brief This function returns the value of member uint32_field
 * @return Value of member uint32_field
 */
uint32_t CompleteTestType::uint32_field() const
{
    return m_uint32_field;
}

/*!
 * @brief This function returns a reference to member uint32_field
 * @return Reference to member uint32_field
 */
uint32_t& CompleteTestType::uint32_field()
{
    return m_uint32_field;
}


/*!
 * @brief This function sets a value in member int64_field
 * @param _int64_field New value for member int64_field
 */
void CompleteTestType::int64_field(
        int64_t _int64_field)
{
    m_int64_field = _int64_field;
}

/*!
 * @brief This function returns the value of member int64_field
 * @return Value of member int64_field
 */
int64_t CompleteTestType::int64_field() const
{
    return m_int64_field;
}

/*!
 * @brief This function returns a reference to member int64_field
 * @return Reference to member int64_field
 */
int64_t& CompleteTestType::int64_field()
{
    return m_int64_field;
}


/*!
 * @brief This function sets a value in member uint64_field
 * @param _uint64_field New value for member uint64_field
 */
void CompleteTestType::uint64_field(
        uint64_t _uint64_field)
{
    m_uint64_field = _uint64_field;
}

/*!
 * @brief This function returns the value of member uint64_field
 * @return Value of member uint64_field
 */
uint64_t CompleteTestType::uint64_field() const
{
    return m_uint64_field;
}

/*!
 * @brief This function returns a reference to member uint64_field
 * @return Reference to member uint64_field
 */
uint64_t& CompleteTestType::uint64_field()
{
    return m_uint64_field;
}


/*!
 * @brief This function sets a value in member float_field
 * @param _float_field New value for member float_field
 */
void CompleteTestType::float_field(
        float _float_field)
{
    m_float_field = _float_field;
}

/*!
 * @brief This function returns the value of member float_field
 * @return Value of member float_field
 */
float CompleteTestType::float_field() const
{
    return m_float_field;
}

/*!
 * @brief This function returns a reference to member float_field
 * @return Reference to member float_field
 */
float& CompleteTestType::float_field()
{
    return m_float_field;
}


/*!
 * @brief This function sets a value in member double_field
 * @param _double_field New value for member double_field
 */
void CompleteTestType::double_field(
        double _double_field)
{
    m_double_field = _double_field;
}

/*!
 * @brief This function returns the value of member double_field
 * @return Value of member double_field
 */
double CompleteTestType::double_field() const
{
    return m_double_field;
}

/*!
 * @brief This function returns a reference to member double_field
 * @return Reference to member double_field
 */
double& CompleteTestType::double_field()
{
    return m_double_field;
}


/*!
 * @brief This function sets a value in member bool_field
 * @param _bool_field New value for member bool_field
 */
void CompleteTestType::bool_field(
        bool _bool_field)
{
    m_bool_field = _bool_field;
}

/*!
 * @brief This function returns the value of member bool_field
 * @return Value of member bool_field
 */
bool CompleteTestType::bool_field() const
{
    return m_bool_field;
}

/*!
 * @brief This function returns a reference to member bool_field
 * @return Reference to member bool_field
 */
bool& CompleteTestType::bool_field()
{
    return m_bool_field;
}


/*!
 * @brief This function copies the value in member string_field
 * @param _string_field New value to be copied in member string_field
 */
void CompleteTestType::string_field(
        const std::string& _string_field)
{
    m_string_field = _string_field;
}

/*!
 * @brief This function moves the value in member string_field
 * @param _string_field New value to be moved in member string_field
 */
void CompleteTestType::string_field(
        std::string&& _string_field)
{
    m_string_field = std::move(_string_field);
}

/*!
 * @brief This function returns a constant reference to member string_field
 * @return Constant reference to member string_field
 */
const std::string& CompleteTestType::string_field() const
{
    return m_string_field;
}

/*!
 * @brief This function returns a reference to member string_field
 * @return Reference to member string_field
 */
std::string& CompleteTestType::string_field()
{
    return m_string_field;
}


/*!
 * @brief This function sets a value in member enum_field
 * @param _enum_field New value for member enum_field
 */
void CompleteTestType::enum_field(
        Color _enum_field)
{
    m_enum_field = _enum_field;
}

/*!
 * @brief This function returns the value of member enum_field
 * @return Value of member enum_field
 */
Color CompleteTestType::enum_field() const
{
    return m_enum_field;
}

/*!
 * @brief This function returns a reference to member enum_field
 * @return Reference to member enum_field
 */
Color& CompleteTestType::enum_field()
{
    return m_enum_field;
}


/*!
 * @brief This function sets a value in member enum2_field
 * @param _enum2_field New value for member enum2_field
 */
void CompleteTestType::enum2_field(
        Material _enum2_field)
{
    m_enum2_field = _enum2_field;
}

/*!
 * @brief This function returns the value of member enum2_field
 * @return Value of member enum2_field
 */
Material CompleteTestType::enum2_field() const
{
    return m_enum2_field;
}

/*!
 * @brief This function returns a reference to member enum2_field
 * @return Reference to member enum2_field
 */
Material& CompleteTestType::enum2_field()
{
    return m_enum2_field;
}


/*!
 * @brief This function copies the value in member struct_field
 * @param _struct_field New value to be copied in member struct_field
 */
void CompleteTestType::struct_field(
        const StructType& _struct_field)
{
    m_struct_field = _struct_field;
}

/*!
 * @brief This function moves the value in member struct_field
 * @param _struct_field New value to be moved in member struct_field
 */
void CompleteTestType::struct_field(
        StructType&& _struct_field)
{
    m_struct_field = std::move(_struct_field);
}

/*!
 * @brief This function returns a constant reference to member struct_field
 * @return Constant reference to member struct_field
 */
const StructType& CompleteTestType::struct_field() const
{
    return m_struct_field;
}

/*!
 * @brief This function returns a reference to member struct_field
 * @return Reference to member struct_field
 */
StructType& CompleteTestType::struct_field()
{
    return m_struct_field;
}


/*!
 * @brief This function copies the value in member char_opt_field
 * @param _char_opt_field New value to be copied in member char_opt_field
 */
void CompleteTestType::char_opt_field(
        const eprosima::fastcdr::optional<char>& _char_opt_field)
{
    m_char_opt_field = _char_opt_field;
}

/*!
 * @brief This function moves the value in member char_opt_field
 * @param _char_opt_field New value to be moved in member char_opt_field
 */
void CompleteTestType::char_opt_field(
        eprosima::fastcdr::optional<char>&& _char_opt_field)
{
    m_char_opt_field = std::move(_char_opt_field);
}

/*!
 * @brief This function returns a constant reference to member char_opt_field
 * @return Constant reference to member char_opt_field
 */
const eprosima::fastcdr::optional<char>& CompleteTestType::char_opt_field() const
{
    return m_char_opt_field;
}

/*!
 * @brief This function returns a reference to member char_opt_field
 * @return Reference to member char_opt_field
 */
eprosima::fastcdr::optional<char>& CompleteTestType::char_opt_field()
{
    return m_char_opt_field;
}


/*!
 * @brief This function copies the value in member uint8_opt_field
 * @param _uint8_opt_field New value to be copied in member uint8_opt_field
 */
void CompleteTestType::uint8_opt_field(
        const eprosima::fastcdr::optional<uint8_t>& _uint8_opt_field)
{
    m_uint8_opt_field = _uint8_opt_field;
}

/*!
 * @brief This function moves the value in member uint8_opt_field
 * @param _uint8_opt_field New value to be moved in member uint8_opt_field
 */
void CompleteTestType::uint8_opt_field(
        eprosima::fastcdr::optional<uint8_t>&& _uint8_opt_field)
{
    m_uint8_opt_field = std::move(_uint8_opt_field);
}

/*!
 * @brief This function returns a constant reference to member uint8_opt_field
 * @return Constant reference to member uint8_opt_field
 */
const eprosima::fastcdr::optional<uint8_t>& CompleteTestType::uint8_opt_field() const
{
    return m_uint8_opt_field;
}

/*!
 * @brief This function returns a reference to member uint8_opt_field
 * @return Reference to member uint8_opt_field
 */
eprosima::fastcdr::optional<uint8_t>& CompleteTestType::uint8_opt_field()
{
    return m_uint8_opt_field;
}


/*!
 * @brief This function copies the value in member int16_opt_field
 * @param _int16_opt_field New value to be copied in member int16_opt_field
 */
void CompleteTestType::int16_opt_field(
        const eprosima::fastcdr::optional<int16_t>& _int16_opt_field)
{
    m_int16_opt_field = _int16_opt_field;
}

/*!
 * @brief This function moves the value in member int16_opt_field
 * @param _int16_opt_field New value to be moved in member int16_opt_field
 */
void CompleteTestType::int16_opt_field(
        eprosima::fastcdr::optional<int16_t>&& _int16_opt_field)
{
    m_int16_opt_field = std::move(_int16_opt_field);
}

/*!
 * @brief This function returns a constant reference to member int16_opt_field
 * @return Constant reference to member int16_opt_field
 */
const eprosima::fastcdr::optional<int16_t>& CompleteTestType::int16_opt_field() const
{
    return m_int16_opt_field;
}

/*!
 * @brief This function returns a reference to member int16_opt_field
 * @return Reference to member int16_opt_field
 */
eprosima::fastcdr::optional<int16_t>& CompleteTestType::int16_opt_field()
{
    return m_int16_opt_field;
}


/*!
 * @brief This function copies the value in member uint16_opt_field
 * @param _uint16_opt_field New value to be copied in member uint16_opt_field
 */
void CompleteTestType::uint16_opt_field(
        const eprosima::fastcdr::optional<uint16_t>& _uint16_opt_field)
{
    m_uint16_opt_field = _uint16_opt_field;
}

/*!
 * @brief This function moves the value in member uint16_opt_field
 * @param _uint16_opt_field New value to be moved in member uint16_opt_field
 */
void CompleteTestType::uint16_opt_field(
        eprosima::fastcdr::optional<uint16_t>&& _uint16_opt_field)
{
    m_uint16_opt_field = std::move(_uint16_opt_field);
}

/*!
 * @brief This function returns a constant reference to member uint16_opt_field
 * @return Constant reference to member uint16_opt_field
 */
const eprosima::fastcdr::optional<uint16_t>& CompleteTestType::uint16_opt_field() const
{
    return m_uint16_opt_field;
}

/*!
 * @brief This function returns a reference to member uint16_opt_field
 * @return Reference to member uint16_opt_field
 */
eprosima::fastcdr::optional<uint16_t>& CompleteTestType::uint16_opt_field()
{
    return m_uint16_opt_field;
}


/*!
 * @brief This function copies the value in member int32_opt_field
 * @param _int32_opt_field New value to be copied in member int32_opt_field
 */
void CompleteTestType::int32_opt_field(
        const eprosima::fastcdr::optional<int32_t>& _int32_opt_field)
{
    m_int32_opt_field = _int32_opt_field;
}

/*!
 * @brief This function moves the value in member int32_opt_field
 * @param _int32_opt_field New value to be moved in member int32_opt_field
 */
void CompleteTestType::int32_opt_field(
        eprosima::fastcdr::optional<int32_t>&& _int32_opt_field)
{
    m_int32_opt_field = std::move(_int32_opt_field);
}

/*!
 * @brief This function returns a constant reference to member int32_opt_field
 * @return Constant reference to member int32_opt_field
 */
const eprosima::fastcdr::optional<int32_t>& CompleteTestType::int32_opt_field() const
{
    return m_int32_opt_field;
}

/*!
 * @brief This function returns a reference to member int32_opt_field
 * @return Reference to member int32_opt_field
 */
eprosima::fastcdr::optional<int32_t>& CompleteTestType::int32_opt_field()
{
    return m_int32_opt_field;
}


/*!
 * @brief This function copies the value in member uint32_opt_field
 * @param _uint32_opt_field New value to be copied in member uint32_opt_field
 */
void CompleteTestType::uint32_opt_field(
        const eprosima::fastcdr::optional<uint32_t>& _uint32_opt_field)
{
    m_uint32_opt_field = _uint32_opt_field;
}

/*!
 * @brief This function moves the value in member uint32_opt_field
 * @param _uint32_opt_field New value to be moved in member uint32_opt_field
 */
void CompleteTestType::uint32_opt_field(
        eprosima::fastcdr::optional<uint32_t>&& _uint32_opt_field)
{
    m_uint32_opt_field = std::move(_uint32_opt_field);
}

/*!
 * @brief This function returns a constant reference to member uint32_opt_field
 * @return Constant reference to member uint32_opt_field
 */
const eprosima::fastcdr::optional<uint32_t>& CompleteTestType::uint32_opt_field() const
{
    return m_uint32_opt_field;
}

/*!
 * @brief This function returns a reference to member uint32_opt_field
 * @return Reference to member uint32_opt_field
 */
eprosima::fastcdr::optional<uint32_t>& CompleteTestType::uint32_opt_field()
{
    return m_uint32_opt_field;
}


/*!
 * @brief This function copies the value in member int64_opt_field
 * @param _int64_opt_field New value to be copied in member int64_opt_field
 */
void CompleteTestType::int64_opt_field(
        const eprosima::fastcdr::optional<int64_t>& _int64_opt_field)
{
    m_int64_opt_field = _int64_opt_field;
}

/*!
 * @brief This function moves the value in member int64_opt_field
 * @param _int64_opt_field New value to be moved in member int64_opt_field
 */
void CompleteTestType::int64_opt_field(
        eprosima::fastcdr::optional<int64_t>&& _int64_opt_field)
{
    m_int64_opt_field = std::move(_int64_opt_field);
}

/*!
 * @brief This function returns a constant reference to member int64_opt_field
 * @return Constant reference to member int64_opt_field
 */
const eprosima::fastcdr::optional<int64_t>& CompleteTestType::int64_opt_field() const
{
    return m_int64_opt_field;
}

/*!
 * @brief This function returns a reference to member int64_opt_field
 * @return Reference to member int64_opt_field
 */
eprosima::fastcdr::optional<int64_t>& CompleteTestType::int64_opt_field()
{
    return m_int64_opt_field;
}


/*!
 * @brief This function copies the value in member uint64_opt_field
 * @param _uint64_opt_field New value to be copied in member uint64_opt_field
 */
void CompleteTestType::uint64_opt_field(
        const eprosima::fastcdr::optional<uint64_t>& _uint64_opt_field)
{
    m_uint64_opt_field = _uint64_opt_field;
}

/*!
 * @brief This function moves the value in member uint64_opt_field
 * @param _uint64_opt_field New value to be moved in member uint64_opt_field
 */
void CompleteTestType::uint64_opt_field(
        eprosima::fastcdr::optional<uint64_t>&& _uint64_opt_field)
{
    m_uint64_opt_field = std::move(_uint64_opt_field);
}

/*!
 * @brief This function returns a constant reference to member uint64_opt_field
 * @return Constant reference to member uint64_opt_field
 */
const eprosima::fastcdr::optional<uint64_t>& CompleteTestType::uint64_opt_field() const
{
    return m_uint64_opt_field;
}

/*!
 * @brief This function returns a reference to member uint64_opt_field
 * @return Reference to member uint64_opt_field
 */
eprosima::fastcdr::optional<uint64_t>& CompleteTestType::uint64_opt_field()
{
    return m_uint64_opt_field;
}


/*!
 * @brief This function copies the value in member float_opt_field
 * @param _float_opt_field New value to be copied in member float_opt_field
 */
void CompleteTestType::float_opt_field(
        const eprosima::fastcdr::optional<float>& _float_opt_field)
{
    m_float_opt_field = _float_opt_field;
}

/*!
 * @brief This function moves the value in member float_opt_field
 * @param _float_opt_field New value to be moved in member float_opt_field
 */
void CompleteTestType::float_opt_field(
        eprosima::fastcdr::optional<float>&& _float_opt_field)
{
    m_float_opt_field = std::move(_float_opt_field);
}

/*!
 * @brief This function returns a constant reference to member float_opt_field
 * @return Constant reference to member float_opt_field
 */
const eprosima::fastcdr::optional<float>& CompleteTestType::float_opt_field() const
{
    return m_float_opt_field;
}

/*!
 * @brief This function returns a reference to member float_opt_field
 * @return Reference to member float_opt_field
 */
eprosima::fastcdr::optional<float>& CompleteTestType::float_opt_field()
{
    return m_float_opt_field;
}


/*!
 * @brief This function copies the value in member double_opt_field
 * @param _double_opt_field New value to be copied in member double_opt_field
 */
void CompleteTestType::double_opt_field(
        const eprosima::fastcdr::optional<double>& _double_opt_field)
{
    m_double_opt_field = _double_opt_field;
}

/*!
 * @brief This function moves the value in member double_opt_field
 * @param _double_opt_field New value to be moved in member double_opt_field
 */
void CompleteTestType::double_opt_field(
        eprosima::fastcdr::optional<double>&& _double_opt_field)
{
    m_double_opt_field = std::move(_double_opt_field);
}

/*!
 * @brief This function returns a constant reference to member double_opt_field
 * @return Constant reference to member double_opt_field
 */
const eprosima::fastcdr::optional<double>& CompleteTestType::double_opt_field() const
{
    return m_double_opt_field;
}

/*!
 * @brief This function returns a reference to member double_opt_field
 * @return Reference to member double_opt_field
 */
eprosima::fastcdr::optional<double>& CompleteTestType::double_opt_field()
{
    return m_double_opt_field;
}


/*!
 * @brief This function copies the value in member bool_opt_field
 * @param _bool_opt_field New value to be copied in member bool_opt_field
 */
void CompleteTestType::bool_opt_field(
        const eprosima::fastcdr::optional<bool>& _bool_opt_field)
{
    m_bool_opt_field = _bool_opt_field;
}

/*!
 * @brief This function moves the value in member bool_opt_field
 * @param _bool_opt_field New value to be moved in member bool_opt_field
 */
void CompleteTestType::bool_opt_field(
        eprosima::fastcdr::optional<bool>&& _bool_opt_field)
{
    m_bool_opt_field = std::move(_bool_opt_field);
}

/*!
 * @brief This function returns a constant reference to member bool_opt_field
 * @return Constant reference to member bool_opt_field
 */
const eprosima::fastcdr::optional<bool>& CompleteTestType::bool_opt_field() const
{
    return m_bool_opt_field;
}

/*!
 * @brief This function returns a reference to member bool_opt_field
 * @return Reference to member bool_opt_field
 */
eprosima::fastcdr::optional<bool>& CompleteTestType::bool_opt_field()
{
    return m_bool_opt_field;
}


/*!
 * @brief This function copies the value in member string_opt_field
 * @param _string_opt_field New value to be copied in member string_opt_field
 */
void CompleteTestType::string_opt_field(
        const eprosima::fastcdr::optional<std::string>& _string_opt_field)
{
    m_string_opt_field = _string_opt_field;
}

/*!
 * @brief This function moves the value in member string_opt_field
 * @param _string_opt_field New value to be moved in member string_opt_field
 */
void CompleteTestType::string_opt_field(
        eprosima::fastcdr::optional<std::string>&& _string_opt_field)
{
    m_string_opt_field = std::move(_string_opt_field);
}

/*!
 * @brief This function returns a constant reference to member string_opt_field
 * @return Constant reference to member string_opt_field
 */
const eprosima::fastcdr::optional<std::string>& CompleteTestType::string_opt_field() const
{
    return m_string_opt_field;
}

/*!
 * @brief This function returns a reference to member string_opt_field
 * @return Reference to member string_opt_field
 */
eprosima::fastcdr::optional<std::string>& CompleteTestType::string_opt_field()
{
    return m_string_opt_field;
}


/*!
 * @brief This function copies the value in member enum_opt_field
 * @param _enum_opt_field New value to be copied in member enum_opt_field
 */
void CompleteTestType::enum_opt_field(
        const eprosima::fastcdr::optional<Color>& _enum_opt_field)
{
    m_enum_opt_field = _enum_opt_field;
}

/*!
 * @brief This function moves the value in member enum_opt_field
 * @param _enum_opt_field New value to be moved in member enum_opt_field
 */
void CompleteTestType::enum_opt_field(
        eprosima::fastcdr::optional<Color>&& _enum_opt_field)
{
    m_enum_opt_field = std::move(_enum_opt_field);
}

/*!
 * @brief This function returns a constant reference to member enum_opt_field
 * @return Constant reference to member enum_opt_field
 */
const eprosima::fastcdr::optional<Color>& CompleteTestType::enum_opt_field() const
{
    return m_enum_opt_field;
}

/*!
 * @brief This function returns a reference to member enum_opt_field
 * @return Reference to member enum_opt_field
 */
eprosima::fastcdr::optional<Color>& CompleteTestType::enum_opt_field()
{
    return m_enum_opt_field;
}


/*!
 * @brief This function copies the value in member enum2_opt_field
 * @param _enum2_opt_field New value to be copied in member enum2_opt_field
 */
void CompleteTestType::enum2_opt_field(
        const eprosima::fastcdr::optional<Material>& _enum2_opt_field)
{
    m_enum2_opt_field = _enum2_opt_field;
}

/*!
 * @brief This function moves the value in member enum2_opt_field
 * @param _enum2_opt_field New value to be moved in member enum2_opt_field
 */
void CompleteTestType::enum2_opt_field(
        eprosima::fastcdr::optional<Material>&& _enum2_opt_field)
{
    m_enum2_opt_field = std::move(_enum2_opt_field);
}

/*!
 * @brief This function returns a constant reference to member enum2_opt_field
 * @return Constant reference to member enum2_opt_field
 */
const eprosima::fastcdr::optional<Material>& CompleteTestType::enum2_opt_field() const
{
    return m_enum2_opt_field;
}

/*!
 * @brief This function returns a reference to member enum2_opt_field
 * @return Reference to member enum2_opt_field
 */
eprosima::fastcdr::optional<Material>& CompleteTestType::enum2_opt_field()
{
    return m_enum2_opt_field;
}


/*!
 * @brief This function copies the value in member struct_opt_field
 * @param _struct_opt_field New value to be copied in member struct_opt_field
 */
void CompleteTestType::struct_opt_field(
        const eprosima::fastcdr::optional<StructType>& _struct_opt_field)
{
    m_struct_opt_field = _struct_opt_field;
}

/*!
 * @brief This function moves the value in member struct_opt_field
 * @param _struct_opt_field New value to be moved in member struct_opt_field
 */
void CompleteTestType::struct_opt_field(
        eprosima::fastcdr::optional<StructType>&& _struct_opt_field)
{
    m_struct_opt_field = std::move(_struct_opt_field);
}

/*!
 * @brief This function returns a constant reference to member struct_opt_field
 * @return Constant reference to member struct_opt_field
 */
const eprosima::fastcdr::optional<StructType>& CompleteTestType::struct_opt_field() const
{
    return m_struct_opt_field;
}

/*!
 * @brief This function returns a reference to member struct_opt_field
 * @return Reference to member struct_opt_field
 */
eprosima::fastcdr::optional<StructType>& CompleteTestType::struct_opt_field()
{
    return m_struct_opt_field;
}


/*!
 * @brief This function copies the value in member array_char_field
 * @param _array_char_field New value to be copied in member array_char_field
 */
void CompleteTestType::array_char_field(
        const std::array<char, max_array_size>& _array_char_field)
{
    m_array_char_field = _array_char_field;
}

/*!
 * @brief This function moves the value in member array_char_field
 * @param _array_char_field New value to be moved in member array_char_field
 */
void CompleteTestType::array_char_field(
        std::array<char, max_array_size>&& _array_char_field)
{
    m_array_char_field = std::move(_array_char_field);
}

/*!
 * @brief This function returns a constant reference to member array_char_field
 * @return Constant reference to member array_char_field
 */
const std::array<char, max_array_size>& CompleteTestType::array_char_field() const
{
    return m_array_char_field;
}

/*!
 * @brief This function returns a reference to member array_char_field
 * @return Reference to member array_char_field
 */
std::array<char, max_array_size>& CompleteTestType::array_char_field()
{
    return m_array_char_field;
}


/*!
 * @brief This function copies the value in member array_uint8_field
 * @param _array_uint8_field New value to be copied in member array_uint8_field
 */
void CompleteTestType::array_uint8_field(
        const std::array<uint8_t, max_array_size>& _array_uint8_field)
{
    m_array_uint8_field = _array_uint8_field;
}

/*!
 * @brief This function moves the value in member array_uint8_field
 * @param _array_uint8_field New value to be moved in member array_uint8_field
 */
void CompleteTestType::array_uint8_field(
        std::array<uint8_t, max_array_size>&& _array_uint8_field)
{
    m_array_uint8_field = std::move(_array_uint8_field);
}

/*!
 * @brief This function returns a constant reference to member array_uint8_field
 * @return Constant reference to member array_uint8_field
 */
const std::array<uint8_t, max_array_size>& CompleteTestType::array_uint8_field() const
{
    return m_array_uint8_field;
}

/*!
 * @brief This function returns a reference to member array_uint8_field
 * @return Reference to member array_uint8_field
 */
std::array<uint8_t, max_array_size>& CompleteTestType::array_uint8_field()
{
    return m_array_uint8_field;
}


/*!
 * @brief This function copies the value in member array_int16_field
 * @param _array_int16_field New value to be copied in member array_int16_field
 */
void CompleteTestType::array_int16_field(
        const std::array<int16_t, max_array_size>& _array_int16_field)
{
    m_array_int16_field = _array_int16_field;
}

/*!
 * @brief This function moves the value in member array_int16_field
 * @param _array_int16_field New value to be moved in member array_int16_field
 */
void CompleteTestType::array_int16_field(
        std::array<int16_t, max_array_size>&& _array_int16_field)
{
    m_array_int16_field = std::move(_array_int16_field);
}

/*!
 * @brief This function returns a constant reference to member array_int16_field
 * @return Constant reference to member array_int16_field
 */
const std::array<int16_t, max_array_size>& CompleteTestType::array_int16_field() const
{
    return m_array_int16_field;
}

/*!
 * @brief This function returns a reference to member array_int16_field
 * @return Reference to member array_int16_field
 */
std::array<int16_t, max_array_size>& CompleteTestType::array_int16_field()
{
    return m_array_int16_field;
}


/*!
 * @brief This function copies the value in member array_uint16_field
 * @param _array_uint16_field New value to be copied in member array_uint16_field
 */
void CompleteTestType::array_uint16_field(
        const std::array<uint16_t, max_array_size>& _array_uint16_field)
{
    m_array_uint16_field = _array_uint16_field;
}

/*!
 * @brief This function moves the value in member array_uint16_field
 * @param _array_uint16_field New value to be moved in member array_uint16_field
 */
void CompleteTestType::array_uint16_field(
        std::array<uint16_t, max_array_size>&& _array_uint16_field)
{
    m_array_uint16_field = std::move(_array_uint16_field);
}

/*!
 * @brief This function returns a constant reference to member array_uint16_field
 * @return Constant reference to member array_uint16_field
 */
const std::array<uint16_t, max_array_size>& CompleteTestType::array_uint16_field() const
{
    return m_array_uint16_field;
}

/*!
 * @brief This function returns a reference to member array_uint16_field
 * @return Reference to member array_uint16_field
 */
std::array<uint16_t, max_array_size>& CompleteTestType::array_uint16_field()
{
    return m_array_uint16_field;
}


/*!
 * @brief This function copies the value in member array_int32_field
 * @param _array_int32_field New value to be copied in member array_int32_field
 */
void CompleteTestType::array_int32_field(
        const std::array<int32_t, max_array_size>& _array_int32_field)
{
    m_array_int32_field = _array_int32_field;
}

/*!
 * @brief This function moves the value in member array_int32_field
 * @param _array_int32_field New value to be moved in member array_int32_field
 */
void CompleteTestType::array_int32_field(
        std::array<int32_t, max_array_size>&& _array_int32_field)
{
    m_array_int32_field = std::move(_array_int32_field);
}

/*!
 * @brief This function returns a constant reference to member array_int32_field
 * @return Constant reference to member array_int32_field
 */
const std::array<int32_t, max_array_size>& CompleteTestType::array_int32_field() const
{
    return m_array_int32_field;
}

/*!
 * @brief This function returns a reference to member array_int32_field
 * @return Reference to member array_int32_field
 */
std::array<int32_t, max_array_size>& CompleteTestType::array_int32_field()
{
    return m_array_int32_field;
}


/*!
 * @brief This function copies the value in member array_uint32_field
 * @param _array_uint32_field New value to be copied in member array_uint32_field
 */
void CompleteTestType::array_uint32_field(
        const std::array<uint32_t, max_array_size>& _array_uint32_field)
{
    m_array_uint32_field = _array_uint32_field;
}

/*!
 * @brief This function moves the value in member array_uint32_field
 * @param _array_uint32_field New value to be moved in member array_uint32_field
 */
void CompleteTestType::array_uint32_field(
        std::array<uint32_t, max_array_size>&& _array_uint32_field)
{
    m_array_uint32_field = std::move(_array_uint32_field);
}

/*!
 * @brief This function returns a constant reference to member array_uint32_field
 * @return Constant reference to member array_uint32_field
 */
const std::array<uint32_t, max_array_size>& CompleteTestType::array_uint32_field() const
{
    return m_array_uint32_field;
}

/*!
 * @brief This function returns a reference to member array_uint32_field
 * @return Reference to member array_uint32_field
 */
std::array<uint32_t, max_array_size>& CompleteTestType::array_uint32_field()
{
    return m_array_uint32_field;
}


/*!
 * @brief This function copies the value in member array_int64_field
 * @param _array_int64_field New value to be copied in member array_int64_field
 */
void CompleteTestType::array_int64_field(
        const std::array<int64_t, max_array_size>& _array_int64_field)
{
    m_array_int64_field = _array_int64_field;
}

/*!
 * @brief This function moves the value in member array_int64_field
 * @param _array_int64_field New value to be moved in member array_int64_field
 */
void CompleteTestType::array_int64_field(
        std::array<int64_t, max_array_size>&& _array_int64_field)
{
    m_array_int64_field = std::move(_array_int64_field);
}

/*!
 * @brief This function returns a constant reference to member array_int64_field
 * @return Constant reference to member array_int64_field
 */
const std::array<int64_t, max_array_size>& CompleteTestType::array_int64_field() const
{
    return m_array_int64_field;
}

/*!
 * @brief This function returns a reference to member array_int64_field
 * @return Reference to member array_int64_field
 */
std::array<int64_t, max_array_size>& CompleteTestType::array_int64_field()
{
    return m_array_int64_field;
}


/*!
 * @brief This function copies the value in member array_uint64_field
 * @param _array_uint64_field New value to be copied in member array_uint64_field
 */
void CompleteTestType::array_uint64_field(
        const std::array<uint64_t, max_array_size>& _array_uint64_field)
{
    m_array_uint64_field = _array_uint64_field;
}

/*!
 * @brief This function moves the value in member array_uint64_field
 * @param _array_uint64_field New value to be moved in member array_uint64_field
 */
void CompleteTestType::array_uint64_field(
        std::array<uint64_t, max_array_size>&& _array_uint64_field)
{
    m_array_uint64_field = std::move(_array_uint64_field);
}

/*!
 * @brief This function returns a constant reference to member array_uint64_field
 * @return Constant reference to member array_uint64_field
 */
const std::array<uint64_t, max_array_size>& CompleteTestType::array_uint64_field() const
{
    return m_array_uint64_field;
}

/*!
 * @brief This function returns a reference to member array_uint64_field
 * @return Reference to member array_uint64_field
 */
std::array<uint64_t, max_array_size>& CompleteTestType::array_uint64_field()
{
    return m_array_uint64_field;
}


/*!
 * @brief This function copies the value in member array_float_field
 * @param _array_float_field New value to be copied in member array_float_field
 */
void CompleteTestType::array_float_field(
        const std::array<float, max_array_size>& _array_float_field)
{
    m_array_float_field = _array_float_field;
}

/*!
 * @brief This function moves the value in member array_float_field
 * @param _array_float_field New value to be moved in member array_float_field
 */
void CompleteTestType::array_float_field(
        std::array<float, max_array_size>&& _array_float_field)
{
    m_array_float_field = std::move(_array_float_field);
}

/*!
 * @brief This function returns a constant reference to member array_float_field
 * @return Constant reference to member array_float_field
 */
const std::array<float, max_array_size>& CompleteTestType::array_float_field() const
{
    return m_array_float_field;
}

/*!
 * @brief This function returns a reference to member array_float_field
 * @return Reference to member array_float_field
 */
std::array<float, max_array_size>& CompleteTestType::array_float_field()
{
    return m_array_float_field;
}


/*!
 * @brief This function copies the value in member array_double_field
 * @param _array_double_field New value to be copied in member array_double_field
 */
void CompleteTestType::array_double_field(
        const std::array<double, max_array_size>& _array_double_field)
{
    m_array_double_field = _array_double_field;
}

/*!
 * @brief This function moves the value in member array_double_field
 * @param _array_double_field New value to be moved in member array_double_field
 */
void CompleteTestType::array_double_field(
        std::array<double, max_array_size>&& _array_double_field)
{
    m_array_double_field = std::move(_array_double_field);
}

/*!
 * @brief This function returns a constant reference to member array_double_field
 * @return Constant reference to member array_double_field
 */
const std::array<double, max_array_size>& CompleteTestType::array_double_field() const
{
    return m_array_double_field;
}

/*!
 * @brief This function returns a reference to member array_double_field
 * @return Reference to member array_double_field
 */
std::array<double, max_array_size>& CompleteTestType::array_double_field()
{
    return m_array_double_field;
}


/*!
 * @brief This function copies the value in member array_bool_field
 * @param _array_bool_field New value to be copied in member array_bool_field
 */
void CompleteTestType::array_bool_field(
        const std::array<bool, max_array_size>& _array_bool_field)
{
    m_array_bool_field = _array_bool_field;
}

/*!
 * @brief This function moves the value in member array_bool_field
 * @param _array_bool_field New value to be moved in member array_bool_field
 */
void CompleteTestType::array_bool_field(
        std::array<bool, max_array_size>&& _array_bool_field)
{
    m_array_bool_field = std::move(_array_bool_field);
}

/*!
 * @brief This function returns a constant reference to member array_bool_field
 * @return Constant reference to member array_bool_field
 */
const std::array<bool, max_array_size>& CompleteTestType::array_bool_field() const
{
    return m_array_bool_field;
}

/*!
 * @brief This function returns a reference to member array_bool_field
 * @return Reference to member array_bool_field
 */
std::array<bool, max_array_size>& CompleteTestType::array_bool_field()
{
    return m_array_bool_field;
}


/*!
 * @brief This function copies the value in member array_enum_field
 * @param _array_enum_field New value to be copied in member array_enum_field
 */
void CompleteTestType::array_enum_field(
        const std::array<Color, max_array_size>& _array_enum_field)
{
    m_array_enum_field = _array_enum_field;
}

/*!
 * @brief This function moves the value in member array_enum_field
 * @param _array_enum_field New value to be moved in member array_enum_field
 */
void CompleteTestType::array_enum_field(
        std::array<Color, max_array_size>&& _array_enum_field)
{
    m_array_enum_field = std::move(_array_enum_field);
}

/*!
 * @brief This function returns a constant reference to member array_enum_field
 * @return Constant reference to member array_enum_field
 */
const std::array<Color, max_array_size>& CompleteTestType::array_enum_field() const
{
    return m_array_enum_field;
}

/*!
 * @brief This function returns a reference to member array_enum_field
 * @return Reference to member array_enum_field
 */
std::array<Color, max_array_size>& CompleteTestType::array_enum_field()
{
    return m_array_enum_field;
}


/*!
 * @brief This function copies the value in member array_enum2_field
 * @param _array_enum2_field New value to be copied in member array_enum2_field
 */
void CompleteTestType::array_enum2_field(
        const std::array<Material, max_array_size>& _array_enum2_field)
{
    m_array_enum2_field = _array_enum2_field;
}

/*!
 * @brief This function moves the value in member array_enum2_field
 * @param _array_enum2_field New value to be moved in member array_enum2_field
 */
void CompleteTestType::array_enum2_field(
        std::array<Material, max_array_size>&& _array_enum2_field)
{
    m_array_enum2_field = std::move(_array_enum2_field);
}

/*!
 * @brief This function returns a constant reference to member array_enum2_field
 * @return Constant reference to member array_enum2_field
 */
const std::array<Material, max_array_size>& CompleteTestType::array_enum2_field() const
{
    return m_array_enum2_field;
}

/*!
 * @brief This function returns a reference to member array_enum2_field
 * @return Reference to member array_enum2_field
 */
std::array<Material, max_array_size>& CompleteTestType::array_enum2_field()
{
    return m_array_enum2_field;
}


/*!
 * @brief This function copies the value in member array_struct_field
 * @param _array_struct_field New value to be copied in member array_struct_field
 */
void CompleteTestType::array_struct_field(
        const std::array<StructType, max_array_size>& _array_struct_field)
{
    m_array_struct_field = _array_struct_field;
}

/*!
 * @brief This function moves the value in member array_struct_field
 * @param _array_struct_field New value to be moved in member array_struct_field
 */
void CompleteTestType::array_struct_field(
        std::array<StructType, max_array_size>&& _array_struct_field)
{
    m_array_struct_field = std::move(_array_struct_field);
}

/*!
 * @brief This function returns a constant reference to member array_struct_field
 * @return Constant reference to member array_struct_field
 */
const std::array<StructType, max_array_size>& CompleteTestType::array_struct_field() const
{
    return m_array_struct_field;
}

/*!
 * @brief This function returns a reference to member array_struct_field
 * @return Reference to member array_struct_field
 */
std::array<StructType, max_array_size>& CompleteTestType::array_struct_field()
{
    return m_array_struct_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_char_field
 * @param _bounded_sequence_char_field New value to be copied in member bounded_sequence_char_field
 */
void CompleteTestType::bounded_sequence_char_field(
        const std::vector<char>& _bounded_sequence_char_field)
{
    m_bounded_sequence_char_field = _bounded_sequence_char_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_char_field
 * @param _bounded_sequence_char_field New value to be moved in member bounded_sequence_char_field
 */
void CompleteTestType::bounded_sequence_char_field(
        std::vector<char>&& _bounded_sequence_char_field)
{
    m_bounded_sequence_char_field = std::move(_bounded_sequence_char_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_char_field
 * @return Constant reference to member bounded_sequence_char_field
 */
const std::vector<char>& CompleteTestType::bounded_sequence_char_field() const
{
    return m_bounded_sequence_char_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_char_field
 * @return Reference to member bounded_sequence_char_field
 */
std::vector<char>& CompleteTestType::bounded_sequence_char_field()
{
    return m_bounded_sequence_char_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_uint8_field
 * @param _bounded_sequence_uint8_field New value to be copied in member bounded_sequence_uint8_field
 */
void CompleteTestType::bounded_sequence_uint8_field(
        const std::vector<uint8_t>& _bounded_sequence_uint8_field)
{
    m_bounded_sequence_uint8_field = _bounded_sequence_uint8_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_uint8_field
 * @param _bounded_sequence_uint8_field New value to be moved in member bounded_sequence_uint8_field
 */
void CompleteTestType::bounded_sequence_uint8_field(
        std::vector<uint8_t>&& _bounded_sequence_uint8_field)
{
    m_bounded_sequence_uint8_field = std::move(_bounded_sequence_uint8_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_uint8_field
 * @return Constant reference to member bounded_sequence_uint8_field
 */
const std::vector<uint8_t>& CompleteTestType::bounded_sequence_uint8_field() const
{
    return m_bounded_sequence_uint8_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_uint8_field
 * @return Reference to member bounded_sequence_uint8_field
 */
std::vector<uint8_t>& CompleteTestType::bounded_sequence_uint8_field()
{
    return m_bounded_sequence_uint8_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_int16_field
 * @param _bounded_sequence_int16_field New value to be copied in member bounded_sequence_int16_field
 */
void CompleteTestType::bounded_sequence_int16_field(
        const std::vector<int16_t>& _bounded_sequence_int16_field)
{
    m_bounded_sequence_int16_field = _bounded_sequence_int16_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_int16_field
 * @param _bounded_sequence_int16_field New value to be moved in member bounded_sequence_int16_field
 */
void CompleteTestType::bounded_sequence_int16_field(
        std::vector<int16_t>&& _bounded_sequence_int16_field)
{
    m_bounded_sequence_int16_field = std::move(_bounded_sequence_int16_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_int16_field
 * @return Constant reference to member bounded_sequence_int16_field
 */
const std::vector<int16_t>& CompleteTestType::bounded_sequence_int16_field() const
{
    return m_bounded_sequence_int16_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_int16_field
 * @return Reference to member bounded_sequence_int16_field
 */
std::vector<int16_t>& CompleteTestType::bounded_sequence_int16_field()
{
    return m_bounded_sequence_int16_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_uint16_field
 * @param _bounded_sequence_uint16_field New value to be copied in member bounded_sequence_uint16_field
 */
void CompleteTestType::bounded_sequence_uint16_field(
        const std::vector<uint16_t>& _bounded_sequence_uint16_field)
{
    m_bounded_sequence_uint16_field = _bounded_sequence_uint16_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_uint16_field
 * @param _bounded_sequence_uint16_field New value to be moved in member bounded_sequence_uint16_field
 */
void CompleteTestType::bounded_sequence_uint16_field(
        std::vector<uint16_t>&& _bounded_sequence_uint16_field)
{
    m_bounded_sequence_uint16_field = std::move(_bounded_sequence_uint16_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_uint16_field
 * @return Constant reference to member bounded_sequence_uint16_field
 */
const std::vector<uint16_t>& CompleteTestType::bounded_sequence_uint16_field() const
{
    return m_bounded_sequence_uint16_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_uint16_field
 * @return Reference to member bounded_sequence_uint16_field
 */
std::vector<uint16_t>& CompleteTestType::bounded_sequence_uint16_field()
{
    return m_bounded_sequence_uint16_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_int32_field
 * @param _bounded_sequence_int32_field New value to be copied in member bounded_sequence_int32_field
 */
void CompleteTestType::bounded_sequence_int32_field(
        const std::vector<int32_t>& _bounded_sequence_int32_field)
{
    m_bounded_sequence_int32_field = _bounded_sequence_int32_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_int32_field
 * @param _bounded_sequence_int32_field New value to be moved in member bounded_sequence_int32_field
 */
void CompleteTestType::bounded_sequence_int32_field(
        std::vector<int32_t>&& _bounded_sequence_int32_field)
{
    m_bounded_sequence_int32_field = std::move(_bounded_sequence_int32_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_int32_field
 * @return Constant reference to member bounded_sequence_int32_field
 */
const std::vector<int32_t>& CompleteTestType::bounded_sequence_int32_field() const
{
    return m_bounded_sequence_int32_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_int32_field
 * @return Reference to member bounded_sequence_int32_field
 */
std::vector<int32_t>& CompleteTestType::bounded_sequence_int32_field()
{
    return m_bounded_sequence_int32_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_uint32_field
 * @param _bounded_sequence_uint32_field New value to be copied in member bounded_sequence_uint32_field
 */
void CompleteTestType::bounded_sequence_uint32_field(
        const std::vector<uint32_t>& _bounded_sequence_uint32_field)
{
    m_bounded_sequence_uint32_field = _bounded_sequence_uint32_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_uint32_field
 * @param _bounded_sequence_uint32_field New value to be moved in member bounded_sequence_uint32_field
 */
void CompleteTestType::bounded_sequence_uint32_field(
        std::vector<uint32_t>&& _bounded_sequence_uint32_field)
{
    m_bounded_sequence_uint32_field = std::move(_bounded_sequence_uint32_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_uint32_field
 * @return Constant reference to member bounded_sequence_uint32_field
 */
const std::vector<uint32_t>& CompleteTestType::bounded_sequence_uint32_field() const
{
    return m_bounded_sequence_uint32_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_uint32_field
 * @return Reference to member bounded_sequence_uint32_field
 */
std::vector<uint32_t>& CompleteTestType::bounded_sequence_uint32_field()
{
    return m_bounded_sequence_uint32_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_int64_field
 * @param _bounded_sequence_int64_field New value to be copied in member bounded_sequence_int64_field
 */
void CompleteTestType::bounded_sequence_int64_field(
        const std::vector<int64_t>& _bounded_sequence_int64_field)
{
    m_bounded_sequence_int64_field = _bounded_sequence_int64_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_int64_field
 * @param _bounded_sequence_int64_field New value to be moved in member bounded_sequence_int64_field
 */
void CompleteTestType::bounded_sequence_int64_field(
        std::vector<int64_t>&& _bounded_sequence_int64_field)
{
    m_bounded_sequence_int64_field = std::move(_bounded_sequence_int64_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_int64_field
 * @return Constant reference to member bounded_sequence_int64_field
 */
const std::vector<int64_t>& CompleteTestType::bounded_sequence_int64_field() const
{
    return m_bounded_sequence_int64_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_int64_field
 * @return Reference to member bounded_sequence_int64_field
 */
std::vector<int64_t>& CompleteTestType::bounded_sequence_int64_field()
{
    return m_bounded_sequence_int64_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_uint64_field
 * @param _bounded_sequence_uint64_field New value to be copied in member bounded_sequence_uint64_field
 */
void CompleteTestType::bounded_sequence_uint64_field(
        const std::vector<uint64_t>& _bounded_sequence_uint64_field)
{
    m_bounded_sequence_uint64_field = _bounded_sequence_uint64_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_uint64_field
 * @param _bounded_sequence_uint64_field New value to be moved in member bounded_sequence_uint64_field
 */
void CompleteTestType::bounded_sequence_uint64_field(
        std::vector<uint64_t>&& _bounded_sequence_uint64_field)
{
    m_bounded_sequence_uint64_field = std::move(_bounded_sequence_uint64_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_uint64_field
 * @return Constant reference to member bounded_sequence_uint64_field
 */
const std::vector<uint64_t>& CompleteTestType::bounded_sequence_uint64_field() const
{
    return m_bounded_sequence_uint64_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_uint64_field
 * @return Reference to member bounded_sequence_uint64_field
 */
std::vector<uint64_t>& CompleteTestType::bounded_sequence_uint64_field()
{
    return m_bounded_sequence_uint64_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_float_field
 * @param _bounded_sequence_float_field New value to be copied in member bounded_sequence_float_field
 */
void CompleteTestType::bounded_sequence_float_field(
        const std::vector<float>& _bounded_sequence_float_field)
{
    m_bounded_sequence_float_field = _bounded_sequence_float_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_float_field
 * @param _bounded_sequence_float_field New value to be moved in member bounded_sequence_float_field
 */
void CompleteTestType::bounded_sequence_float_field(
        std::vector<float>&& _bounded_sequence_float_field)
{
    m_bounded_sequence_float_field = std::move(_bounded_sequence_float_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_float_field
 * @return Constant reference to member bounded_sequence_float_field
 */
const std::vector<float>& CompleteTestType::bounded_sequence_float_field() const
{
    return m_bounded_sequence_float_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_float_field
 * @return Reference to member bounded_sequence_float_field
 */
std::vector<float>& CompleteTestType::bounded_sequence_float_field()
{
    return m_bounded_sequence_float_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_double_field
 * @param _bounded_sequence_double_field New value to be copied in member bounded_sequence_double_field
 */
void CompleteTestType::bounded_sequence_double_field(
        const std::vector<double>& _bounded_sequence_double_field)
{
    m_bounded_sequence_double_field = _bounded_sequence_double_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_double_field
 * @param _bounded_sequence_double_field New value to be moved in member bounded_sequence_double_field
 */
void CompleteTestType::bounded_sequence_double_field(
        std::vector<double>&& _bounded_sequence_double_field)
{
    m_bounded_sequence_double_field = std::move(_bounded_sequence_double_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_double_field
 * @return Constant reference to member bounded_sequence_double_field
 */
const std::vector<double>& CompleteTestType::bounded_sequence_double_field() const
{
    return m_bounded_sequence_double_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_double_field
 * @return Reference to member bounded_sequence_double_field
 */
std::vector<double>& CompleteTestType::bounded_sequence_double_field()
{
    return m_bounded_sequence_double_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_bool_field
 * @param _bounded_sequence_bool_field New value to be copied in member bounded_sequence_bool_field
 */
void CompleteTestType::bounded_sequence_bool_field(
        const std::vector<bool>& _bounded_sequence_bool_field)
{
    m_bounded_sequence_bool_field = _bounded_sequence_bool_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_bool_field
 * @param _bounded_sequence_bool_field New value to be moved in member bounded_sequence_bool_field
 */
void CompleteTestType::bounded_sequence_bool_field(
        std::vector<bool>&& _bounded_sequence_bool_field)
{
    m_bounded_sequence_bool_field = std::move(_bounded_sequence_bool_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_bool_field
 * @return Constant reference to member bounded_sequence_bool_field
 */
const std::vector<bool>& CompleteTestType::bounded_sequence_bool_field() const
{
    return m_bounded_sequence_bool_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_bool_field
 * @return Reference to member bounded_sequence_bool_field
 */
std::vector<bool>& CompleteTestType::bounded_sequence_bool_field()
{
    return m_bounded_sequence_bool_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_enum_field
 * @param _bounded_sequence_enum_field New value to be copied in member bounded_sequence_enum_field
 */
void CompleteTestType::bounded_sequence_enum_field(
        const std::vector<Color>& _bounded_sequence_enum_field)
{
    m_bounded_sequence_enum_field = _bounded_sequence_enum_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_enum_field
 * @param _bounded_sequence_enum_field New value to be moved in member bounded_sequence_enum_field
 */
void CompleteTestType::bounded_sequence_enum_field(
        std::vector<Color>&& _bounded_sequence_enum_field)
{
    m_bounded_sequence_enum_field = std::move(_bounded_sequence_enum_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_enum_field
 * @return Constant reference to member bounded_sequence_enum_field
 */
const std::vector<Color>& CompleteTestType::bounded_sequence_enum_field() const
{
    return m_bounded_sequence_enum_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_enum_field
 * @return Reference to member bounded_sequence_enum_field
 */
std::vector<Color>& CompleteTestType::bounded_sequence_enum_field()
{
    return m_bounded_sequence_enum_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_enum2_field
 * @param _bounded_sequence_enum2_field New value to be copied in member bounded_sequence_enum2_field
 */
void CompleteTestType::bounded_sequence_enum2_field(
        const std::vector<Material>& _bounded_sequence_enum2_field)
{
    m_bounded_sequence_enum2_field = _bounded_sequence_enum2_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_enum2_field
 * @param _bounded_sequence_enum2_field New value to be moved in member bounded_sequence_enum2_field
 */
void CompleteTestType::bounded_sequence_enum2_field(
        std::vector<Material>&& _bounded_sequence_enum2_field)
{
    m_bounded_sequence_enum2_field = std::move(_bounded_sequence_enum2_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_enum2_field
 * @return Constant reference to member bounded_sequence_enum2_field
 */
const std::vector<Material>& CompleteTestType::bounded_sequence_enum2_field() const
{
    return m_bounded_sequence_enum2_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_enum2_field
 * @return Reference to member bounded_sequence_enum2_field
 */
std::vector<Material>& CompleteTestType::bounded_sequence_enum2_field()
{
    return m_bounded_sequence_enum2_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_struct_field
 * @param _bounded_sequence_struct_field New value to be copied in member bounded_sequence_struct_field
 */
void CompleteTestType::bounded_sequence_struct_field(
        const std::vector<StructType>& _bounded_sequence_struct_field)
{
    m_bounded_sequence_struct_field = _bounded_sequence_struct_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_struct_field
 * @param _bounded_sequence_struct_field New value to be moved in member bounded_sequence_struct_field
 */
void CompleteTestType::bounded_sequence_struct_field(
        std::vector<StructType>&& _bounded_sequence_struct_field)
{
    m_bounded_sequence_struct_field = std::move(_bounded_sequence_struct_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_struct_field
 * @return Constant reference to member bounded_sequence_struct_field
 */
const std::vector<StructType>& CompleteTestType::bounded_sequence_struct_field() const
{
    return m_bounded_sequence_struct_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_struct_field
 * @return Reference to member bounded_sequence_struct_field
 */
std::vector<StructType>& CompleteTestType::bounded_sequence_struct_field()
{
    return m_bounded_sequence_struct_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_char_field
 * @param _unbounded_sequence_char_field New value to be copied in member unbounded_sequence_char_field
 */
void CompleteTestType::unbounded_sequence_char_field(
        const std::vector<char>& _unbounded_sequence_char_field)
{
    m_unbounded_sequence_char_field = _unbounded_sequence_char_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_char_field
 * @param _unbounded_sequence_char_field New value to be moved in member unbounded_sequence_char_field
 */
void CompleteTestType::unbounded_sequence_char_field(
        std::vector<char>&& _unbounded_sequence_char_field)
{
    m_unbounded_sequence_char_field = std::move(_unbounded_sequence_char_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_char_field
 * @return Constant reference to member unbounded_sequence_char_field
 */
const std::vector<char>& CompleteTestType::unbounded_sequence_char_field() const
{
    return m_unbounded_sequence_char_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_char_field
 * @return Reference to member unbounded_sequence_char_field
 */
std::vector<char>& CompleteTestType::unbounded_sequence_char_field()
{
    return m_unbounded_sequence_char_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_uint8_field
 * @param _unbounded_sequence_uint8_field New value to be copied in member unbounded_sequence_uint8_field
 */
void CompleteTestType::unbounded_sequence_uint8_field(
        const std::vector<uint8_t>& _unbounded_sequence_uint8_field)
{
    m_unbounded_sequence_uint8_field = _unbounded_sequence_uint8_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_uint8_field
 * @param _unbounded_sequence_uint8_field New value to be moved in member unbounded_sequence_uint8_field
 */
void CompleteTestType::unbounded_sequence_uint8_field(
        std::vector<uint8_t>&& _unbounded_sequence_uint8_field)
{
    m_unbounded_sequence_uint8_field = std::move(_unbounded_sequence_uint8_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_uint8_field
 * @return Constant reference to member unbounded_sequence_uint8_field
 */
const std::vector<uint8_t>& CompleteTestType::unbounded_sequence_uint8_field() const
{
    return m_unbounded_sequence_uint8_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_uint8_field
 * @return Reference to member unbounded_sequence_uint8_field
 */
std::vector<uint8_t>& CompleteTestType::unbounded_sequence_uint8_field()
{
    return m_unbounded_sequence_uint8_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_int16_field
 * @param _unbounded_sequence_int16_field New value to be copied in member unbounded_sequence_int16_field
 */
void CompleteTestType::unbounded_sequence_int16_field(
        const std::vector<int16_t>& _unbounded_sequence_int16_field)
{
    m_unbounded_sequence_int16_field = _unbounded_sequence_int16_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_int16_field
 * @param _unbounded_sequence_int16_field New value to be moved in member unbounded_sequence_int16_field
 */
void CompleteTestType::unbounded_sequence_int16_field(
        std::vector<int16_t>&& _unbounded_sequence_int16_field)
{
    m_unbounded_sequence_int16_field = std::move(_unbounded_sequence_int16_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_int16_field
 * @return Constant reference to member unbounded_sequence_int16_field
 */
const std::vector<int16_t>& CompleteTestType::unbounded_sequence_int16_field() const
{
    return m_unbounded_sequence_int16_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_int16_field
 * @return Reference to member unbounded_sequence_int16_field
 */
std::vector<int16_t>& CompleteTestType::unbounded_sequence_int16_field()
{
    return m_unbounded_sequence_int16_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_uint16_field
 * @param _unbounded_sequence_uint16_field New value to be copied in member unbounded_sequence_uint16_field
 */
void CompleteTestType::unbounded_sequence_uint16_field(
        const std::vector<uint16_t>& _unbounded_sequence_uint16_field)
{
    m_unbounded_sequence_uint16_field = _unbounded_sequence_uint16_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_uint16_field
 * @param _unbounded_sequence_uint16_field New value to be moved in member unbounded_sequence_uint16_field
 */
void CompleteTestType::unbounded_sequence_uint16_field(
        std::vector<uint16_t>&& _unbounded_sequence_uint16_field)
{
    m_unbounded_sequence_uint16_field = std::move(_unbounded_sequence_uint16_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_uint16_field
 * @return Constant reference to member unbounded_sequence_uint16_field
 */
const std::vector<uint16_t>& CompleteTestType::unbounded_sequence_uint16_field() const
{
    return m_unbounded_sequence_uint16_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_uint16_field
 * @return Reference to member unbounded_sequence_uint16_field
 */
std::vector<uint16_t>& CompleteTestType::unbounded_sequence_uint16_field()
{
    return m_unbounded_sequence_uint16_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_int32_field
 * @param _unbounded_sequence_int32_field New value to be copied in member unbounded_sequence_int32_field
 */
void CompleteTestType::unbounded_sequence_int32_field(
        const std::vector<int32_t>& _unbounded_sequence_int32_field)
{
    m_unbounded_sequence_int32_field = _unbounded_sequence_int32_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_int32_field
 * @param _unbounded_sequence_int32_field New value to be moved in member unbounded_sequence_int32_field
 */
void CompleteTestType::unbounded_sequence_int32_field(
        std::vector<int32_t>&& _unbounded_sequence_int32_field)
{
    m_unbounded_sequence_int32_field = std::move(_unbounded_sequence_int32_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_int32_field
 * @return Constant reference to member unbounded_sequence_int32_field
 */
const std::vector<int32_t>& CompleteTestType::unbounded_sequence_int32_field() const
{
    return m_unbounded_sequence_int32_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_int32_field
 * @return Reference to member unbounded_sequence_int32_field
 */
std::vector<int32_t>& CompleteTestType::unbounded_sequence_int32_field()
{
    return m_unbounded_sequence_int32_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_uint32_field
 * @param _unbounded_sequence_uint32_field New value to be copied in member unbounded_sequence_uint32_field
 */
void CompleteTestType::unbounded_sequence_uint32_field(
        const std::vector<uint32_t>& _unbounded_sequence_uint32_field)
{
    m_unbounded_sequence_uint32_field = _unbounded_sequence_uint32_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_uint32_field
 * @param _unbounded_sequence_uint32_field New value to be moved in member unbounded_sequence_uint32_field
 */
void CompleteTestType::unbounded_sequence_uint32_field(
        std::vector<uint32_t>&& _unbounded_sequence_uint32_field)
{
    m_unbounded_sequence_uint32_field = std::move(_unbounded_sequence_uint32_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_uint32_field
 * @return Constant reference to member unbounded_sequence_uint32_field
 */
const std::vector<uint32_t>& CompleteTestType::unbounded_sequence_uint32_field() const
{
    return m_unbounded_sequence_uint32_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_uint32_field
 * @return Reference to member unbounded_sequence_uint32_field
 */
std::vector<uint32_t>& CompleteTestType::unbounded_sequence_uint32_field()
{
    return m_unbounded_sequence_uint32_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_int64_field
 * @param _unbounded_sequence_int64_field New value to be copied in member unbounded_sequence_int64_field
 */
void CompleteTestType::unbounded_sequence_int64_field(
        const std::vector<int64_t>& _unbounded_sequence_int64_field)
{
    m_unbounded_sequence_int64_field = _unbounded_sequence_int64_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_int64_field
 * @param _unbounded_sequence_int64_field New value to be moved in member unbounded_sequence_int64_field
 */
void CompleteTestType::unbounded_sequence_int64_field(
        std::vector<int64_t>&& _unbounded_sequence_int64_field)
{
    m_unbounded_sequence_int64_field = std::move(_unbounded_sequence_int64_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_int64_field
 * @return Constant reference to member unbounded_sequence_int64_field
 */
const std::vector<int64_t>& CompleteTestType::unbounded_sequence_int64_field() const
{
    return m_unbounded_sequence_int64_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_int64_field
 * @return Reference to member unbounded_sequence_int64_field
 */
std::vector<int64_t>& CompleteTestType::unbounded_sequence_int64_field()
{
    return m_unbounded_sequence_int64_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_uint64_field
 * @param _unbounded_sequence_uint64_field New value to be copied in member unbounded_sequence_uint64_field
 */
void CompleteTestType::unbounded_sequence_uint64_field(
        const std::vector<uint64_t>& _unbounded_sequence_uint64_field)
{
    m_unbounded_sequence_uint64_field = _unbounded_sequence_uint64_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_uint64_field
 * @param _unbounded_sequence_uint64_field New value to be moved in member unbounded_sequence_uint64_field
 */
void CompleteTestType::unbounded_sequence_uint64_field(
        std::vector<uint64_t>&& _unbounded_sequence_uint64_field)
{
    m_unbounded_sequence_uint64_field = std::move(_unbounded_sequence_uint64_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_uint64_field
 * @return Constant reference to member unbounded_sequence_uint64_field
 */
const std::vector<uint64_t>& CompleteTestType::unbounded_sequence_uint64_field() const
{
    return m_unbounded_sequence_uint64_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_uint64_field
 * @return Reference to member unbounded_sequence_uint64_field
 */
std::vector<uint64_t>& CompleteTestType::unbounded_sequence_uint64_field()
{
    return m_unbounded_sequence_uint64_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_float_field
 * @param _unbounded_sequence_float_field New value to be copied in member unbounded_sequence_float_field
 */
void CompleteTestType::unbounded_sequence_float_field(
        const std::vector<float>& _unbounded_sequence_float_field)
{
    m_unbounded_sequence_float_field = _unbounded_sequence_float_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_float_field
 * @param _unbounded_sequence_float_field New value to be moved in member unbounded_sequence_float_field
 */
void CompleteTestType::unbounded_sequence_float_field(
        std::vector<float>&& _unbounded_sequence_float_field)
{
    m_unbounded_sequence_float_field = std::move(_unbounded_sequence_float_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_float_field
 * @return Constant reference to member unbounded_sequence_float_field
 */
const std::vector<float>& CompleteTestType::unbounded_sequence_float_field() const
{
    return m_unbounded_sequence_float_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_float_field
 * @return Reference to member unbounded_sequence_float_field
 */
std::vector<float>& CompleteTestType::unbounded_sequence_float_field()
{
    return m_unbounded_sequence_float_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_double_field
 * @param _unbounded_sequence_double_field New value to be copied in member unbounded_sequence_double_field
 */
void CompleteTestType::unbounded_sequence_double_field(
        const std::vector<double>& _unbounded_sequence_double_field)
{
    m_unbounded_sequence_double_field = _unbounded_sequence_double_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_double_field
 * @param _unbounded_sequence_double_field New value to be moved in member unbounded_sequence_double_field
 */
void CompleteTestType::unbounded_sequence_double_field(
        std::vector<double>&& _unbounded_sequence_double_field)
{
    m_unbounded_sequence_double_field = std::move(_unbounded_sequence_double_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_double_field
 * @return Constant reference to member unbounded_sequence_double_field
 */
const std::vector<double>& CompleteTestType::unbounded_sequence_double_field() const
{
    return m_unbounded_sequence_double_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_double_field
 * @return Reference to member unbounded_sequence_double_field
 */
std::vector<double>& CompleteTestType::unbounded_sequence_double_field()
{
    return m_unbounded_sequence_double_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_bool_field
 * @param _unbounded_sequence_bool_field New value to be copied in member unbounded_sequence_bool_field
 */
void CompleteTestType::unbounded_sequence_bool_field(
        const std::vector<bool>& _unbounded_sequence_bool_field)
{
    m_unbounded_sequence_bool_field = _unbounded_sequence_bool_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_bool_field
 * @param _unbounded_sequence_bool_field New value to be moved in member unbounded_sequence_bool_field
 */
void CompleteTestType::unbounded_sequence_bool_field(
        std::vector<bool>&& _unbounded_sequence_bool_field)
{
    m_unbounded_sequence_bool_field = std::move(_unbounded_sequence_bool_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_bool_field
 * @return Constant reference to member unbounded_sequence_bool_field
 */
const std::vector<bool>& CompleteTestType::unbounded_sequence_bool_field() const
{
    return m_unbounded_sequence_bool_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_bool_field
 * @return Reference to member unbounded_sequence_bool_field
 */
std::vector<bool>& CompleteTestType::unbounded_sequence_bool_field()
{
    return m_unbounded_sequence_bool_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_enum_field
 * @param _unbounded_sequence_enum_field New value to be copied in member unbounded_sequence_enum_field
 */
void CompleteTestType::unbounded_sequence_enum_field(
        const std::vector<Color>& _unbounded_sequence_enum_field)
{
    m_unbounded_sequence_enum_field = _unbounded_sequence_enum_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_enum_field
 * @param _unbounded_sequence_enum_field New value to be moved in member unbounded_sequence_enum_field
 */
void CompleteTestType::unbounded_sequence_enum_field(
        std::vector<Color>&& _unbounded_sequence_enum_field)
{
    m_unbounded_sequence_enum_field = std::move(_unbounded_sequence_enum_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_enum_field
 * @return Constant reference to member unbounded_sequence_enum_field
 */
const std::vector<Color>& CompleteTestType::unbounded_sequence_enum_field() const
{
    return m_unbounded_sequence_enum_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_enum_field
 * @return Reference to member unbounded_sequence_enum_field
 */
std::vector<Color>& CompleteTestType::unbounded_sequence_enum_field()
{
    return m_unbounded_sequence_enum_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_enum2_field
 * @param _unbounded_sequence_enum2_field New value to be copied in member unbounded_sequence_enum2_field
 */
void CompleteTestType::unbounded_sequence_enum2_field(
        const std::vector<Material>& _unbounded_sequence_enum2_field)
{
    m_unbounded_sequence_enum2_field = _unbounded_sequence_enum2_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_enum2_field
 * @param _unbounded_sequence_enum2_field New value to be moved in member unbounded_sequence_enum2_field
 */
void CompleteTestType::unbounded_sequence_enum2_field(
        std::vector<Material>&& _unbounded_sequence_enum2_field)
{
    m_unbounded_sequence_enum2_field = std::move(_unbounded_sequence_enum2_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_enum2_field
 * @return Constant reference to member unbounded_sequence_enum2_field
 */
const std::vector<Material>& CompleteTestType::unbounded_sequence_enum2_field() const
{
    return m_unbounded_sequence_enum2_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_enum2_field
 * @return Reference to member unbounded_sequence_enum2_field
 */
std::vector<Material>& CompleteTestType::unbounded_sequence_enum2_field()
{
    return m_unbounded_sequence_enum2_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_struct_field
 * @param _unbounded_sequence_struct_field New value to be copied in member unbounded_sequence_struct_field
 */
void CompleteTestType::unbounded_sequence_struct_field(
        const std::vector<StructType>& _unbounded_sequence_struct_field)
{
    m_unbounded_sequence_struct_field = _unbounded_sequence_struct_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_struct_field
 * @param _unbounded_sequence_struct_field New value to be moved in member unbounded_sequence_struct_field
 */
void CompleteTestType::unbounded_sequence_struct_field(
        std::vector<StructType>&& _unbounded_sequence_struct_field)
{
    m_unbounded_sequence_struct_field = std::move(_unbounded_sequence_struct_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_struct_field
 * @return Constant reference to member unbounded_sequence_struct_field
 */
const std::vector<StructType>& CompleteTestType::unbounded_sequence_struct_field() const
{
    return m_unbounded_sequence_struct_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_struct_field
 * @return Reference to member unbounded_sequence_struct_field
 */
std::vector<StructType>& CompleteTestType::unbounded_sequence_struct_field()
{
    return m_unbounded_sequence_struct_field;
}






KeyedCompleteTestType::KeyedCompleteTestType()
{
}

KeyedCompleteTestType::~KeyedCompleteTestType()
{
}

KeyedCompleteTestType::KeyedCompleteTestType(
        const KeyedCompleteTestType& x)
{
    m_id = x.m_id;
    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = x.m_string_field;
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
    m_struct_field = x.m_struct_field;
    m_char_opt_field = x.m_char_opt_field;
    m_uint8_opt_field = x.m_uint8_opt_field;
    m_int16_opt_field = x.m_int16_opt_field;
    m_uint16_opt_field = x.m_uint16_opt_field;
    m_int32_opt_field = x.m_int32_opt_field;
    m_uint32_opt_field = x.m_uint32_opt_field;
    m_int64_opt_field = x.m_int64_opt_field;
    m_uint64_opt_field = x.m_uint64_opt_field;
    m_float_opt_field = x.m_float_opt_field;
    m_double_opt_field = x.m_double_opt_field;
    m_bool_opt_field = x.m_bool_opt_field;
    m_string_opt_field = x.m_string_opt_field;
    m_enum_opt_field = x.m_enum_opt_field;
    m_enum2_opt_field = x.m_enum2_opt_field;
    m_struct_opt_field = x.m_struct_opt_field;
    m_array_char_field = x.m_array_char_field;
    m_array_uint8_field = x.m_array_uint8_field;
    m_array_int16_field = x.m_array_int16_field;
    m_array_uint16_field = x.m_array_uint16_field;
    m_array_int32_field = x.m_array_int32_field;
    m_array_uint32_field = x.m_array_uint32_field;
    m_array_int64_field = x.m_array_int64_field;
    m_array_uint64_field = x.m_array_uint64_field;
    m_array_float_field = x.m_array_float_field;
    m_array_double_field = x.m_array_double_field;
    m_array_bool_field = x.m_array_bool_field;
    m_array_enum_field = x.m_array_enum_field;
    m_array_enum2_field = x.m_array_enum2_field;
    m_array_struct_field = x.m_array_struct_field;
    m_bounded_sequence_char_field = x.m_bounded_sequence_char_field;
    m_bounded_sequence_uint8_field = x.m_bounded_sequence_uint8_field;
    m_bounded_sequence_int16_field = x.m_bounded_sequence_int16_field;
    m_bounded_sequence_uint16_field = x.m_bounded_sequence_uint16_field;
    m_bounded_sequence_int32_field = x.m_bounded_sequence_int32_field;
    m_bounded_sequence_uint32_field = x.m_bounded_sequence_uint32_field;
    m_bounded_sequence_int64_field = x.m_bounded_sequence_int64_field;
    m_bounded_sequence_uint64_field = x.m_bounded_sequence_uint64_field;
    m_bounded_sequence_float_field = x.m_bounded_sequence_float_field;
    m_bounded_sequence_double_field = x.m_bounded_sequence_double_field;
    m_bounded_sequence_bool_field = x.m_bounded_sequence_bool_field;
    m_bounded_sequence_enum_field = x.m_bounded_sequence_enum_field;
    m_bounded_sequence_enum2_field = x.m_bounded_sequence_enum2_field;
    m_bounded_sequence_struct_field = x.m_bounded_sequence_struct_field;
    m_unbounded_sequence_char_field = x.m_unbounded_sequence_char_field;
    m_unbounded_sequence_uint8_field = x.m_unbounded_sequence_uint8_field;
    m_unbounded_sequence_int16_field = x.m_unbounded_sequence_int16_field;
    m_unbounded_sequence_uint16_field = x.m_unbounded_sequence_uint16_field;
    m_unbounded_sequence_int32_field = x.m_unbounded_sequence_int32_field;
    m_unbounded_sequence_uint32_field = x.m_unbounded_sequence_uint32_field;
    m_unbounded_sequence_int64_field = x.m_unbounded_sequence_int64_field;
    m_unbounded_sequence_uint64_field = x.m_unbounded_sequence_uint64_field;
    m_unbounded_sequence_float_field = x.m_unbounded_sequence_float_field;
    m_unbounded_sequence_double_field = x.m_unbounded_sequence_double_field;
    m_unbounded_sequence_bool_field = x.m_unbounded_sequence_bool_field;
    m_unbounded_sequence_enum_field = x.m_unbounded_sequence_enum_field;
    m_unbounded_sequence_enum2_field = x.m_unbounded_sequence_enum2_field;
    m_unbounded_sequence_struct_field = x.m_unbounded_sequence_struct_field;
}

KeyedCompleteTestType::KeyedCompleteTestType(
        KeyedCompleteTestType&& x) noexcept
{
    m_id = x.m_id;
    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = std::move(x.m_string_field);
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
    m_struct_field = std::move(x.m_struct_field);
    m_char_opt_field = x.m_char_opt_field;
    m_uint8_opt_field = x.m_uint8_opt_field;
    m_int16_opt_field = x.m_int16_opt_field;
    m_uint16_opt_field = x.m_uint16_opt_field;
    m_int32_opt_field = x.m_int32_opt_field;
    m_uint32_opt_field = x.m_uint32_opt_field;
    m_int64_opt_field = x.m_int64_opt_field;
    m_uint64_opt_field = x.m_uint64_opt_field;
    m_float_opt_field = x.m_float_opt_field;
    m_double_opt_field = x.m_double_opt_field;
    m_bool_opt_field = x.m_bool_opt_field;
    m_string_opt_field = std::move(x.m_string_opt_field);
    m_enum_opt_field = x.m_enum_opt_field;
    m_enum2_opt_field = x.m_enum2_opt_field;
    m_struct_opt_field = std::move(x.m_struct_opt_field);
    m_array_char_field = std::move(x.m_array_char_field);
    m_array_uint8_field = std::move(x.m_array_uint8_field);
    m_array_int16_field = std::move(x.m_array_int16_field);
    m_array_uint16_field = std::move(x.m_array_uint16_field);
    m_array_int32_field = std::move(x.m_array_int32_field);
    m_array_uint32_field = std::move(x.m_array_uint32_field);
    m_array_int64_field = std::move(x.m_array_int64_field);
    m_array_uint64_field = std::move(x.m_array_uint64_field);
    m_array_float_field = std::move(x.m_array_float_field);
    m_array_double_field = std::move(x.m_array_double_field);
    m_array_bool_field = std::move(x.m_array_bool_field);
    m_array_enum_field = std::move(x.m_array_enum_field);
    m_array_enum2_field = std::move(x.m_array_enum2_field);
    m_array_struct_field = std::move(x.m_array_struct_field);
    m_bounded_sequence_char_field = std::move(x.m_bounded_sequence_char_field);
    m_bounded_sequence_uint8_field = std::move(x.m_bounded_sequence_uint8_field);
    m_bounded_sequence_int16_field = std::move(x.m_bounded_sequence_int16_field);
    m_bounded_sequence_uint16_field = std::move(x.m_bounded_sequence_uint16_field);
    m_bounded_sequence_int32_field = std::move(x.m_bounded_sequence_int32_field);
    m_bounded_sequence_uint32_field = std::move(x.m_bounded_sequence_uint32_field);
    m_bounded_sequence_int64_field = std::move(x.m_bounded_sequence_int64_field);
    m_bounded_sequence_uint64_field = std::move(x.m_bounded_sequence_uint64_field);
    m_bounded_sequence_float_field = std::move(x.m_bounded_sequence_float_field);
    m_bounded_sequence_double_field = std::move(x.m_bounded_sequence_double_field);
    m_bounded_sequence_bool_field = std::move(x.m_bounded_sequence_bool_field);
    m_bounded_sequence_enum_field = std::move(x.m_bounded_sequence_enum_field);
    m_bounded_sequence_enum2_field = std::move(x.m_bounded_sequence_enum2_field);
    m_bounded_sequence_struct_field = std::move(x.m_bounded_sequence_struct_field);
    m_unbounded_sequence_char_field = std::move(x.m_unbounded_sequence_char_field);
    m_unbounded_sequence_uint8_field = std::move(x.m_unbounded_sequence_uint8_field);
    m_unbounded_sequence_int16_field = std::move(x.m_unbounded_sequence_int16_field);
    m_unbounded_sequence_uint16_field = std::move(x.m_unbounded_sequence_uint16_field);
    m_unbounded_sequence_int32_field = std::move(x.m_unbounded_sequence_int32_field);
    m_unbounded_sequence_uint32_field = std::move(x.m_unbounded_sequence_uint32_field);
    m_unbounded_sequence_int64_field = std::move(x.m_unbounded_sequence_int64_field);
    m_unbounded_sequence_uint64_field = std::move(x.m_unbounded_sequence_uint64_field);
    m_unbounded_sequence_float_field = std::move(x.m_unbounded_sequence_float_field);
    m_unbounded_sequence_double_field = std::move(x.m_unbounded_sequence_double_field);
    m_unbounded_sequence_bool_field = std::move(x.m_unbounded_sequence_bool_field);
    m_unbounded_sequence_enum_field = std::move(x.m_unbounded_sequence_enum_field);
    m_unbounded_sequence_enum2_field = std::move(x.m_unbounded_sequence_enum2_field);
    m_unbounded_sequence_struct_field = std::move(x.m_unbounded_sequence_struct_field);
}

KeyedCompleteTestType& KeyedCompleteTestType::operator =(
        const KeyedCompleteTestType& x)
{

    m_id = x.m_id;
    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = x.m_string_field;
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
    m_struct_field = x.m_struct_field;
    m_char_opt_field = x.m_char_opt_field;
    m_uint8_opt_field = x.m_uint8_opt_field;
    m_int16_opt_field = x.m_int16_opt_field;
    m_uint16_opt_field = x.m_uint16_opt_field;
    m_int32_opt_field = x.m_int32_opt_field;
    m_uint32_opt_field = x.m_uint32_opt_field;
    m_int64_opt_field = x.m_int64_opt_field;
    m_uint64_opt_field = x.m_uint64_opt_field;
    m_float_opt_field = x.m_float_opt_field;
    m_double_opt_field = x.m_double_opt_field;
    m_bool_opt_field = x.m_bool_opt_field;
    m_string_opt_field = x.m_string_opt_field;
    m_enum_opt_field = x.m_enum_opt_field;
    m_enum2_opt_field = x.m_enum2_opt_field;
    m_struct_opt_field = x.m_struct_opt_field;
    m_array_char_field = x.m_array_char_field;
    m_array_uint8_field = x.m_array_uint8_field;
    m_array_int16_field = x.m_array_int16_field;
    m_array_uint16_field = x.m_array_uint16_field;
    m_array_int32_field = x.m_array_int32_field;
    m_array_uint32_field = x.m_array_uint32_field;
    m_array_int64_field = x.m_array_int64_field;
    m_array_uint64_field = x.m_array_uint64_field;
    m_array_float_field = x.m_array_float_field;
    m_array_double_field = x.m_array_double_field;
    m_array_bool_field = x.m_array_bool_field;
    m_array_enum_field = x.m_array_enum_field;
    m_array_enum2_field = x.m_array_enum2_field;
    m_array_struct_field = x.m_array_struct_field;
    m_bounded_sequence_char_field = x.m_bounded_sequence_char_field;
    m_bounded_sequence_uint8_field = x.m_bounded_sequence_uint8_field;
    m_bounded_sequence_int16_field = x.m_bounded_sequence_int16_field;
    m_bounded_sequence_uint16_field = x.m_bounded_sequence_uint16_field;
    m_bounded_sequence_int32_field = x.m_bounded_sequence_int32_field;
    m_bounded_sequence_uint32_field = x.m_bounded_sequence_uint32_field;
    m_bounded_sequence_int64_field = x.m_bounded_sequence_int64_field;
    m_bounded_sequence_uint64_field = x.m_bounded_sequence_uint64_field;
    m_bounded_sequence_float_field = x.m_bounded_sequence_float_field;
    m_bounded_sequence_double_field = x.m_bounded_sequence_double_field;
    m_bounded_sequence_bool_field = x.m_bounded_sequence_bool_field;
    m_bounded_sequence_enum_field = x.m_bounded_sequence_enum_field;
    m_bounded_sequence_enum2_field = x.m_bounded_sequence_enum2_field;
    m_bounded_sequence_struct_field = x.m_bounded_sequence_struct_field;
    m_unbounded_sequence_char_field = x.m_unbounded_sequence_char_field;
    m_unbounded_sequence_uint8_field = x.m_unbounded_sequence_uint8_field;
    m_unbounded_sequence_int16_field = x.m_unbounded_sequence_int16_field;
    m_unbounded_sequence_uint16_field = x.m_unbounded_sequence_uint16_field;
    m_unbounded_sequence_int32_field = x.m_unbounded_sequence_int32_field;
    m_unbounded_sequence_uint32_field = x.m_unbounded_sequence_uint32_field;
    m_unbounded_sequence_int64_field = x.m_unbounded_sequence_int64_field;
    m_unbounded_sequence_uint64_field = x.m_unbounded_sequence_uint64_field;
    m_unbounded_sequence_float_field = x.m_unbounded_sequence_float_field;
    m_unbounded_sequence_double_field = x.m_unbounded_sequence_double_field;
    m_unbounded_sequence_bool_field = x.m_unbounded_sequence_bool_field;
    m_unbounded_sequence_enum_field = x.m_unbounded_sequence_enum_field;
    m_unbounded_sequence_enum2_field = x.m_unbounded_sequence_enum2_field;
    m_unbounded_sequence_struct_field = x.m_unbounded_sequence_struct_field;
    return *this;
}

KeyedCompleteTestType& KeyedCompleteTestType::operator =(
        KeyedCompleteTestType&& x) noexcept
{

    m_id = x.m_id;
    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = std::move(x.m_string_field);
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
    m_struct_field = std::move(x.m_struct_field);
    m_char_opt_field = x.m_char_opt_field;
    m_uint8_opt_field = x.m_uint8_opt_field;
    m_int16_opt_field = x.m_int16_opt_field;
    m_uint16_opt_field = x.m_uint16_opt_field;
    m_int32_opt_field = x.m_int32_opt_field;
    m_uint32_opt_field = x.m_uint32_opt_field;
    m_int64_opt_field = x.m_int64_opt_field;
    m_uint64_opt_field = x.m_uint64_opt_field;
    m_float_opt_field = x.m_float_opt_field;
    m_double_opt_field = x.m_double_opt_field;
    m_bool_opt_field = x.m_bool_opt_field;
    m_string_opt_field = std::move(x.m_string_opt_field);
    m_enum_opt_field = x.m_enum_opt_field;
    m_enum2_opt_field = x.m_enum2_opt_field;
    m_struct_opt_field = std::move(x.m_struct_opt_field);
    m_array_char_field = std::move(x.m_array_char_field);
    m_array_uint8_field = std::move(x.m_array_uint8_field);
    m_array_int16_field = std::move(x.m_array_int16_field);
    m_array_uint16_field = std::move(x.m_array_uint16_field);
    m_array_int32_field = std::move(x.m_array_int32_field);
    m_array_uint32_field = std::move(x.m_array_uint32_field);
    m_array_int64_field = std::move(x.m_array_int64_field);
    m_array_uint64_field = std::move(x.m_array_uint64_field);
    m_array_float_field = std::move(x.m_array_float_field);
    m_array_double_field = std::move(x.m_array_double_field);
    m_array_bool_field = std::move(x.m_array_bool_field);
    m_array_enum_field = std::move(x.m_array_enum_field);
    m_array_enum2_field = std::move(x.m_array_enum2_field);
    m_array_struct_field = std::move(x.m_array_struct_field);
    m_bounded_sequence_char_field = std::move(x.m_bounded_sequence_char_field);
    m_bounded_sequence_uint8_field = std::move(x.m_bounded_sequence_uint8_field);
    m_bounded_sequence_int16_field = std::move(x.m_bounded_sequence_int16_field);
    m_bounded_sequence_uint16_field = std::move(x.m_bounded_sequence_uint16_field);
    m_bounded_sequence_int32_field = std::move(x.m_bounded_sequence_int32_field);
    m_bounded_sequence_uint32_field = std::move(x.m_bounded_sequence_uint32_field);
    m_bounded_sequence_int64_field = std::move(x.m_bounded_sequence_int64_field);
    m_bounded_sequence_uint64_field = std::move(x.m_bounded_sequence_uint64_field);
    m_bounded_sequence_float_field = std::move(x.m_bounded_sequence_float_field);
    m_bounded_sequence_double_field = std::move(x.m_bounded_sequence_double_field);
    m_bounded_sequence_bool_field = std::move(x.m_bounded_sequence_bool_field);
    m_bounded_sequence_enum_field = std::move(x.m_bounded_sequence_enum_field);
    m_bounded_sequence_enum2_field = std::move(x.m_bounded_sequence_enum2_field);
    m_bounded_sequence_struct_field = std::move(x.m_bounded_sequence_struct_field);
    m_unbounded_sequence_char_field = std::move(x.m_unbounded_sequence_char_field);
    m_unbounded_sequence_uint8_field = std::move(x.m_unbounded_sequence_uint8_field);
    m_unbounded_sequence_int16_field = std::move(x.m_unbounded_sequence_int16_field);
    m_unbounded_sequence_uint16_field = std::move(x.m_unbounded_sequence_uint16_field);
    m_unbounded_sequence_int32_field = std::move(x.m_unbounded_sequence_int32_field);
    m_unbounded_sequence_uint32_field = std::move(x.m_unbounded_sequence_uint32_field);
    m_unbounded_sequence_int64_field = std::move(x.m_unbounded_sequence_int64_field);
    m_unbounded_sequence_uint64_field = std::move(x.m_unbounded_sequence_uint64_field);
    m_unbounded_sequence_float_field = std::move(x.m_unbounded_sequence_float_field);
    m_unbounded_sequence_double_field = std::move(x.m_unbounded_sequence_double_field);
    m_unbounded_sequence_bool_field = std::move(x.m_unbounded_sequence_bool_field);
    m_unbounded_sequence_enum_field = std::move(x.m_unbounded_sequence_enum_field);
    m_unbounded_sequence_enum2_field = std::move(x.m_unbounded_sequence_enum2_field);
    m_unbounded_sequence_struct_field = std::move(x.m_unbounded_sequence_struct_field);
    return *this;
}

bool KeyedCompleteTestType::operator ==(
        const KeyedCompleteTestType& x) const
{
    return (m_id == x.m_id &&
           m_char_field == x.m_char_field &&
           m_uint8_field == x.m_uint8_field &&
           m_int16_field == x.m_int16_field &&
           m_uint16_field == x.m_uint16_field &&
           m_int32_field == x.m_int32_field &&
           m_uint32_field == x.m_uint32_field &&
           m_int64_field == x.m_int64_field &&
           m_uint64_field == x.m_uint64_field &&
           m_float_field == x.m_float_field &&
           m_double_field == x.m_double_field &&
           m_bool_field == x.m_bool_field &&
           m_string_field == x.m_string_field &&
           m_enum_field == x.m_enum_field &&
           m_enum2_field == x.m_enum2_field &&
           m_struct_field == x.m_struct_field &&
           m_char_opt_field == x.m_char_opt_field &&
           m_uint8_opt_field == x.m_uint8_opt_field &&
           m_int16_opt_field == x.m_int16_opt_field &&
           m_uint16_opt_field == x.m_uint16_opt_field &&
           m_int32_opt_field == x.m_int32_opt_field &&
           m_uint32_opt_field == x.m_uint32_opt_field &&
           m_int64_opt_field == x.m_int64_opt_field &&
           m_uint64_opt_field == x.m_uint64_opt_field &&
           m_float_opt_field == x.m_float_opt_field &&
           m_double_opt_field == x.m_double_opt_field &&
           m_bool_opt_field == x.m_bool_opt_field &&
           m_string_opt_field == x.m_string_opt_field &&
           m_enum_opt_field == x.m_enum_opt_field &&
           m_enum2_opt_field == x.m_enum2_opt_field &&
           m_struct_opt_field == x.m_struct_opt_field &&
           m_array_char_field == x.m_array_char_field &&
           m_array_uint8_field == x.m_array_uint8_field &&
           m_array_int16_field == x.m_array_int16_field &&
           m_array_uint16_field == x.m_array_uint16_field &&
           m_array_int32_field == x.m_array_int32_field &&
           m_array_uint32_field == x.m_array_uint32_field &&
           m_array_int64_field == x.m_array_int64_field &&
           m_array_uint64_field == x.m_array_uint64_field &&
           m_array_float_field == x.m_array_float_field &&
           m_array_double_field == x.m_array_double_field &&
           m_array_bool_field == x.m_array_bool_field &&
           m_array_enum_field == x.m_array_enum_field &&
           m_array_enum2_field == x.m_array_enum2_field &&
           m_array_struct_field == x.m_array_struct_field &&
           m_bounded_sequence_char_field == x.m_bounded_sequence_char_field &&
           m_bounded_sequence_uint8_field == x.m_bounded_sequence_uint8_field &&
           m_bounded_sequence_int16_field == x.m_bounded_sequence_int16_field &&
           m_bounded_sequence_uint16_field == x.m_bounded_sequence_uint16_field &&
           m_bounded_sequence_int32_field == x.m_bounded_sequence_int32_field &&
           m_bounded_sequence_uint32_field == x.m_bounded_sequence_uint32_field &&
           m_bounded_sequence_int64_field == x.m_bounded_sequence_int64_field &&
           m_bounded_sequence_uint64_field == x.m_bounded_sequence_uint64_field &&
           m_bounded_sequence_float_field == x.m_bounded_sequence_float_field &&
           m_bounded_sequence_double_field == x.m_bounded_sequence_double_field &&
           m_bounded_sequence_bool_field == x.m_bounded_sequence_bool_field &&
           m_bounded_sequence_enum_field == x.m_bounded_sequence_enum_field &&
           m_bounded_sequence_enum2_field == x.m_bounded_sequence_enum2_field &&
           m_bounded_sequence_struct_field == x.m_bounded_sequence_struct_field &&
           m_unbounded_sequence_char_field == x.m_unbounded_sequence_char_field &&
           m_unbounded_sequence_uint8_field == x.m_unbounded_sequence_uint8_field &&
           m_unbounded_sequence_int16_field == x.m_unbounded_sequence_int16_field &&
           m_unbounded_sequence_uint16_field == x.m_unbounded_sequence_uint16_field &&
           m_unbounded_sequence_int32_field == x.m_unbounded_sequence_int32_field &&
           m_unbounded_sequence_uint32_field == x.m_unbounded_sequence_uint32_field &&
           m_unbounded_sequence_int64_field == x.m_unbounded_sequence_int64_field &&
           m_unbounded_sequence_uint64_field == x.m_unbounded_sequence_uint64_field &&
           m_unbounded_sequence_float_field == x.m_unbounded_sequence_float_field &&
           m_unbounded_sequence_double_field == x.m_unbounded_sequence_double_field &&
           m_unbounded_sequence_bool_field == x.m_unbounded_sequence_bool_field &&
           m_unbounded_sequence_enum_field == x.m_unbounded_sequence_enum_field &&
           m_unbounded_sequence_enum2_field == x.m_unbounded_sequence_enum2_field &&
           m_unbounded_sequence_struct_field == x.m_unbounded_sequence_struct_field);
}

bool KeyedCompleteTestType::operator !=(
        const KeyedCompleteTestType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void KeyedCompleteTestType::id(
        int32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
int32_t KeyedCompleteTestType::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
int32_t& KeyedCompleteTestType::id()
{
    return m_id;
}


/*!
 * @brief This function sets a value in member char_field
 * @param _char_field New value for member char_field
 */
void KeyedCompleteTestType::char_field(
        char _char_field)
{
    m_char_field = _char_field;
}

/*!
 * @brief This function returns the value of member char_field
 * @return Value of member char_field
 */
char KeyedCompleteTestType::char_field() const
{
    return m_char_field;
}

/*!
 * @brief This function returns a reference to member char_field
 * @return Reference to member char_field
 */
char& KeyedCompleteTestType::char_field()
{
    return m_char_field;
}


/*!
 * @brief This function sets a value in member uint8_field
 * @param _uint8_field New value for member uint8_field
 */
void KeyedCompleteTestType::uint8_field(
        uint8_t _uint8_field)
{
    m_uint8_field = _uint8_field;
}

/*!
 * @brief This function returns the value of member uint8_field
 * @return Value of member uint8_field
 */
uint8_t KeyedCompleteTestType::uint8_field() const
{
    return m_uint8_field;
}

/*!
 * @brief This function returns a reference to member uint8_field
 * @return Reference to member uint8_field
 */
uint8_t& KeyedCompleteTestType::uint8_field()
{
    return m_uint8_field;
}


/*!
 * @brief This function sets a value in member int16_field
 * @param _int16_field New value for member int16_field
 */
void KeyedCompleteTestType::int16_field(
        int16_t _int16_field)
{
    m_int16_field = _int16_field;
}

/*!
 * @brief This function returns the value of member int16_field
 * @return Value of member int16_field
 */
int16_t KeyedCompleteTestType::int16_field() const
{
    return m_int16_field;
}

/*!
 * @brief This function returns a reference to member int16_field
 * @return Reference to member int16_field
 */
int16_t& KeyedCompleteTestType::int16_field()
{
    return m_int16_field;
}


/*!
 * @brief This function sets a value in member uint16_field
 * @param _uint16_field New value for member uint16_field
 */
void KeyedCompleteTestType::uint16_field(
        uint16_t _uint16_field)
{
    m_uint16_field = _uint16_field;
}

/*!
 * @brief This function returns the value of member uint16_field
 * @return Value of member uint16_field
 */
uint16_t KeyedCompleteTestType::uint16_field() const
{
    return m_uint16_field;
}

/*!
 * @brief This function returns a reference to member uint16_field
 * @return Reference to member uint16_field
 */
uint16_t& KeyedCompleteTestType::uint16_field()
{
    return m_uint16_field;
}


/*!
 * @brief This function sets a value in member int32_field
 * @param _int32_field New value for member int32_field
 */
void KeyedCompleteTestType::int32_field(
        int32_t _int32_field)
{
    m_int32_field = _int32_field;
}

/*!
 * @brief This function returns the value of member int32_field
 * @return Value of member int32_field
 */
int32_t KeyedCompleteTestType::int32_field() const
{
    return m_int32_field;
}

/*!
 * @brief This function returns a reference to member int32_field
 * @return Reference to member int32_field
 */
int32_t& KeyedCompleteTestType::int32_field()
{
    return m_int32_field;
}


/*!
 * @brief This function sets a value in member uint32_field
 * @param _uint32_field New value for member uint32_field
 */
void KeyedCompleteTestType::uint32_field(
        uint32_t _uint32_field)
{
    m_uint32_field = _uint32_field;
}

/*!
 * @brief This function returns the value of member uint32_field
 * @return Value of member uint32_field
 */
uint32_t KeyedCompleteTestType::uint32_field() const
{
    return m_uint32_field;
}

/*!
 * @brief This function returns a reference to member uint32_field
 * @return Reference to member uint32_field
 */
uint32_t& KeyedCompleteTestType::uint32_field()
{
    return m_uint32_field;
}


/*!
 * @brief This function sets a value in member int64_field
 * @param _int64_field New value for member int64_field
 */
void KeyedCompleteTestType::int64_field(
        int64_t _int64_field)
{
    m_int64_field = _int64_field;
}

/*!
 * @brief This function returns the value of member int64_field
 * @return Value of member int64_field
 */
int64_t KeyedCompleteTestType::int64_field() const
{
    return m_int64_field;
}

/*!
 * @brief This function returns a reference to member int64_field
 * @return Reference to member int64_field
 */
int64_t& KeyedCompleteTestType::int64_field()
{
    return m_int64_field;
}


/*!
 * @brief This function sets a value in member uint64_field
 * @param _uint64_field New value for member uint64_field
 */
void KeyedCompleteTestType::uint64_field(
        uint64_t _uint64_field)
{
    m_uint64_field = _uint64_field;
}

/*!
 * @brief This function returns the value of member uint64_field
 * @return Value of member uint64_field
 */
uint64_t KeyedCompleteTestType::uint64_field() const
{
    return m_uint64_field;
}

/*!
 * @brief This function returns a reference to member uint64_field
 * @return Reference to member uint64_field
 */
uint64_t& KeyedCompleteTestType::uint64_field()
{
    return m_uint64_field;
}


/*!
 * @brief This function sets a value in member float_field
 * @param _float_field New value for member float_field
 */
void KeyedCompleteTestType::float_field(
        float _float_field)
{
    m_float_field = _float_field;
}

/*!
 * @brief This function returns the value of member float_field
 * @return Value of member float_field
 */
float KeyedCompleteTestType::float_field() const
{
    return m_float_field;
}

/*!
 * @brief This function returns a reference to member float_field
 * @return Reference to member float_field
 */
float& KeyedCompleteTestType::float_field()
{
    return m_float_field;
}


/*!
 * @brief This function sets a value in member double_field
 * @param _double_field New value for member double_field
 */
void KeyedCompleteTestType::double_field(
        double _double_field)
{
    m_double_field = _double_field;
}

/*!
 * @brief This function returns the value of member double_field
 * @return Value of member double_field
 */
double KeyedCompleteTestType::double_field() const
{
    return m_double_field;
}

/*!
 * @brief This function returns a reference to member double_field
 * @return Reference to member double_field
 */
double& KeyedCompleteTestType::double_field()
{
    return m_double_field;
}


/*!
 * @brief This function sets a value in member bool_field
 * @param _bool_field New value for member bool_field
 */
void KeyedCompleteTestType::bool_field(
        bool _bool_field)
{
    m_bool_field = _bool_field;
}

/*!
 * @brief This function returns the value of member bool_field
 * @return Value of member bool_field
 */
bool KeyedCompleteTestType::bool_field() const
{
    return m_bool_field;
}

/*!
 * @brief This function returns a reference to member bool_field
 * @return Reference to member bool_field
 */
bool& KeyedCompleteTestType::bool_field()
{
    return m_bool_field;
}


/*!
 * @brief This function copies the value in member string_field
 * @param _string_field New value to be copied in member string_field
 */
void KeyedCompleteTestType::string_field(
        const std::string& _string_field)
{
    m_string_field = _string_field;
}

/*!
 * @brief This function moves the value in member string_field
 * @param _string_field New value to be moved in member string_field
 */
void KeyedCompleteTestType::string_field(
        std::string&& _string_field)
{
    m_string_field = std::move(_string_field);
}

/*!
 * @brief This function returns a constant reference to member string_field
 * @return Constant reference to member string_field
 */
const std::string& KeyedCompleteTestType::string_field() const
{
    return m_string_field;
}

/*!
 * @brief This function returns a reference to member string_field
 * @return Reference to member string_field
 */
std::string& KeyedCompleteTestType::string_field()
{
    return m_string_field;
}


/*!
 * @brief This function sets a value in member enum_field
 * @param _enum_field New value for member enum_field
 */
void KeyedCompleteTestType::enum_field(
        Color _enum_field)
{
    m_enum_field = _enum_field;
}

/*!
 * @brief This function returns the value of member enum_field
 * @return Value of member enum_field
 */
Color KeyedCompleteTestType::enum_field() const
{
    return m_enum_field;
}

/*!
 * @brief This function returns a reference to member enum_field
 * @return Reference to member enum_field
 */
Color& KeyedCompleteTestType::enum_field()
{
    return m_enum_field;
}


/*!
 * @brief This function sets a value in member enum2_field
 * @param _enum2_field New value for member enum2_field
 */
void KeyedCompleteTestType::enum2_field(
        Material _enum2_field)
{
    m_enum2_field = _enum2_field;
}

/*!
 * @brief This function returns the value of member enum2_field
 * @return Value of member enum2_field
 */
Material KeyedCompleteTestType::enum2_field() const
{
    return m_enum2_field;
}

/*!
 * @brief This function returns a reference to member enum2_field
 * @return Reference to member enum2_field
 */
Material& KeyedCompleteTestType::enum2_field()
{
    return m_enum2_field;
}


/*!
 * @brief This function copies the value in member struct_field
 * @param _struct_field New value to be copied in member struct_field
 */
void KeyedCompleteTestType::struct_field(
        const StructType& _struct_field)
{
    m_struct_field = _struct_field;
}

/*!
 * @brief This function moves the value in member struct_field
 * @param _struct_field New value to be moved in member struct_field
 */
void KeyedCompleteTestType::struct_field(
        StructType&& _struct_field)
{
    m_struct_field = std::move(_struct_field);
}

/*!
 * @brief This function returns a constant reference to member struct_field
 * @return Constant reference to member struct_field
 */
const StructType& KeyedCompleteTestType::struct_field() const
{
    return m_struct_field;
}

/*!
 * @brief This function returns a reference to member struct_field
 * @return Reference to member struct_field
 */
StructType& KeyedCompleteTestType::struct_field()
{
    return m_struct_field;
}


/*!
 * @brief This function copies the value in member char_opt_field
 * @param _char_opt_field New value to be copied in member char_opt_field
 */
void KeyedCompleteTestType::char_opt_field(
        const eprosima::fastcdr::optional<char>& _char_opt_field)
{
    m_char_opt_field = _char_opt_field;
}

/*!
 * @brief This function moves the value in member char_opt_field
 * @param _char_opt_field New value to be moved in member char_opt_field
 */
void KeyedCompleteTestType::char_opt_field(
        eprosima::fastcdr::optional<char>&& _char_opt_field)
{
    m_char_opt_field = std::move(_char_opt_field);
}

/*!
 * @brief This function returns a constant reference to member char_opt_field
 * @return Constant reference to member char_opt_field
 */
const eprosima::fastcdr::optional<char>& KeyedCompleteTestType::char_opt_field() const
{
    return m_char_opt_field;
}

/*!
 * @brief This function returns a reference to member char_opt_field
 * @return Reference to member char_opt_field
 */
eprosima::fastcdr::optional<char>& KeyedCompleteTestType::char_opt_field()
{
    return m_char_opt_field;
}


/*!
 * @brief This function copies the value in member uint8_opt_field
 * @param _uint8_opt_field New value to be copied in member uint8_opt_field
 */
void KeyedCompleteTestType::uint8_opt_field(
        const eprosima::fastcdr::optional<uint8_t>& _uint8_opt_field)
{
    m_uint8_opt_field = _uint8_opt_field;
}

/*!
 * @brief This function moves the value in member uint8_opt_field
 * @param _uint8_opt_field New value to be moved in member uint8_opt_field
 */
void KeyedCompleteTestType::uint8_opt_field(
        eprosima::fastcdr::optional<uint8_t>&& _uint8_opt_field)
{
    m_uint8_opt_field = std::move(_uint8_opt_field);
}

/*!
 * @brief This function returns a constant reference to member uint8_opt_field
 * @return Constant reference to member uint8_opt_field
 */
const eprosima::fastcdr::optional<uint8_t>& KeyedCompleteTestType::uint8_opt_field() const
{
    return m_uint8_opt_field;
}

/*!
 * @brief This function returns a reference to member uint8_opt_field
 * @return Reference to member uint8_opt_field
 */
eprosima::fastcdr::optional<uint8_t>& KeyedCompleteTestType::uint8_opt_field()
{
    return m_uint8_opt_field;
}


/*!
 * @brief This function copies the value in member int16_opt_field
 * @param _int16_opt_field New value to be copied in member int16_opt_field
 */
void KeyedCompleteTestType::int16_opt_field(
        const eprosima::fastcdr::optional<int16_t>& _int16_opt_field)
{
    m_int16_opt_field = _int16_opt_field;
}

/*!
 * @brief This function moves the value in member int16_opt_field
 * @param _int16_opt_field New value to be moved in member int16_opt_field
 */
void KeyedCompleteTestType::int16_opt_field(
        eprosima::fastcdr::optional<int16_t>&& _int16_opt_field)
{
    m_int16_opt_field = std::move(_int16_opt_field);
}

/*!
 * @brief This function returns a constant reference to member int16_opt_field
 * @return Constant reference to member int16_opt_field
 */
const eprosima::fastcdr::optional<int16_t>& KeyedCompleteTestType::int16_opt_field() const
{
    return m_int16_opt_field;
}

/*!
 * @brief This function returns a reference to member int16_opt_field
 * @return Reference to member int16_opt_field
 */
eprosima::fastcdr::optional<int16_t>& KeyedCompleteTestType::int16_opt_field()
{
    return m_int16_opt_field;
}


/*!
 * @brief This function copies the value in member uint16_opt_field
 * @param _uint16_opt_field New value to be copied in member uint16_opt_field
 */
void KeyedCompleteTestType::uint16_opt_field(
        const eprosima::fastcdr::optional<uint16_t>& _uint16_opt_field)
{
    m_uint16_opt_field = _uint16_opt_field;
}

/*!
 * @brief This function moves the value in member uint16_opt_field
 * @param _uint16_opt_field New value to be moved in member uint16_opt_field
 */
void KeyedCompleteTestType::uint16_opt_field(
        eprosima::fastcdr::optional<uint16_t>&& _uint16_opt_field)
{
    m_uint16_opt_field = std::move(_uint16_opt_field);
}

/*!
 * @brief This function returns a constant reference to member uint16_opt_field
 * @return Constant reference to member uint16_opt_field
 */
const eprosima::fastcdr::optional<uint16_t>& KeyedCompleteTestType::uint16_opt_field() const
{
    return m_uint16_opt_field;
}

/*!
 * @brief This function returns a reference to member uint16_opt_field
 * @return Reference to member uint16_opt_field
 */
eprosima::fastcdr::optional<uint16_t>& KeyedCompleteTestType::uint16_opt_field()
{
    return m_uint16_opt_field;
}


/*!
 * @brief This function copies the value in member int32_opt_field
 * @param _int32_opt_field New value to be copied in member int32_opt_field
 */
void KeyedCompleteTestType::int32_opt_field(
        const eprosima::fastcdr::optional<int32_t>& _int32_opt_field)
{
    m_int32_opt_field = _int32_opt_field;
}

/*!
 * @brief This function moves the value in member int32_opt_field
 * @param _int32_opt_field New value to be moved in member int32_opt_field
 */
void KeyedCompleteTestType::int32_opt_field(
        eprosima::fastcdr::optional<int32_t>&& _int32_opt_field)
{
    m_int32_opt_field = std::move(_int32_opt_field);
}

/*!
 * @brief This function returns a constant reference to member int32_opt_field
 * @return Constant reference to member int32_opt_field
 */
const eprosima::fastcdr::optional<int32_t>& KeyedCompleteTestType::int32_opt_field() const
{
    return m_int32_opt_field;
}

/*!
 * @brief This function returns a reference to member int32_opt_field
 * @return Reference to member int32_opt_field
 */
eprosima::fastcdr::optional<int32_t>& KeyedCompleteTestType::int32_opt_field()
{
    return m_int32_opt_field;
}


/*!
 * @brief This function copies the value in member uint32_opt_field
 * @param _uint32_opt_field New value to be copied in member uint32_opt_field
 */
void KeyedCompleteTestType::uint32_opt_field(
        const eprosima::fastcdr::optional<uint32_t>& _uint32_opt_field)
{
    m_uint32_opt_field = _uint32_opt_field;
}

/*!
 * @brief This function moves the value in member uint32_opt_field
 * @param _uint32_opt_field New value to be moved in member uint32_opt_field
 */
void KeyedCompleteTestType::uint32_opt_field(
        eprosima::fastcdr::optional<uint32_t>&& _uint32_opt_field)
{
    m_uint32_opt_field = std::move(_uint32_opt_field);
}

/*!
 * @brief This function returns a constant reference to member uint32_opt_field
 * @return Constant reference to member uint32_opt_field
 */
const eprosima::fastcdr::optional<uint32_t>& KeyedCompleteTestType::uint32_opt_field() const
{
    return m_uint32_opt_field;
}

/*!
 * @brief This function returns a reference to member uint32_opt_field
 * @return Reference to member uint32_opt_field
 */
eprosima::fastcdr::optional<uint32_t>& KeyedCompleteTestType::uint32_opt_field()
{
    return m_uint32_opt_field;
}


/*!
 * @brief This function copies the value in member int64_opt_field
 * @param _int64_opt_field New value to be copied in member int64_opt_field
 */
void KeyedCompleteTestType::int64_opt_field(
        const eprosima::fastcdr::optional<int64_t>& _int64_opt_field)
{
    m_int64_opt_field = _int64_opt_field;
}

/*!
 * @brief This function moves the value in member int64_opt_field
 * @param _int64_opt_field New value to be moved in member int64_opt_field
 */
void KeyedCompleteTestType::int64_opt_field(
        eprosima::fastcdr::optional<int64_t>&& _int64_opt_field)
{
    m_int64_opt_field = std::move(_int64_opt_field);
}

/*!
 * @brief This function returns a constant reference to member int64_opt_field
 * @return Constant reference to member int64_opt_field
 */
const eprosima::fastcdr::optional<int64_t>& KeyedCompleteTestType::int64_opt_field() const
{
    return m_int64_opt_field;
}

/*!
 * @brief This function returns a reference to member int64_opt_field
 * @return Reference to member int64_opt_field
 */
eprosima::fastcdr::optional<int64_t>& KeyedCompleteTestType::int64_opt_field()
{
    return m_int64_opt_field;
}


/*!
 * @brief This function copies the value in member uint64_opt_field
 * @param _uint64_opt_field New value to be copied in member uint64_opt_field
 */
void KeyedCompleteTestType::uint64_opt_field(
        const eprosima::fastcdr::optional<uint64_t>& _uint64_opt_field)
{
    m_uint64_opt_field = _uint64_opt_field;
}

/*!
 * @brief This function moves the value in member uint64_opt_field
 * @param _uint64_opt_field New value to be moved in member uint64_opt_field
 */
void KeyedCompleteTestType::uint64_opt_field(
        eprosima::fastcdr::optional<uint64_t>&& _uint64_opt_field)
{
    m_uint64_opt_field = std::move(_uint64_opt_field);
}

/*!
 * @brief This function returns a constant reference to member uint64_opt_field
 * @return Constant reference to member uint64_opt_field
 */
const eprosima::fastcdr::optional<uint64_t>& KeyedCompleteTestType::uint64_opt_field() const
{
    return m_uint64_opt_field;
}

/*!
 * @brief This function returns a reference to member uint64_opt_field
 * @return Reference to member uint64_opt_field
 */
eprosima::fastcdr::optional<uint64_t>& KeyedCompleteTestType::uint64_opt_field()
{
    return m_uint64_opt_field;
}


/*!
 * @brief This function copies the value in member float_opt_field
 * @param _float_opt_field New value to be copied in member float_opt_field
 */
void KeyedCompleteTestType::float_opt_field(
        const eprosima::fastcdr::optional<float>& _float_opt_field)
{
    m_float_opt_field = _float_opt_field;
}

/*!
 * @brief This function moves the value in member float_opt_field
 * @param _float_opt_field New value to be moved in member float_opt_field
 */
void KeyedCompleteTestType::float_opt_field(
        eprosima::fastcdr::optional<float>&& _float_opt_field)
{
    m_float_opt_field = std::move(_float_opt_field);
}

/*!
 * @brief This function returns a constant reference to member float_opt_field
 * @return Constant reference to member float_opt_field
 */
const eprosima::fastcdr::optional<float>& KeyedCompleteTestType::float_opt_field() const
{
    return m_float_opt_field;
}

/*!
 * @brief This function returns a reference to member float_opt_field
 * @return Reference to member float_opt_field
 */
eprosima::fastcdr::optional<float>& KeyedCompleteTestType::float_opt_field()
{
    return m_float_opt_field;
}


/*!
 * @brief This function copies the value in member double_opt_field
 * @param _double_opt_field New value to be copied in member double_opt_field
 */
void KeyedCompleteTestType::double_opt_field(
        const eprosima::fastcdr::optional<double>& _double_opt_field)
{
    m_double_opt_field = _double_opt_field;
}

/*!
 * @brief This function moves the value in member double_opt_field
 * @param _double_opt_field New value to be moved in member double_opt_field
 */
void KeyedCompleteTestType::double_opt_field(
        eprosima::fastcdr::optional<double>&& _double_opt_field)
{
    m_double_opt_field = std::move(_double_opt_field);
}

/*!
 * @brief This function returns a constant reference to member double_opt_field
 * @return Constant reference to member double_opt_field
 */
const eprosima::fastcdr::optional<double>& KeyedCompleteTestType::double_opt_field() const
{
    return m_double_opt_field;
}

/*!
 * @brief This function returns a reference to member double_opt_field
 * @return Reference to member double_opt_field
 */
eprosima::fastcdr::optional<double>& KeyedCompleteTestType::double_opt_field()
{
    return m_double_opt_field;
}


/*!
 * @brief This function copies the value in member bool_opt_field
 * @param _bool_opt_field New value to be copied in member bool_opt_field
 */
void KeyedCompleteTestType::bool_opt_field(
        const eprosima::fastcdr::optional<bool>& _bool_opt_field)
{
    m_bool_opt_field = _bool_opt_field;
}

/*!
 * @brief This function moves the value in member bool_opt_field
 * @param _bool_opt_field New value to be moved in member bool_opt_field
 */
void KeyedCompleteTestType::bool_opt_field(
        eprosima::fastcdr::optional<bool>&& _bool_opt_field)
{
    m_bool_opt_field = std::move(_bool_opt_field);
}

/*!
 * @brief This function returns a constant reference to member bool_opt_field
 * @return Constant reference to member bool_opt_field
 */
const eprosima::fastcdr::optional<bool>& KeyedCompleteTestType::bool_opt_field() const
{
    return m_bool_opt_field;
}

/*!
 * @brief This function returns a reference to member bool_opt_field
 * @return Reference to member bool_opt_field
 */
eprosima::fastcdr::optional<bool>& KeyedCompleteTestType::bool_opt_field()
{
    return m_bool_opt_field;
}


/*!
 * @brief This function copies the value in member string_opt_field
 * @param _string_opt_field New value to be copied in member string_opt_field
 */
void KeyedCompleteTestType::string_opt_field(
        const eprosima::fastcdr::optional<std::string>& _string_opt_field)
{
    m_string_opt_field = _string_opt_field;
}

/*!
 * @brief This function moves the value in member string_opt_field
 * @param _string_opt_field New value to be moved in member string_opt_field
 */
void KeyedCompleteTestType::string_opt_field(
        eprosima::fastcdr::optional<std::string>&& _string_opt_field)
{
    m_string_opt_field = std::move(_string_opt_field);
}

/*!
 * @brief This function returns a constant reference to member string_opt_field
 * @return Constant reference to member string_opt_field
 */
const eprosima::fastcdr::optional<std::string>& KeyedCompleteTestType::string_opt_field() const
{
    return m_string_opt_field;
}

/*!
 * @brief This function returns a reference to member string_opt_field
 * @return Reference to member string_opt_field
 */
eprosima::fastcdr::optional<std::string>& KeyedCompleteTestType::string_opt_field()
{
    return m_string_opt_field;
}


/*!
 * @brief This function copies the value in member enum_opt_field
 * @param _enum_opt_field New value to be copied in member enum_opt_field
 */
void KeyedCompleteTestType::enum_opt_field(
        const eprosima::fastcdr::optional<Color>& _enum_opt_field)
{
    m_enum_opt_field = _enum_opt_field;
}

/*!
 * @brief This function moves the value in member enum_opt_field
 * @param _enum_opt_field New value to be moved in member enum_opt_field
 */
void KeyedCompleteTestType::enum_opt_field(
        eprosima::fastcdr::optional<Color>&& _enum_opt_field)
{
    m_enum_opt_field = std::move(_enum_opt_field);
}

/*!
 * @brief This function returns a constant reference to member enum_opt_field
 * @return Constant reference to member enum_opt_field
 */
const eprosima::fastcdr::optional<Color>& KeyedCompleteTestType::enum_opt_field() const
{
    return m_enum_opt_field;
}

/*!
 * @brief This function returns a reference to member enum_opt_field
 * @return Reference to member enum_opt_field
 */
eprosima::fastcdr::optional<Color>& KeyedCompleteTestType::enum_opt_field()
{
    return m_enum_opt_field;
}


/*!
 * @brief This function copies the value in member enum2_opt_field
 * @param _enum2_opt_field New value to be copied in member enum2_opt_field
 */
void KeyedCompleteTestType::enum2_opt_field(
        const eprosima::fastcdr::optional<Material>& _enum2_opt_field)
{
    m_enum2_opt_field = _enum2_opt_field;
}

/*!
 * @brief This function moves the value in member enum2_opt_field
 * @param _enum2_opt_field New value to be moved in member enum2_opt_field
 */
void KeyedCompleteTestType::enum2_opt_field(
        eprosima::fastcdr::optional<Material>&& _enum2_opt_field)
{
    m_enum2_opt_field = std::move(_enum2_opt_field);
}

/*!
 * @brief This function returns a constant reference to member enum2_opt_field
 * @return Constant reference to member enum2_opt_field
 */
const eprosima::fastcdr::optional<Material>& KeyedCompleteTestType::enum2_opt_field() const
{
    return m_enum2_opt_field;
}

/*!
 * @brief This function returns a reference to member enum2_opt_field
 * @return Reference to member enum2_opt_field
 */
eprosima::fastcdr::optional<Material>& KeyedCompleteTestType::enum2_opt_field()
{
    return m_enum2_opt_field;
}


/*!
 * @brief This function copies the value in member struct_opt_field
 * @param _struct_opt_field New value to be copied in member struct_opt_field
 */
void KeyedCompleteTestType::struct_opt_field(
        const eprosima::fastcdr::optional<StructType>& _struct_opt_field)
{
    m_struct_opt_field = _struct_opt_field;
}

/*!
 * @brief This function moves the value in member struct_opt_field
 * @param _struct_opt_field New value to be moved in member struct_opt_field
 */
void KeyedCompleteTestType::struct_opt_field(
        eprosima::fastcdr::optional<StructType>&& _struct_opt_field)
{
    m_struct_opt_field = std::move(_struct_opt_field);
}

/*!
 * @brief This function returns a constant reference to member struct_opt_field
 * @return Constant reference to member struct_opt_field
 */
const eprosima::fastcdr::optional<StructType>& KeyedCompleteTestType::struct_opt_field() const
{
    return m_struct_opt_field;
}

/*!
 * @brief This function returns a reference to member struct_opt_field
 * @return Reference to member struct_opt_field
 */
eprosima::fastcdr::optional<StructType>& KeyedCompleteTestType::struct_opt_field()
{
    return m_struct_opt_field;
}


/*!
 * @brief This function copies the value in member array_char_field
 * @param _array_char_field New value to be copied in member array_char_field
 */
void KeyedCompleteTestType::array_char_field(
        const std::array<char, max_array_size>& _array_char_field)
{
    m_array_char_field = _array_char_field;
}

/*!
 * @brief This function moves the value in member array_char_field
 * @param _array_char_field New value to be moved in member array_char_field
 */
void KeyedCompleteTestType::array_char_field(
        std::array<char, max_array_size>&& _array_char_field)
{
    m_array_char_field = std::move(_array_char_field);
}

/*!
 * @brief This function returns a constant reference to member array_char_field
 * @return Constant reference to member array_char_field
 */
const std::array<char, max_array_size>& KeyedCompleteTestType::array_char_field() const
{
    return m_array_char_field;
}

/*!
 * @brief This function returns a reference to member array_char_field
 * @return Reference to member array_char_field
 */
std::array<char, max_array_size>& KeyedCompleteTestType::array_char_field()
{
    return m_array_char_field;
}


/*!
 * @brief This function copies the value in member array_uint8_field
 * @param _array_uint8_field New value to be copied in member array_uint8_field
 */
void KeyedCompleteTestType::array_uint8_field(
        const std::array<uint8_t, max_array_size>& _array_uint8_field)
{
    m_array_uint8_field = _array_uint8_field;
}

/*!
 * @brief This function moves the value in member array_uint8_field
 * @param _array_uint8_field New value to be moved in member array_uint8_field
 */
void KeyedCompleteTestType::array_uint8_field(
        std::array<uint8_t, max_array_size>&& _array_uint8_field)
{
    m_array_uint8_field = std::move(_array_uint8_field);
}

/*!
 * @brief This function returns a constant reference to member array_uint8_field
 * @return Constant reference to member array_uint8_field
 */
const std::array<uint8_t, max_array_size>& KeyedCompleteTestType::array_uint8_field() const
{
    return m_array_uint8_field;
}

/*!
 * @brief This function returns a reference to member array_uint8_field
 * @return Reference to member array_uint8_field
 */
std::array<uint8_t, max_array_size>& KeyedCompleteTestType::array_uint8_field()
{
    return m_array_uint8_field;
}


/*!
 * @brief This function copies the value in member array_int16_field
 * @param _array_int16_field New value to be copied in member array_int16_field
 */
void KeyedCompleteTestType::array_int16_field(
        const std::array<int16_t, max_array_size>& _array_int16_field)
{
    m_array_int16_field = _array_int16_field;
}

/*!
 * @brief This function moves the value in member array_int16_field
 * @param _array_int16_field New value to be moved in member array_int16_field
 */
void KeyedCompleteTestType::array_int16_field(
        std::array<int16_t, max_array_size>&& _array_int16_field)
{
    m_array_int16_field = std::move(_array_int16_field);
}

/*!
 * @brief This function returns a constant reference to member array_int16_field
 * @return Constant reference to member array_int16_field
 */
const std::array<int16_t, max_array_size>& KeyedCompleteTestType::array_int16_field() const
{
    return m_array_int16_field;
}

/*!
 * @brief This function returns a reference to member array_int16_field
 * @return Reference to member array_int16_field
 */
std::array<int16_t, max_array_size>& KeyedCompleteTestType::array_int16_field()
{
    return m_array_int16_field;
}


/*!
 * @brief This function copies the value in member array_uint16_field
 * @param _array_uint16_field New value to be copied in member array_uint16_field
 */
void KeyedCompleteTestType::array_uint16_field(
        const std::array<uint16_t, max_array_size>& _array_uint16_field)
{
    m_array_uint16_field = _array_uint16_field;
}

/*!
 * @brief This function moves the value in member array_uint16_field
 * @param _array_uint16_field New value to be moved in member array_uint16_field
 */
void KeyedCompleteTestType::array_uint16_field(
        std::array<uint16_t, max_array_size>&& _array_uint16_field)
{
    m_array_uint16_field = std::move(_array_uint16_field);
}

/*!
 * @brief This function returns a constant reference to member array_uint16_field
 * @return Constant reference to member array_uint16_field
 */
const std::array<uint16_t, max_array_size>& KeyedCompleteTestType::array_uint16_field() const
{
    return m_array_uint16_field;
}

/*!
 * @brief This function returns a reference to member array_uint16_field
 * @return Reference to member array_uint16_field
 */
std::array<uint16_t, max_array_size>& KeyedCompleteTestType::array_uint16_field()
{
    return m_array_uint16_field;
}


/*!
 * @brief This function copies the value in member array_int32_field
 * @param _array_int32_field New value to be copied in member array_int32_field
 */
void KeyedCompleteTestType::array_int32_field(
        const std::array<int32_t, max_array_size>& _array_int32_field)
{
    m_array_int32_field = _array_int32_field;
}

/*!
 * @brief This function moves the value in member array_int32_field
 * @param _array_int32_field New value to be moved in member array_int32_field
 */
void KeyedCompleteTestType::array_int32_field(
        std::array<int32_t, max_array_size>&& _array_int32_field)
{
    m_array_int32_field = std::move(_array_int32_field);
}

/*!
 * @brief This function returns a constant reference to member array_int32_field
 * @return Constant reference to member array_int32_field
 */
const std::array<int32_t, max_array_size>& KeyedCompleteTestType::array_int32_field() const
{
    return m_array_int32_field;
}

/*!
 * @brief This function returns a reference to member array_int32_field
 * @return Reference to member array_int32_field
 */
std::array<int32_t, max_array_size>& KeyedCompleteTestType::array_int32_field()
{
    return m_array_int32_field;
}


/*!
 * @brief This function copies the value in member array_uint32_field
 * @param _array_uint32_field New value to be copied in member array_uint32_field
 */
void KeyedCompleteTestType::array_uint32_field(
        const std::array<uint32_t, max_array_size>& _array_uint32_field)
{
    m_array_uint32_field = _array_uint32_field;
}

/*!
 * @brief This function moves the value in member array_uint32_field
 * @param _array_uint32_field New value to be moved in member array_uint32_field
 */
void KeyedCompleteTestType::array_uint32_field(
        std::array<uint32_t, max_array_size>&& _array_uint32_field)
{
    m_array_uint32_field = std::move(_array_uint32_field);
}

/*!
 * @brief This function returns a constant reference to member array_uint32_field
 * @return Constant reference to member array_uint32_field
 */
const std::array<uint32_t, max_array_size>& KeyedCompleteTestType::array_uint32_field() const
{
    return m_array_uint32_field;
}

/*!
 * @brief This function returns a reference to member array_uint32_field
 * @return Reference to member array_uint32_field
 */
std::array<uint32_t, max_array_size>& KeyedCompleteTestType::array_uint32_field()
{
    return m_array_uint32_field;
}


/*!
 * @brief This function copies the value in member array_int64_field
 * @param _array_int64_field New value to be copied in member array_int64_field
 */
void KeyedCompleteTestType::array_int64_field(
        const std::array<int64_t, max_array_size>& _array_int64_field)
{
    m_array_int64_field = _array_int64_field;
}

/*!
 * @brief This function moves the value in member array_int64_field
 * @param _array_int64_field New value to be moved in member array_int64_field
 */
void KeyedCompleteTestType::array_int64_field(
        std::array<int64_t, max_array_size>&& _array_int64_field)
{
    m_array_int64_field = std::move(_array_int64_field);
}

/*!
 * @brief This function returns a constant reference to member array_int64_field
 * @return Constant reference to member array_int64_field
 */
const std::array<int64_t, max_array_size>& KeyedCompleteTestType::array_int64_field() const
{
    return m_array_int64_field;
}

/*!
 * @brief This function returns a reference to member array_int64_field
 * @return Reference to member array_int64_field
 */
std::array<int64_t, max_array_size>& KeyedCompleteTestType::array_int64_field()
{
    return m_array_int64_field;
}


/*!
 * @brief This function copies the value in member array_uint64_field
 * @param _array_uint64_field New value to be copied in member array_uint64_field
 */
void KeyedCompleteTestType::array_uint64_field(
        const std::array<uint64_t, max_array_size>& _array_uint64_field)
{
    m_array_uint64_field = _array_uint64_field;
}

/*!
 * @brief This function moves the value in member array_uint64_field
 * @param _array_uint64_field New value to be moved in member array_uint64_field
 */
void KeyedCompleteTestType::array_uint64_field(
        std::array<uint64_t, max_array_size>&& _array_uint64_field)
{
    m_array_uint64_field = std::move(_array_uint64_field);
}

/*!
 * @brief This function returns a constant reference to member array_uint64_field
 * @return Constant reference to member array_uint64_field
 */
const std::array<uint64_t, max_array_size>& KeyedCompleteTestType::array_uint64_field() const
{
    return m_array_uint64_field;
}

/*!
 * @brief This function returns a reference to member array_uint64_field
 * @return Reference to member array_uint64_field
 */
std::array<uint64_t, max_array_size>& KeyedCompleteTestType::array_uint64_field()
{
    return m_array_uint64_field;
}


/*!
 * @brief This function copies the value in member array_float_field
 * @param _array_float_field New value to be copied in member array_float_field
 */
void KeyedCompleteTestType::array_float_field(
        const std::array<float, max_array_size>& _array_float_field)
{
    m_array_float_field = _array_float_field;
}

/*!
 * @brief This function moves the value in member array_float_field
 * @param _array_float_field New value to be moved in member array_float_field
 */
void KeyedCompleteTestType::array_float_field(
        std::array<float, max_array_size>&& _array_float_field)
{
    m_array_float_field = std::move(_array_float_field);
}

/*!
 * @brief This function returns a constant reference to member array_float_field
 * @return Constant reference to member array_float_field
 */
const std::array<float, max_array_size>& KeyedCompleteTestType::array_float_field() const
{
    return m_array_float_field;
}

/*!
 * @brief This function returns a reference to member array_float_field
 * @return Reference to member array_float_field
 */
std::array<float, max_array_size>& KeyedCompleteTestType::array_float_field()
{
    return m_array_float_field;
}


/*!
 * @brief This function copies the value in member array_double_field
 * @param _array_double_field New value to be copied in member array_double_field
 */
void KeyedCompleteTestType::array_double_field(
        const std::array<double, max_array_size>& _array_double_field)
{
    m_array_double_field = _array_double_field;
}

/*!
 * @brief This function moves the value in member array_double_field
 * @param _array_double_field New value to be moved in member array_double_field
 */
void KeyedCompleteTestType::array_double_field(
        std::array<double, max_array_size>&& _array_double_field)
{
    m_array_double_field = std::move(_array_double_field);
}

/*!
 * @brief This function returns a constant reference to member array_double_field
 * @return Constant reference to member array_double_field
 */
const std::array<double, max_array_size>& KeyedCompleteTestType::array_double_field() const
{
    return m_array_double_field;
}

/*!
 * @brief This function returns a reference to member array_double_field
 * @return Reference to member array_double_field
 */
std::array<double, max_array_size>& KeyedCompleteTestType::array_double_field()
{
    return m_array_double_field;
}


/*!
 * @brief This function copies the value in member array_bool_field
 * @param _array_bool_field New value to be copied in member array_bool_field
 */
void KeyedCompleteTestType::array_bool_field(
        const std::array<bool, max_array_size>& _array_bool_field)
{
    m_array_bool_field = _array_bool_field;
}

/*!
 * @brief This function moves the value in member array_bool_field
 * @param _array_bool_field New value to be moved in member array_bool_field
 */
void KeyedCompleteTestType::array_bool_field(
        std::array<bool, max_array_size>&& _array_bool_field)
{
    m_array_bool_field = std::move(_array_bool_field);
}

/*!
 * @brief This function returns a constant reference to member array_bool_field
 * @return Constant reference to member array_bool_field
 */
const std::array<bool, max_array_size>& KeyedCompleteTestType::array_bool_field() const
{
    return m_array_bool_field;
}

/*!
 * @brief This function returns a reference to member array_bool_field
 * @return Reference to member array_bool_field
 */
std::array<bool, max_array_size>& KeyedCompleteTestType::array_bool_field()
{
    return m_array_bool_field;
}


/*!
 * @brief This function copies the value in member array_enum_field
 * @param _array_enum_field New value to be copied in member array_enum_field
 */
void KeyedCompleteTestType::array_enum_field(
        const std::array<Color, max_array_size>& _array_enum_field)
{
    m_array_enum_field = _array_enum_field;
}

/*!
 * @brief This function moves the value in member array_enum_field
 * @param _array_enum_field New value to be moved in member array_enum_field
 */
void KeyedCompleteTestType::array_enum_field(
        std::array<Color, max_array_size>&& _array_enum_field)
{
    m_array_enum_field = std::move(_array_enum_field);
}

/*!
 * @brief This function returns a constant reference to member array_enum_field
 * @return Constant reference to member array_enum_field
 */
const std::array<Color, max_array_size>& KeyedCompleteTestType::array_enum_field() const
{
    return m_array_enum_field;
}

/*!
 * @brief This function returns a reference to member array_enum_field
 * @return Reference to member array_enum_field
 */
std::array<Color, max_array_size>& KeyedCompleteTestType::array_enum_field()
{
    return m_array_enum_field;
}


/*!
 * @brief This function copies the value in member array_enum2_field
 * @param _array_enum2_field New value to be copied in member array_enum2_field
 */
void KeyedCompleteTestType::array_enum2_field(
        const std::array<Material, max_array_size>& _array_enum2_field)
{
    m_array_enum2_field = _array_enum2_field;
}

/*!
 * @brief This function moves the value in member array_enum2_field
 * @param _array_enum2_field New value to be moved in member array_enum2_field
 */
void KeyedCompleteTestType::array_enum2_field(
        std::array<Material, max_array_size>&& _array_enum2_field)
{
    m_array_enum2_field = std::move(_array_enum2_field);
}

/*!
 * @brief This function returns a constant reference to member array_enum2_field
 * @return Constant reference to member array_enum2_field
 */
const std::array<Material, max_array_size>& KeyedCompleteTestType::array_enum2_field() const
{
    return m_array_enum2_field;
}

/*!
 * @brief This function returns a reference to member array_enum2_field
 * @return Reference to member array_enum2_field
 */
std::array<Material, max_array_size>& KeyedCompleteTestType::array_enum2_field()
{
    return m_array_enum2_field;
}


/*!
 * @brief This function copies the value in member array_struct_field
 * @param _array_struct_field New value to be copied in member array_struct_field
 */
void KeyedCompleteTestType::array_struct_field(
        const std::array<StructType, max_array_size>& _array_struct_field)
{
    m_array_struct_field = _array_struct_field;
}

/*!
 * @brief This function moves the value in member array_struct_field
 * @param _array_struct_field New value to be moved in member array_struct_field
 */
void KeyedCompleteTestType::array_struct_field(
        std::array<StructType, max_array_size>&& _array_struct_field)
{
    m_array_struct_field = std::move(_array_struct_field);
}

/*!
 * @brief This function returns a constant reference to member array_struct_field
 * @return Constant reference to member array_struct_field
 */
const std::array<StructType, max_array_size>& KeyedCompleteTestType::array_struct_field() const
{
    return m_array_struct_field;
}

/*!
 * @brief This function returns a reference to member array_struct_field
 * @return Reference to member array_struct_field
 */
std::array<StructType, max_array_size>& KeyedCompleteTestType::array_struct_field()
{
    return m_array_struct_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_char_field
 * @param _bounded_sequence_char_field New value to be copied in member bounded_sequence_char_field
 */
void KeyedCompleteTestType::bounded_sequence_char_field(
        const std::vector<char>& _bounded_sequence_char_field)
{
    m_bounded_sequence_char_field = _bounded_sequence_char_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_char_field
 * @param _bounded_sequence_char_field New value to be moved in member bounded_sequence_char_field
 */
void KeyedCompleteTestType::bounded_sequence_char_field(
        std::vector<char>&& _bounded_sequence_char_field)
{
    m_bounded_sequence_char_field = std::move(_bounded_sequence_char_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_char_field
 * @return Constant reference to member bounded_sequence_char_field
 */
const std::vector<char>& KeyedCompleteTestType::bounded_sequence_char_field() const
{
    return m_bounded_sequence_char_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_char_field
 * @return Reference to member bounded_sequence_char_field
 */
std::vector<char>& KeyedCompleteTestType::bounded_sequence_char_field()
{
    return m_bounded_sequence_char_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_uint8_field
 * @param _bounded_sequence_uint8_field New value to be copied in member bounded_sequence_uint8_field
 */
void KeyedCompleteTestType::bounded_sequence_uint8_field(
        const std::vector<uint8_t>& _bounded_sequence_uint8_field)
{
    m_bounded_sequence_uint8_field = _bounded_sequence_uint8_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_uint8_field
 * @param _bounded_sequence_uint8_field New value to be moved in member bounded_sequence_uint8_field
 */
void KeyedCompleteTestType::bounded_sequence_uint8_field(
        std::vector<uint8_t>&& _bounded_sequence_uint8_field)
{
    m_bounded_sequence_uint8_field = std::move(_bounded_sequence_uint8_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_uint8_field
 * @return Constant reference to member bounded_sequence_uint8_field
 */
const std::vector<uint8_t>& KeyedCompleteTestType::bounded_sequence_uint8_field() const
{
    return m_bounded_sequence_uint8_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_uint8_field
 * @return Reference to member bounded_sequence_uint8_field
 */
std::vector<uint8_t>& KeyedCompleteTestType::bounded_sequence_uint8_field()
{
    return m_bounded_sequence_uint8_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_int16_field
 * @param _bounded_sequence_int16_field New value to be copied in member bounded_sequence_int16_field
 */
void KeyedCompleteTestType::bounded_sequence_int16_field(
        const std::vector<int16_t>& _bounded_sequence_int16_field)
{
    m_bounded_sequence_int16_field = _bounded_sequence_int16_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_int16_field
 * @param _bounded_sequence_int16_field New value to be moved in member bounded_sequence_int16_field
 */
void KeyedCompleteTestType::bounded_sequence_int16_field(
        std::vector<int16_t>&& _bounded_sequence_int16_field)
{
    m_bounded_sequence_int16_field = std::move(_bounded_sequence_int16_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_int16_field
 * @return Constant reference to member bounded_sequence_int16_field
 */
const std::vector<int16_t>& KeyedCompleteTestType::bounded_sequence_int16_field() const
{
    return m_bounded_sequence_int16_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_int16_field
 * @return Reference to member bounded_sequence_int16_field
 */
std::vector<int16_t>& KeyedCompleteTestType::bounded_sequence_int16_field()
{
    return m_bounded_sequence_int16_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_uint16_field
 * @param _bounded_sequence_uint16_field New value to be copied in member bounded_sequence_uint16_field
 */
void KeyedCompleteTestType::bounded_sequence_uint16_field(
        const std::vector<uint16_t>& _bounded_sequence_uint16_field)
{
    m_bounded_sequence_uint16_field = _bounded_sequence_uint16_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_uint16_field
 * @param _bounded_sequence_uint16_field New value to be moved in member bounded_sequence_uint16_field
 */
void KeyedCompleteTestType::bounded_sequence_uint16_field(
        std::vector<uint16_t>&& _bounded_sequence_uint16_field)
{
    m_bounded_sequence_uint16_field = std::move(_bounded_sequence_uint16_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_uint16_field
 * @return Constant reference to member bounded_sequence_uint16_field
 */
const std::vector<uint16_t>& KeyedCompleteTestType::bounded_sequence_uint16_field() const
{
    return m_bounded_sequence_uint16_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_uint16_field
 * @return Reference to member bounded_sequence_uint16_field
 */
std::vector<uint16_t>& KeyedCompleteTestType::bounded_sequence_uint16_field()
{
    return m_bounded_sequence_uint16_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_int32_field
 * @param _bounded_sequence_int32_field New value to be copied in member bounded_sequence_int32_field
 */
void KeyedCompleteTestType::bounded_sequence_int32_field(
        const std::vector<int32_t>& _bounded_sequence_int32_field)
{
    m_bounded_sequence_int32_field = _bounded_sequence_int32_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_int32_field
 * @param _bounded_sequence_int32_field New value to be moved in member bounded_sequence_int32_field
 */
void KeyedCompleteTestType::bounded_sequence_int32_field(
        std::vector<int32_t>&& _bounded_sequence_int32_field)
{
    m_bounded_sequence_int32_field = std::move(_bounded_sequence_int32_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_int32_field
 * @return Constant reference to member bounded_sequence_int32_field
 */
const std::vector<int32_t>& KeyedCompleteTestType::bounded_sequence_int32_field() const
{
    return m_bounded_sequence_int32_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_int32_field
 * @return Reference to member bounded_sequence_int32_field
 */
std::vector<int32_t>& KeyedCompleteTestType::bounded_sequence_int32_field()
{
    return m_bounded_sequence_int32_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_uint32_field
 * @param _bounded_sequence_uint32_field New value to be copied in member bounded_sequence_uint32_field
 */
void KeyedCompleteTestType::bounded_sequence_uint32_field(
        const std::vector<uint32_t>& _bounded_sequence_uint32_field)
{
    m_bounded_sequence_uint32_field = _bounded_sequence_uint32_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_uint32_field
 * @param _bounded_sequence_uint32_field New value to be moved in member bounded_sequence_uint32_field
 */
void KeyedCompleteTestType::bounded_sequence_uint32_field(
        std::vector<uint32_t>&& _bounded_sequence_uint32_field)
{
    m_bounded_sequence_uint32_field = std::move(_bounded_sequence_uint32_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_uint32_field
 * @return Constant reference to member bounded_sequence_uint32_field
 */
const std::vector<uint32_t>& KeyedCompleteTestType::bounded_sequence_uint32_field() const
{
    return m_bounded_sequence_uint32_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_uint32_field
 * @return Reference to member bounded_sequence_uint32_field
 */
std::vector<uint32_t>& KeyedCompleteTestType::bounded_sequence_uint32_field()
{
    return m_bounded_sequence_uint32_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_int64_field
 * @param _bounded_sequence_int64_field New value to be copied in member bounded_sequence_int64_field
 */
void KeyedCompleteTestType::bounded_sequence_int64_field(
        const std::vector<int64_t>& _bounded_sequence_int64_field)
{
    m_bounded_sequence_int64_field = _bounded_sequence_int64_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_int64_field
 * @param _bounded_sequence_int64_field New value to be moved in member bounded_sequence_int64_field
 */
void KeyedCompleteTestType::bounded_sequence_int64_field(
        std::vector<int64_t>&& _bounded_sequence_int64_field)
{
    m_bounded_sequence_int64_field = std::move(_bounded_sequence_int64_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_int64_field
 * @return Constant reference to member bounded_sequence_int64_field
 */
const std::vector<int64_t>& KeyedCompleteTestType::bounded_sequence_int64_field() const
{
    return m_bounded_sequence_int64_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_int64_field
 * @return Reference to member bounded_sequence_int64_field
 */
std::vector<int64_t>& KeyedCompleteTestType::bounded_sequence_int64_field()
{
    return m_bounded_sequence_int64_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_uint64_field
 * @param _bounded_sequence_uint64_field New value to be copied in member bounded_sequence_uint64_field
 */
void KeyedCompleteTestType::bounded_sequence_uint64_field(
        const std::vector<uint64_t>& _bounded_sequence_uint64_field)
{
    m_bounded_sequence_uint64_field = _bounded_sequence_uint64_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_uint64_field
 * @param _bounded_sequence_uint64_field New value to be moved in member bounded_sequence_uint64_field
 */
void KeyedCompleteTestType::bounded_sequence_uint64_field(
        std::vector<uint64_t>&& _bounded_sequence_uint64_field)
{
    m_bounded_sequence_uint64_field = std::move(_bounded_sequence_uint64_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_uint64_field
 * @return Constant reference to member bounded_sequence_uint64_field
 */
const std::vector<uint64_t>& KeyedCompleteTestType::bounded_sequence_uint64_field() const
{
    return m_bounded_sequence_uint64_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_uint64_field
 * @return Reference to member bounded_sequence_uint64_field
 */
std::vector<uint64_t>& KeyedCompleteTestType::bounded_sequence_uint64_field()
{
    return m_bounded_sequence_uint64_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_float_field
 * @param _bounded_sequence_float_field New value to be copied in member bounded_sequence_float_field
 */
void KeyedCompleteTestType::bounded_sequence_float_field(
        const std::vector<float>& _bounded_sequence_float_field)
{
    m_bounded_sequence_float_field = _bounded_sequence_float_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_float_field
 * @param _bounded_sequence_float_field New value to be moved in member bounded_sequence_float_field
 */
void KeyedCompleteTestType::bounded_sequence_float_field(
        std::vector<float>&& _bounded_sequence_float_field)
{
    m_bounded_sequence_float_field = std::move(_bounded_sequence_float_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_float_field
 * @return Constant reference to member bounded_sequence_float_field
 */
const std::vector<float>& KeyedCompleteTestType::bounded_sequence_float_field() const
{
    return m_bounded_sequence_float_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_float_field
 * @return Reference to member bounded_sequence_float_field
 */
std::vector<float>& KeyedCompleteTestType::bounded_sequence_float_field()
{
    return m_bounded_sequence_float_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_double_field
 * @param _bounded_sequence_double_field New value to be copied in member bounded_sequence_double_field
 */
void KeyedCompleteTestType::bounded_sequence_double_field(
        const std::vector<double>& _bounded_sequence_double_field)
{
    m_bounded_sequence_double_field = _bounded_sequence_double_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_double_field
 * @param _bounded_sequence_double_field New value to be moved in member bounded_sequence_double_field
 */
void KeyedCompleteTestType::bounded_sequence_double_field(
        std::vector<double>&& _bounded_sequence_double_field)
{
    m_bounded_sequence_double_field = std::move(_bounded_sequence_double_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_double_field
 * @return Constant reference to member bounded_sequence_double_field
 */
const std::vector<double>& KeyedCompleteTestType::bounded_sequence_double_field() const
{
    return m_bounded_sequence_double_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_double_field
 * @return Reference to member bounded_sequence_double_field
 */
std::vector<double>& KeyedCompleteTestType::bounded_sequence_double_field()
{
    return m_bounded_sequence_double_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_bool_field
 * @param _bounded_sequence_bool_field New value to be copied in member bounded_sequence_bool_field
 */
void KeyedCompleteTestType::bounded_sequence_bool_field(
        const std::vector<bool>& _bounded_sequence_bool_field)
{
    m_bounded_sequence_bool_field = _bounded_sequence_bool_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_bool_field
 * @param _bounded_sequence_bool_field New value to be moved in member bounded_sequence_bool_field
 */
void KeyedCompleteTestType::bounded_sequence_bool_field(
        std::vector<bool>&& _bounded_sequence_bool_field)
{
    m_bounded_sequence_bool_field = std::move(_bounded_sequence_bool_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_bool_field
 * @return Constant reference to member bounded_sequence_bool_field
 */
const std::vector<bool>& KeyedCompleteTestType::bounded_sequence_bool_field() const
{
    return m_bounded_sequence_bool_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_bool_field
 * @return Reference to member bounded_sequence_bool_field
 */
std::vector<bool>& KeyedCompleteTestType::bounded_sequence_bool_field()
{
    return m_bounded_sequence_bool_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_enum_field
 * @param _bounded_sequence_enum_field New value to be copied in member bounded_sequence_enum_field
 */
void KeyedCompleteTestType::bounded_sequence_enum_field(
        const std::vector<Color>& _bounded_sequence_enum_field)
{
    m_bounded_sequence_enum_field = _bounded_sequence_enum_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_enum_field
 * @param _bounded_sequence_enum_field New value to be moved in member bounded_sequence_enum_field
 */
void KeyedCompleteTestType::bounded_sequence_enum_field(
        std::vector<Color>&& _bounded_sequence_enum_field)
{
    m_bounded_sequence_enum_field = std::move(_bounded_sequence_enum_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_enum_field
 * @return Constant reference to member bounded_sequence_enum_field
 */
const std::vector<Color>& KeyedCompleteTestType::bounded_sequence_enum_field() const
{
    return m_bounded_sequence_enum_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_enum_field
 * @return Reference to member bounded_sequence_enum_field
 */
std::vector<Color>& KeyedCompleteTestType::bounded_sequence_enum_field()
{
    return m_bounded_sequence_enum_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_enum2_field
 * @param _bounded_sequence_enum2_field New value to be copied in member bounded_sequence_enum2_field
 */
void KeyedCompleteTestType::bounded_sequence_enum2_field(
        const std::vector<Material>& _bounded_sequence_enum2_field)
{
    m_bounded_sequence_enum2_field = _bounded_sequence_enum2_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_enum2_field
 * @param _bounded_sequence_enum2_field New value to be moved in member bounded_sequence_enum2_field
 */
void KeyedCompleteTestType::bounded_sequence_enum2_field(
        std::vector<Material>&& _bounded_sequence_enum2_field)
{
    m_bounded_sequence_enum2_field = std::move(_bounded_sequence_enum2_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_enum2_field
 * @return Constant reference to member bounded_sequence_enum2_field
 */
const std::vector<Material>& KeyedCompleteTestType::bounded_sequence_enum2_field() const
{
    return m_bounded_sequence_enum2_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_enum2_field
 * @return Reference to member bounded_sequence_enum2_field
 */
std::vector<Material>& KeyedCompleteTestType::bounded_sequence_enum2_field()
{
    return m_bounded_sequence_enum2_field;
}


/*!
 * @brief This function copies the value in member bounded_sequence_struct_field
 * @param _bounded_sequence_struct_field New value to be copied in member bounded_sequence_struct_field
 */
void KeyedCompleteTestType::bounded_sequence_struct_field(
        const std::vector<StructType>& _bounded_sequence_struct_field)
{
    m_bounded_sequence_struct_field = _bounded_sequence_struct_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_struct_field
 * @param _bounded_sequence_struct_field New value to be moved in member bounded_sequence_struct_field
 */
void KeyedCompleteTestType::bounded_sequence_struct_field(
        std::vector<StructType>&& _bounded_sequence_struct_field)
{
    m_bounded_sequence_struct_field = std::move(_bounded_sequence_struct_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_struct_field
 * @return Constant reference to member bounded_sequence_struct_field
 */
const std::vector<StructType>& KeyedCompleteTestType::bounded_sequence_struct_field() const
{
    return m_bounded_sequence_struct_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_struct_field
 * @return Reference to member bounded_sequence_struct_field
 */
std::vector<StructType>& KeyedCompleteTestType::bounded_sequence_struct_field()
{
    return m_bounded_sequence_struct_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_char_field
 * @param _unbounded_sequence_char_field New value to be copied in member unbounded_sequence_char_field
 */
void KeyedCompleteTestType::unbounded_sequence_char_field(
        const std::vector<char>& _unbounded_sequence_char_field)
{
    m_unbounded_sequence_char_field = _unbounded_sequence_char_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_char_field
 * @param _unbounded_sequence_char_field New value to be moved in member unbounded_sequence_char_field
 */
void KeyedCompleteTestType::unbounded_sequence_char_field(
        std::vector<char>&& _unbounded_sequence_char_field)
{
    m_unbounded_sequence_char_field = std::move(_unbounded_sequence_char_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_char_field
 * @return Constant reference to member unbounded_sequence_char_field
 */
const std::vector<char>& KeyedCompleteTestType::unbounded_sequence_char_field() const
{
    return m_unbounded_sequence_char_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_char_field
 * @return Reference to member unbounded_sequence_char_field
 */
std::vector<char>& KeyedCompleteTestType::unbounded_sequence_char_field()
{
    return m_unbounded_sequence_char_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_uint8_field
 * @param _unbounded_sequence_uint8_field New value to be copied in member unbounded_sequence_uint8_field
 */
void KeyedCompleteTestType::unbounded_sequence_uint8_field(
        const std::vector<uint8_t>& _unbounded_sequence_uint8_field)
{
    m_unbounded_sequence_uint8_field = _unbounded_sequence_uint8_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_uint8_field
 * @param _unbounded_sequence_uint8_field New value to be moved in member unbounded_sequence_uint8_field
 */
void KeyedCompleteTestType::unbounded_sequence_uint8_field(
        std::vector<uint8_t>&& _unbounded_sequence_uint8_field)
{
    m_unbounded_sequence_uint8_field = std::move(_unbounded_sequence_uint8_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_uint8_field
 * @return Constant reference to member unbounded_sequence_uint8_field
 */
const std::vector<uint8_t>& KeyedCompleteTestType::unbounded_sequence_uint8_field() const
{
    return m_unbounded_sequence_uint8_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_uint8_field
 * @return Reference to member unbounded_sequence_uint8_field
 */
std::vector<uint8_t>& KeyedCompleteTestType::unbounded_sequence_uint8_field()
{
    return m_unbounded_sequence_uint8_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_int16_field
 * @param _unbounded_sequence_int16_field New value to be copied in member unbounded_sequence_int16_field
 */
void KeyedCompleteTestType::unbounded_sequence_int16_field(
        const std::vector<int16_t>& _unbounded_sequence_int16_field)
{
    m_unbounded_sequence_int16_field = _unbounded_sequence_int16_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_int16_field
 * @param _unbounded_sequence_int16_field New value to be moved in member unbounded_sequence_int16_field
 */
void KeyedCompleteTestType::unbounded_sequence_int16_field(
        std::vector<int16_t>&& _unbounded_sequence_int16_field)
{
    m_unbounded_sequence_int16_field = std::move(_unbounded_sequence_int16_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_int16_field
 * @return Constant reference to member unbounded_sequence_int16_field
 */
const std::vector<int16_t>& KeyedCompleteTestType::unbounded_sequence_int16_field() const
{
    return m_unbounded_sequence_int16_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_int16_field
 * @return Reference to member unbounded_sequence_int16_field
 */
std::vector<int16_t>& KeyedCompleteTestType::unbounded_sequence_int16_field()
{
    return m_unbounded_sequence_int16_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_uint16_field
 * @param _unbounded_sequence_uint16_field New value to be copied in member unbounded_sequence_uint16_field
 */
void KeyedCompleteTestType::unbounded_sequence_uint16_field(
        const std::vector<uint16_t>& _unbounded_sequence_uint16_field)
{
    m_unbounded_sequence_uint16_field = _unbounded_sequence_uint16_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_uint16_field
 * @param _unbounded_sequence_uint16_field New value to be moved in member unbounded_sequence_uint16_field
 */
void KeyedCompleteTestType::unbounded_sequence_uint16_field(
        std::vector<uint16_t>&& _unbounded_sequence_uint16_field)
{
    m_unbounded_sequence_uint16_field = std::move(_unbounded_sequence_uint16_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_uint16_field
 * @return Constant reference to member unbounded_sequence_uint16_field
 */
const std::vector<uint16_t>& KeyedCompleteTestType::unbounded_sequence_uint16_field() const
{
    return m_unbounded_sequence_uint16_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_uint16_field
 * @return Reference to member unbounded_sequence_uint16_field
 */
std::vector<uint16_t>& KeyedCompleteTestType::unbounded_sequence_uint16_field()
{
    return m_unbounded_sequence_uint16_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_int32_field
 * @param _unbounded_sequence_int32_field New value to be copied in member unbounded_sequence_int32_field
 */
void KeyedCompleteTestType::unbounded_sequence_int32_field(
        const std::vector<int32_t>& _unbounded_sequence_int32_field)
{
    m_unbounded_sequence_int32_field = _unbounded_sequence_int32_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_int32_field
 * @param _unbounded_sequence_int32_field New value to be moved in member unbounded_sequence_int32_field
 */
void KeyedCompleteTestType::unbounded_sequence_int32_field(
        std::vector<int32_t>&& _unbounded_sequence_int32_field)
{
    m_unbounded_sequence_int32_field = std::move(_unbounded_sequence_int32_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_int32_field
 * @return Constant reference to member unbounded_sequence_int32_field
 */
const std::vector<int32_t>& KeyedCompleteTestType::unbounded_sequence_int32_field() const
{
    return m_unbounded_sequence_int32_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_int32_field
 * @return Reference to member unbounded_sequence_int32_field
 */
std::vector<int32_t>& KeyedCompleteTestType::unbounded_sequence_int32_field()
{
    return m_unbounded_sequence_int32_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_uint32_field
 * @param _unbounded_sequence_uint32_field New value to be copied in member unbounded_sequence_uint32_field
 */
void KeyedCompleteTestType::unbounded_sequence_uint32_field(
        const std::vector<uint32_t>& _unbounded_sequence_uint32_field)
{
    m_unbounded_sequence_uint32_field = _unbounded_sequence_uint32_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_uint32_field
 * @param _unbounded_sequence_uint32_field New value to be moved in member unbounded_sequence_uint32_field
 */
void KeyedCompleteTestType::unbounded_sequence_uint32_field(
        std::vector<uint32_t>&& _unbounded_sequence_uint32_field)
{
    m_unbounded_sequence_uint32_field = std::move(_unbounded_sequence_uint32_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_uint32_field
 * @return Constant reference to member unbounded_sequence_uint32_field
 */
const std::vector<uint32_t>& KeyedCompleteTestType::unbounded_sequence_uint32_field() const
{
    return m_unbounded_sequence_uint32_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_uint32_field
 * @return Reference to member unbounded_sequence_uint32_field
 */
std::vector<uint32_t>& KeyedCompleteTestType::unbounded_sequence_uint32_field()
{
    return m_unbounded_sequence_uint32_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_int64_field
 * @param _unbounded_sequence_int64_field New value to be copied in member unbounded_sequence_int64_field
 */
void KeyedCompleteTestType::unbounded_sequence_int64_field(
        const std::vector<int64_t>& _unbounded_sequence_int64_field)
{
    m_unbounded_sequence_int64_field = _unbounded_sequence_int64_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_int64_field
 * @param _unbounded_sequence_int64_field New value to be moved in member unbounded_sequence_int64_field
 */
void KeyedCompleteTestType::unbounded_sequence_int64_field(
        std::vector<int64_t>&& _unbounded_sequence_int64_field)
{
    m_unbounded_sequence_int64_field = std::move(_unbounded_sequence_int64_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_int64_field
 * @return Constant reference to member unbounded_sequence_int64_field
 */
const std::vector<int64_t>& KeyedCompleteTestType::unbounded_sequence_int64_field() const
{
    return m_unbounded_sequence_int64_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_int64_field
 * @return Reference to member unbounded_sequence_int64_field
 */
std::vector<int64_t>& KeyedCompleteTestType::unbounded_sequence_int64_field()
{
    return m_unbounded_sequence_int64_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_uint64_field
 * @param _unbounded_sequence_uint64_field New value to be copied in member unbounded_sequence_uint64_field
 */
void KeyedCompleteTestType::unbounded_sequence_uint64_field(
        const std::vector<uint64_t>& _unbounded_sequence_uint64_field)
{
    m_unbounded_sequence_uint64_field = _unbounded_sequence_uint64_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_uint64_field
 * @param _unbounded_sequence_uint64_field New value to be moved in member unbounded_sequence_uint64_field
 */
void KeyedCompleteTestType::unbounded_sequence_uint64_field(
        std::vector<uint64_t>&& _unbounded_sequence_uint64_field)
{
    m_unbounded_sequence_uint64_field = std::move(_unbounded_sequence_uint64_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_uint64_field
 * @return Constant reference to member unbounded_sequence_uint64_field
 */
const std::vector<uint64_t>& KeyedCompleteTestType::unbounded_sequence_uint64_field() const
{
    return m_unbounded_sequence_uint64_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_uint64_field
 * @return Reference to member unbounded_sequence_uint64_field
 */
std::vector<uint64_t>& KeyedCompleteTestType::unbounded_sequence_uint64_field()
{
    return m_unbounded_sequence_uint64_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_float_field
 * @param _unbounded_sequence_float_field New value to be copied in member unbounded_sequence_float_field
 */
void KeyedCompleteTestType::unbounded_sequence_float_field(
        const std::vector<float>& _unbounded_sequence_float_field)
{
    m_unbounded_sequence_float_field = _unbounded_sequence_float_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_float_field
 * @param _unbounded_sequence_float_field New value to be moved in member unbounded_sequence_float_field
 */
void KeyedCompleteTestType::unbounded_sequence_float_field(
        std::vector<float>&& _unbounded_sequence_float_field)
{
    m_unbounded_sequence_float_field = std::move(_unbounded_sequence_float_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_float_field
 * @return Constant reference to member unbounded_sequence_float_field
 */
const std::vector<float>& KeyedCompleteTestType::unbounded_sequence_float_field() const
{
    return m_unbounded_sequence_float_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_float_field
 * @return Reference to member unbounded_sequence_float_field
 */
std::vector<float>& KeyedCompleteTestType::unbounded_sequence_float_field()
{
    return m_unbounded_sequence_float_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_double_field
 * @param _unbounded_sequence_double_field New value to be copied in member unbounded_sequence_double_field
 */
void KeyedCompleteTestType::unbounded_sequence_double_field(
        const std::vector<double>& _unbounded_sequence_double_field)
{
    m_unbounded_sequence_double_field = _unbounded_sequence_double_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_double_field
 * @param _unbounded_sequence_double_field New value to be moved in member unbounded_sequence_double_field
 */
void KeyedCompleteTestType::unbounded_sequence_double_field(
        std::vector<double>&& _unbounded_sequence_double_field)
{
    m_unbounded_sequence_double_field = std::move(_unbounded_sequence_double_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_double_field
 * @return Constant reference to member unbounded_sequence_double_field
 */
const std::vector<double>& KeyedCompleteTestType::unbounded_sequence_double_field() const
{
    return m_unbounded_sequence_double_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_double_field
 * @return Reference to member unbounded_sequence_double_field
 */
std::vector<double>& KeyedCompleteTestType::unbounded_sequence_double_field()
{
    return m_unbounded_sequence_double_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_bool_field
 * @param _unbounded_sequence_bool_field New value to be copied in member unbounded_sequence_bool_field
 */
void KeyedCompleteTestType::unbounded_sequence_bool_field(
        const std::vector<bool>& _unbounded_sequence_bool_field)
{
    m_unbounded_sequence_bool_field = _unbounded_sequence_bool_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_bool_field
 * @param _unbounded_sequence_bool_field New value to be moved in member unbounded_sequence_bool_field
 */
void KeyedCompleteTestType::unbounded_sequence_bool_field(
        std::vector<bool>&& _unbounded_sequence_bool_field)
{
    m_unbounded_sequence_bool_field = std::move(_unbounded_sequence_bool_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_bool_field
 * @return Constant reference to member unbounded_sequence_bool_field
 */
const std::vector<bool>& KeyedCompleteTestType::unbounded_sequence_bool_field() const
{
    return m_unbounded_sequence_bool_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_bool_field
 * @return Reference to member unbounded_sequence_bool_field
 */
std::vector<bool>& KeyedCompleteTestType::unbounded_sequence_bool_field()
{
    return m_unbounded_sequence_bool_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_enum_field
 * @param _unbounded_sequence_enum_field New value to be copied in member unbounded_sequence_enum_field
 */
void KeyedCompleteTestType::unbounded_sequence_enum_field(
        const std::vector<Color>& _unbounded_sequence_enum_field)
{
    m_unbounded_sequence_enum_field = _unbounded_sequence_enum_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_enum_field
 * @param _unbounded_sequence_enum_field New value to be moved in member unbounded_sequence_enum_field
 */
void KeyedCompleteTestType::unbounded_sequence_enum_field(
        std::vector<Color>&& _unbounded_sequence_enum_field)
{
    m_unbounded_sequence_enum_field = std::move(_unbounded_sequence_enum_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_enum_field
 * @return Constant reference to member unbounded_sequence_enum_field
 */
const std::vector<Color>& KeyedCompleteTestType::unbounded_sequence_enum_field() const
{
    return m_unbounded_sequence_enum_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_enum_field
 * @return Reference to member unbounded_sequence_enum_field
 */
std::vector<Color>& KeyedCompleteTestType::unbounded_sequence_enum_field()
{
    return m_unbounded_sequence_enum_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_enum2_field
 * @param _unbounded_sequence_enum2_field New value to be copied in member unbounded_sequence_enum2_field
 */
void KeyedCompleteTestType::unbounded_sequence_enum2_field(
        const std::vector<Material>& _unbounded_sequence_enum2_field)
{
    m_unbounded_sequence_enum2_field = _unbounded_sequence_enum2_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_enum2_field
 * @param _unbounded_sequence_enum2_field New value to be moved in member unbounded_sequence_enum2_field
 */
void KeyedCompleteTestType::unbounded_sequence_enum2_field(
        std::vector<Material>&& _unbounded_sequence_enum2_field)
{
    m_unbounded_sequence_enum2_field = std::move(_unbounded_sequence_enum2_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_enum2_field
 * @return Constant reference to member unbounded_sequence_enum2_field
 */
const std::vector<Material>& KeyedCompleteTestType::unbounded_sequence_enum2_field() const
{
    return m_unbounded_sequence_enum2_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_enum2_field
 * @return Reference to member unbounded_sequence_enum2_field
 */
std::vector<Material>& KeyedCompleteTestType::unbounded_sequence_enum2_field()
{
    return m_unbounded_sequence_enum2_field;
}


/*!
 * @brief This function copies the value in member unbounded_sequence_struct_field
 * @param _unbounded_sequence_struct_field New value to be copied in member unbounded_sequence_struct_field
 */
void KeyedCompleteTestType::unbounded_sequence_struct_field(
        const std::vector<StructType>& _unbounded_sequence_struct_field)
{
    m_unbounded_sequence_struct_field = _unbounded_sequence_struct_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_struct_field
 * @param _unbounded_sequence_struct_field New value to be moved in member unbounded_sequence_struct_field
 */
void KeyedCompleteTestType::unbounded_sequence_struct_field(
        std::vector<StructType>&& _unbounded_sequence_struct_field)
{
    m_unbounded_sequence_struct_field = std::move(_unbounded_sequence_struct_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_struct_field
 * @return Constant reference to member unbounded_sequence_struct_field
 */
const std::vector<StructType>& KeyedCompleteTestType::unbounded_sequence_struct_field() const
{
    return m_unbounded_sequence_struct_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_struct_field
 * @return Reference to member unbounded_sequence_struct_field
 */
std::vector<StructType>& KeyedCompleteTestType::unbounded_sequence_struct_field()
{
    return m_unbounded_sequence_struct_field;
}


// Include auxiliary functions like for serializing/deserializing.
#include "test_completeCdrAux.ipp"

#endif // FASTCDR_VERSION_MAJOR > 1
