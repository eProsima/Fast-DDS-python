// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file test_complete.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "test_complete.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>



StructType::StructType()
{
    // m_char_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@46daef40
    m_char_field = 0;
    // m_uint8_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@12f41634
    m_uint8_field = 0;
    // m_int16_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@262b2c86
    m_int16_field = 0;
    // m_uint16_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@371a67ec
    m_uint16_field = 0;
    // m_int32_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5ed828d
    m_int32_field = 0;
    // m_uint32_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7a3d45bd
    m_uint32_field = 0;
    // m_int64_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1e7c7811
    m_int64_field = 0;
    // m_uint64_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@77ec78b9
    m_uint64_field = 0;
    // m_float_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1a3869f4
    m_float_field = 0.0;
    // m_double_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@a38d7a3
    m_double_field = 0.0;
    // m_bool_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@77f99a05
    m_bool_field = false;
    // m_string_field com.eprosima.idl.parser.typecode.StringTypeCode@63440df3
    m_string_field ="";
    // m_enum_field com.eprosima.idl.parser.typecode.EnumTypeCode@3aeaafa6
    m_enum_field = ::RED;
    // m_enum2_field com.eprosima.idl.parser.typecode.EnumTypeCode@76a3e297
    m_enum2_field = ::WOOD;

}

StructType::~StructType()
{














}

StructType::StructType(
        const StructType& x)
{
    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = x.m_string_field;
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
}

StructType::StructType(
        StructType&& x)
{
    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = std::move(x.m_string_field);
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
}

StructType& StructType::operator =(
        const StructType& x)
{

    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = x.m_string_field;
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;

    return *this;
}

StructType& StructType::operator =(
        StructType&& x)
{

    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = std::move(x.m_string_field);
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;

    return *this;
}

bool StructType::operator ==(
        const StructType& x) const
{

    return (m_char_field == x.m_char_field && m_uint8_field == x.m_uint8_field && m_int16_field == x.m_int16_field && m_uint16_field == x.m_uint16_field && m_int32_field == x.m_int32_field && m_uint32_field == x.m_uint32_field && m_int64_field == x.m_int64_field && m_uint64_field == x.m_uint64_field && m_float_field == x.m_float_field && m_double_field == x.m_double_field && m_bool_field == x.m_bool_field && m_string_field == x.m_string_field && m_enum_field == x.m_enum_field && m_enum2_field == x.m_enum2_field);
}

bool StructType::operator !=(
        const StructType& x) const
{
    return !(*this == x);
}

size_t StructType::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t StructType::getCdrSerializedSize(
        const StructType& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.string_field().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void StructType::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_char_field;
    scdr << m_uint8_field;
    scdr << m_int16_field;
    scdr << m_uint16_field;
    scdr << m_int32_field;
    scdr << m_uint32_field;
    scdr << m_int64_field;
    scdr << m_uint64_field;
    scdr << m_float_field;
    scdr << m_double_field;
    scdr << m_bool_field;
    scdr << m_string_field;
    scdr << (uint32_t)m_enum_field;
    scdr << (uint32_t)m_enum2_field;

}

void StructType::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_char_field;
    dcdr >> m_uint8_field;
    dcdr >> m_int16_field;
    dcdr >> m_uint16_field;
    dcdr >> m_int32_field;
    dcdr >> m_uint32_field;
    dcdr >> m_int64_field;
    dcdr >> m_uint64_field;
    dcdr >> m_float_field;
    dcdr >> m_double_field;
    dcdr >> m_bool_field;
    dcdr >> m_string_field;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_enum_field = (Color)enum_value;
    }

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_enum2_field = (Material)enum_value;
    }

}

/*!
 * @brief This function sets a value in member char_field
 * @param _char_field New value for member char_field
 */
void StructType::char_field(
        char _char_field)
{
    m_char_field = _char_field;
}

/*!
 * @brief This function returns the value of member char_field
 * @return Value of member char_field
 */
char StructType::char_field() const
{
    return m_char_field;
}

/*!
 * @brief This function returns a reference to member char_field
 * @return Reference to member char_field
 */
char& StructType::char_field()
{
    return m_char_field;
}

/*!
 * @brief This function sets a value in member uint8_field
 * @param _uint8_field New value for member uint8_field
 */
void StructType::uint8_field(
        uint8_t _uint8_field)
{
    m_uint8_field = _uint8_field;
}

/*!
 * @brief This function returns the value of member uint8_field
 * @return Value of member uint8_field
 */
uint8_t StructType::uint8_field() const
{
    return m_uint8_field;
}

/*!
 * @brief This function returns a reference to member uint8_field
 * @return Reference to member uint8_field
 */
uint8_t& StructType::uint8_field()
{
    return m_uint8_field;
}

/*!
 * @brief This function sets a value in member int16_field
 * @param _int16_field New value for member int16_field
 */
void StructType::int16_field(
        int16_t _int16_field)
{
    m_int16_field = _int16_field;
}

/*!
 * @brief This function returns the value of member int16_field
 * @return Value of member int16_field
 */
int16_t StructType::int16_field() const
{
    return m_int16_field;
}

/*!
 * @brief This function returns a reference to member int16_field
 * @return Reference to member int16_field
 */
int16_t& StructType::int16_field()
{
    return m_int16_field;
}

/*!
 * @brief This function sets a value in member uint16_field
 * @param _uint16_field New value for member uint16_field
 */
void StructType::uint16_field(
        uint16_t _uint16_field)
{
    m_uint16_field = _uint16_field;
}

/*!
 * @brief This function returns the value of member uint16_field
 * @return Value of member uint16_field
 */
uint16_t StructType::uint16_field() const
{
    return m_uint16_field;
}

/*!
 * @brief This function returns a reference to member uint16_field
 * @return Reference to member uint16_field
 */
uint16_t& StructType::uint16_field()
{
    return m_uint16_field;
}

/*!
 * @brief This function sets a value in member int32_field
 * @param _int32_field New value for member int32_field
 */
void StructType::int32_field(
        int32_t _int32_field)
{
    m_int32_field = _int32_field;
}

/*!
 * @brief This function returns the value of member int32_field
 * @return Value of member int32_field
 */
int32_t StructType::int32_field() const
{
    return m_int32_field;
}

/*!
 * @brief This function returns a reference to member int32_field
 * @return Reference to member int32_field
 */
int32_t& StructType::int32_field()
{
    return m_int32_field;
}

/*!
 * @brief This function sets a value in member uint32_field
 * @param _uint32_field New value for member uint32_field
 */
void StructType::uint32_field(
        uint32_t _uint32_field)
{
    m_uint32_field = _uint32_field;
}

/*!
 * @brief This function returns the value of member uint32_field
 * @return Value of member uint32_field
 */
uint32_t StructType::uint32_field() const
{
    return m_uint32_field;
}

/*!
 * @brief This function returns a reference to member uint32_field
 * @return Reference to member uint32_field
 */
uint32_t& StructType::uint32_field()
{
    return m_uint32_field;
}

/*!
 * @brief This function sets a value in member int64_field
 * @param _int64_field New value for member int64_field
 */
void StructType::int64_field(
        int64_t _int64_field)
{
    m_int64_field = _int64_field;
}

/*!
 * @brief This function returns the value of member int64_field
 * @return Value of member int64_field
 */
int64_t StructType::int64_field() const
{
    return m_int64_field;
}

/*!
 * @brief This function returns a reference to member int64_field
 * @return Reference to member int64_field
 */
int64_t& StructType::int64_field()
{
    return m_int64_field;
}

/*!
 * @brief This function sets a value in member uint64_field
 * @param _uint64_field New value for member uint64_field
 */
void StructType::uint64_field(
        uint64_t _uint64_field)
{
    m_uint64_field = _uint64_field;
}

/*!
 * @brief This function returns the value of member uint64_field
 * @return Value of member uint64_field
 */
uint64_t StructType::uint64_field() const
{
    return m_uint64_field;
}

/*!
 * @brief This function returns a reference to member uint64_field
 * @return Reference to member uint64_field
 */
uint64_t& StructType::uint64_field()
{
    return m_uint64_field;
}

/*!
 * @brief This function sets a value in member float_field
 * @param _float_field New value for member float_field
 */
void StructType::float_field(
        float _float_field)
{
    m_float_field = _float_field;
}

/*!
 * @brief This function returns the value of member float_field
 * @return Value of member float_field
 */
float StructType::float_field() const
{
    return m_float_field;
}

/*!
 * @brief This function returns a reference to member float_field
 * @return Reference to member float_field
 */
float& StructType::float_field()
{
    return m_float_field;
}

/*!
 * @brief This function sets a value in member double_field
 * @param _double_field New value for member double_field
 */
void StructType::double_field(
        double _double_field)
{
    m_double_field = _double_field;
}

/*!
 * @brief This function returns the value of member double_field
 * @return Value of member double_field
 */
double StructType::double_field() const
{
    return m_double_field;
}

/*!
 * @brief This function returns a reference to member double_field
 * @return Reference to member double_field
 */
double& StructType::double_field()
{
    return m_double_field;
}

/*!
 * @brief This function sets a value in member bool_field
 * @param _bool_field New value for member bool_field
 */
void StructType::bool_field(
        bool _bool_field)
{
    m_bool_field = _bool_field;
}

/*!
 * @brief This function returns the value of member bool_field
 * @return Value of member bool_field
 */
bool StructType::bool_field() const
{
    return m_bool_field;
}

/*!
 * @brief This function returns a reference to member bool_field
 * @return Reference to member bool_field
 */
bool& StructType::bool_field()
{
    return m_bool_field;
}

/*!
 * @brief This function copies the value in member string_field
 * @param _string_field New value to be copied in member string_field
 */
void StructType::string_field(
        const std::string& _string_field)
{
    m_string_field = _string_field;
}

/*!
 * @brief This function moves the value in member string_field
 * @param _string_field New value to be moved in member string_field
 */
void StructType::string_field(
        std::string&& _string_field)
{
    m_string_field = std::move(_string_field);
}

/*!
 * @brief This function returns a constant reference to member string_field
 * @return Constant reference to member string_field
 */
const std::string& StructType::string_field() const
{
    return m_string_field;
}

/*!
 * @brief This function returns a reference to member string_field
 * @return Reference to member string_field
 */
std::string& StructType::string_field()
{
    return m_string_field;
}
/*!
 * @brief This function sets a value in member enum_field
 * @param _enum_field New value for member enum_field
 */
void StructType::enum_field(
        Color _enum_field)
{
    m_enum_field = _enum_field;
}

/*!
 * @brief This function returns the value of member enum_field
 * @return Value of member enum_field
 */
Color StructType::enum_field() const
{
    return m_enum_field;
}

/*!
 * @brief This function returns a reference to member enum_field
 * @return Reference to member enum_field
 */
Color& StructType::enum_field()
{
    return m_enum_field;
}

/*!
 * @brief This function sets a value in member enum2_field
 * @param _enum2_field New value for member enum2_field
 */
void StructType::enum2_field(
        Material _enum2_field)
{
    m_enum2_field = _enum2_field;
}

/*!
 * @brief This function returns the value of member enum2_field
 * @return Value of member enum2_field
 */
Material StructType::enum2_field() const
{
    return m_enum2_field;
}

/*!
 * @brief This function returns a reference to member enum2_field
 * @return Reference to member enum2_field
 */
Material& StructType::enum2_field()
{
    return m_enum2_field;
}


size_t StructType::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;

















    return current_align;
}

bool StructType::isKeyDefined()
{
    return false;
}

void StructType::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
                  
}



CompleteTestType::CompleteTestType()
{
    // m_char_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@fcd6521
    m_char_field = 0;
    // m_uint8_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5c18298f
    m_uint8_field = 0;
    // m_int16_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5579bb86
    m_int16_field = 0;
    // m_uint16_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5204062d
    m_uint16_field = 0;
    // m_int32_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4fcd19b3
    m_int32_field = 0;
    // m_uint32_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2fd66ad3
    m_uint32_field = 0;
    // m_int64_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5d11346a
    m_int64_field = 0;
    // m_uint64_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7a36aefa
    m_uint64_field = 0;
    // m_float_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@17211155
    m_float_field = 0.0;
    // m_double_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@b3d7190
    m_double_field = 0.0;
    // m_bool_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5fdba6f9
    m_bool_field = false;
    // m_string_field com.eprosima.idl.parser.typecode.StringTypeCode@10d59286
    m_string_field ="";
    // m_enum_field com.eprosima.idl.parser.typecode.EnumTypeCode@3aeaafa6
    m_enum_field = ::RED;
    // m_enum2_field com.eprosima.idl.parser.typecode.EnumTypeCode@76a3e297
    m_enum2_field = ::WOOD;
    // m_struct_field com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@fe18270

    // m_array_char_field com.eprosima.idl.parser.typecode.ArrayTypeCode@6fb0d3ed
    memset(&m_array_char_field, 0, (max_array_size) * 1);
    // m_array_uint8_field com.eprosima.idl.parser.typecode.ArrayTypeCode@6dde5c8c
    memset(&m_array_uint8_field, 0, (max_array_size) * 1);
    // m_array_int16_field com.eprosima.idl.parser.typecode.ArrayTypeCode@52525845
    memset(&m_array_int16_field, 0, (max_array_size) * 2);
    // m_array_uint16_field com.eprosima.idl.parser.typecode.ArrayTypeCode@3b94d659
    memset(&m_array_uint16_field, 0, (max_array_size) * 2);
    // m_array_int32_field com.eprosima.idl.parser.typecode.ArrayTypeCode@24b1d79b
    memset(&m_array_int32_field, 0, (max_array_size) * 4);
    // m_array_uint32_field com.eprosima.idl.parser.typecode.ArrayTypeCode@68ceda24
    memset(&m_array_uint32_field, 0, (max_array_size) * 4);
    // m_array_int64_field com.eprosima.idl.parser.typecode.ArrayTypeCode@281e3708
    memset(&m_array_int64_field, 0, (max_array_size) * 8);
    // m_array_uint64_field com.eprosima.idl.parser.typecode.ArrayTypeCode@35a50a4c
    memset(&m_array_uint64_field, 0, (max_array_size) * 8);
    // m_array_float_field com.eprosima.idl.parser.typecode.ArrayTypeCode@1f021e6c
    memset(&m_array_float_field, 0, (max_array_size) * 4);
    // m_array_double_field com.eprosima.idl.parser.typecode.ArrayTypeCode@103f852
    memset(&m_array_double_field, 0, (max_array_size) * 8);
    // m_array_bool_field com.eprosima.idl.parser.typecode.ArrayTypeCode@587c290d
    memset(&m_array_bool_field, 0, (max_array_size) * 1);
    // m_array_enum_field com.eprosima.idl.parser.typecode.ArrayTypeCode@4516af24
    memset(&m_array_enum_field, 0, (max_array_size) * 4);
    // m_array_enum2_field com.eprosima.idl.parser.typecode.ArrayTypeCode@4ae82894
    memset(&m_array_enum2_field, 0, (max_array_size) * 4);
    // m_array_struct_field com.eprosima.idl.parser.typecode.ArrayTypeCode@543788f3

    // m_bounded_sequence_char_field com.eprosima.idl.parser.typecode.SequenceTypeCode@1da51a35

    // m_bounded_sequence_uint8_field com.eprosima.idl.parser.typecode.SequenceTypeCode@16022d9d

    // m_bounded_sequence_int16_field com.eprosima.idl.parser.typecode.SequenceTypeCode@7e9a5fbe

    // m_bounded_sequence_uint16_field com.eprosima.idl.parser.typecode.SequenceTypeCode@44a3ec6b

    // m_bounded_sequence_int32_field com.eprosima.idl.parser.typecode.SequenceTypeCode@71623278

    // m_bounded_sequence_uint32_field com.eprosima.idl.parser.typecode.SequenceTypeCode@768b970c

    // m_bounded_sequence_int64_field com.eprosima.idl.parser.typecode.SequenceTypeCode@5a4041cc

    // m_bounded_sequence_uint64_field com.eprosima.idl.parser.typecode.SequenceTypeCode@15b3e5b

    // m_bounded_sequence_float_field com.eprosima.idl.parser.typecode.SequenceTypeCode@61ca2dfa

    // m_bounded_sequence_double_field com.eprosima.idl.parser.typecode.SequenceTypeCode@4b53f538

    // m_bounded_sequence_bool_field com.eprosima.idl.parser.typecode.SequenceTypeCode@134593bf

    // m_bounded_sequence_enum_field com.eprosima.idl.parser.typecode.SequenceTypeCode@4bb4de6a

    // m_bounded_sequence_enum2_field com.eprosima.idl.parser.typecode.SequenceTypeCode@7ba18f1b

    // m_bounded_sequence_struct_field com.eprosima.idl.parser.typecode.SequenceTypeCode@2f8f5f62

    // m_unbounded_sequence_char_field com.eprosima.idl.parser.typecode.SequenceTypeCode@1068e947

    // m_unbounded_sequence_uint8_field com.eprosima.idl.parser.typecode.SequenceTypeCode@7dc222ae

    // m_unbounded_sequence_int16_field com.eprosima.idl.parser.typecode.SequenceTypeCode@aecb35a

    // m_unbounded_sequence_uint16_field com.eprosima.idl.parser.typecode.SequenceTypeCode@5fcd892a

    // m_unbounded_sequence_int32_field com.eprosima.idl.parser.typecode.SequenceTypeCode@8b87145

    // m_unbounded_sequence_uint32_field com.eprosima.idl.parser.typecode.SequenceTypeCode@6483f5ae

    // m_unbounded_sequence_int64_field com.eprosima.idl.parser.typecode.SequenceTypeCode@b9afc07

    // m_unbounded_sequence_uint64_field com.eprosima.idl.parser.typecode.SequenceTypeCode@382db087

    // m_unbounded_sequence_float_field com.eprosima.idl.parser.typecode.SequenceTypeCode@73d4cc9e

    // m_unbounded_sequence_double_field com.eprosima.idl.parser.typecode.SequenceTypeCode@80169cf

    // m_unbounded_sequence_bool_field com.eprosima.idl.parser.typecode.SequenceTypeCode@5427c60c

    // m_unbounded_sequence_enum_field com.eprosima.idl.parser.typecode.SequenceTypeCode@15bfd87

    // m_unbounded_sequence_enum2_field com.eprosima.idl.parser.typecode.SequenceTypeCode@543e710e

    // m_unbounded_sequence_struct_field com.eprosima.idl.parser.typecode.SequenceTypeCode@57f23557


}

CompleteTestType::~CompleteTestType()
{

























































}

CompleteTestType::CompleteTestType(
        const CompleteTestType& x)
{
    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = x.m_string_field;
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
    m_struct_field = x.m_struct_field;
    m_array_char_field = x.m_array_char_field;
    m_array_uint8_field = x.m_array_uint8_field;
    m_array_int16_field = x.m_array_int16_field;
    m_array_uint16_field = x.m_array_uint16_field;
    m_array_int32_field = x.m_array_int32_field;
    m_array_uint32_field = x.m_array_uint32_field;
    m_array_int64_field = x.m_array_int64_field;
    m_array_uint64_field = x.m_array_uint64_field;
    m_array_float_field = x.m_array_float_field;
    m_array_double_field = x.m_array_double_field;
    m_array_bool_field = x.m_array_bool_field;
    m_array_enum_field = x.m_array_enum_field;
    m_array_enum2_field = x.m_array_enum2_field;
    m_array_struct_field = x.m_array_struct_field;
    m_bounded_sequence_char_field = x.m_bounded_sequence_char_field;
    m_bounded_sequence_uint8_field = x.m_bounded_sequence_uint8_field;
    m_bounded_sequence_int16_field = x.m_bounded_sequence_int16_field;
    m_bounded_sequence_uint16_field = x.m_bounded_sequence_uint16_field;
    m_bounded_sequence_int32_field = x.m_bounded_sequence_int32_field;
    m_bounded_sequence_uint32_field = x.m_bounded_sequence_uint32_field;
    m_bounded_sequence_int64_field = x.m_bounded_sequence_int64_field;
    m_bounded_sequence_uint64_field = x.m_bounded_sequence_uint64_field;
    m_bounded_sequence_float_field = x.m_bounded_sequence_float_field;
    m_bounded_sequence_double_field = x.m_bounded_sequence_double_field;
    m_bounded_sequence_bool_field = x.m_bounded_sequence_bool_field;
    m_bounded_sequence_enum_field = x.m_bounded_sequence_enum_field;
    m_bounded_sequence_enum2_field = x.m_bounded_sequence_enum2_field;
    m_bounded_sequence_struct_field = x.m_bounded_sequence_struct_field;
    m_unbounded_sequence_char_field = x.m_unbounded_sequence_char_field;
    m_unbounded_sequence_uint8_field = x.m_unbounded_sequence_uint8_field;
    m_unbounded_sequence_int16_field = x.m_unbounded_sequence_int16_field;
    m_unbounded_sequence_uint16_field = x.m_unbounded_sequence_uint16_field;
    m_unbounded_sequence_int32_field = x.m_unbounded_sequence_int32_field;
    m_unbounded_sequence_uint32_field = x.m_unbounded_sequence_uint32_field;
    m_unbounded_sequence_int64_field = x.m_unbounded_sequence_int64_field;
    m_unbounded_sequence_uint64_field = x.m_unbounded_sequence_uint64_field;
    m_unbounded_sequence_float_field = x.m_unbounded_sequence_float_field;
    m_unbounded_sequence_double_field = x.m_unbounded_sequence_double_field;
    m_unbounded_sequence_bool_field = x.m_unbounded_sequence_bool_field;
    m_unbounded_sequence_enum_field = x.m_unbounded_sequence_enum_field;
    m_unbounded_sequence_enum2_field = x.m_unbounded_sequence_enum2_field;
    m_unbounded_sequence_struct_field = x.m_unbounded_sequence_struct_field;
}

CompleteTestType::CompleteTestType(
        CompleteTestType&& x)
{
    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = std::move(x.m_string_field);
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
    m_struct_field = std::move(x.m_struct_field);
    m_array_char_field = std::move(x.m_array_char_field);
    m_array_uint8_field = std::move(x.m_array_uint8_field);
    m_array_int16_field = std::move(x.m_array_int16_field);
    m_array_uint16_field = std::move(x.m_array_uint16_field);
    m_array_int32_field = std::move(x.m_array_int32_field);
    m_array_uint32_field = std::move(x.m_array_uint32_field);
    m_array_int64_field = std::move(x.m_array_int64_field);
    m_array_uint64_field = std::move(x.m_array_uint64_field);
    m_array_float_field = std::move(x.m_array_float_field);
    m_array_double_field = std::move(x.m_array_double_field);
    m_array_bool_field = std::move(x.m_array_bool_field);
    m_array_enum_field = std::move(x.m_array_enum_field);
    m_array_enum2_field = std::move(x.m_array_enum2_field);
    m_array_struct_field = std::move(x.m_array_struct_field);
    m_bounded_sequence_char_field = std::move(x.m_bounded_sequence_char_field);
    m_bounded_sequence_uint8_field = std::move(x.m_bounded_sequence_uint8_field);
    m_bounded_sequence_int16_field = std::move(x.m_bounded_sequence_int16_field);
    m_bounded_sequence_uint16_field = std::move(x.m_bounded_sequence_uint16_field);
    m_bounded_sequence_int32_field = std::move(x.m_bounded_sequence_int32_field);
    m_bounded_sequence_uint32_field = std::move(x.m_bounded_sequence_uint32_field);
    m_bounded_sequence_int64_field = std::move(x.m_bounded_sequence_int64_field);
    m_bounded_sequence_uint64_field = std::move(x.m_bounded_sequence_uint64_field);
    m_bounded_sequence_float_field = std::move(x.m_bounded_sequence_float_field);
    m_bounded_sequence_double_field = std::move(x.m_bounded_sequence_double_field);
    m_bounded_sequence_bool_field = std::move(x.m_bounded_sequence_bool_field);
    m_bounded_sequence_enum_field = std::move(x.m_bounded_sequence_enum_field);
    m_bounded_sequence_enum2_field = std::move(x.m_bounded_sequence_enum2_field);
    m_bounded_sequence_struct_field = std::move(x.m_bounded_sequence_struct_field);
    m_unbounded_sequence_char_field = std::move(x.m_unbounded_sequence_char_field);
    m_unbounded_sequence_uint8_field = std::move(x.m_unbounded_sequence_uint8_field);
    m_unbounded_sequence_int16_field = std::move(x.m_unbounded_sequence_int16_field);
    m_unbounded_sequence_uint16_field = std::move(x.m_unbounded_sequence_uint16_field);
    m_unbounded_sequence_int32_field = std::move(x.m_unbounded_sequence_int32_field);
    m_unbounded_sequence_uint32_field = std::move(x.m_unbounded_sequence_uint32_field);
    m_unbounded_sequence_int64_field = std::move(x.m_unbounded_sequence_int64_field);
    m_unbounded_sequence_uint64_field = std::move(x.m_unbounded_sequence_uint64_field);
    m_unbounded_sequence_float_field = std::move(x.m_unbounded_sequence_float_field);
    m_unbounded_sequence_double_field = std::move(x.m_unbounded_sequence_double_field);
    m_unbounded_sequence_bool_field = std::move(x.m_unbounded_sequence_bool_field);
    m_unbounded_sequence_enum_field = std::move(x.m_unbounded_sequence_enum_field);
    m_unbounded_sequence_enum2_field = std::move(x.m_unbounded_sequence_enum2_field);
    m_unbounded_sequence_struct_field = std::move(x.m_unbounded_sequence_struct_field);
}

CompleteTestType& CompleteTestType::operator =(
        const CompleteTestType& x)
{

    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = x.m_string_field;
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
    m_struct_field = x.m_struct_field;
    m_array_char_field = x.m_array_char_field;
    m_array_uint8_field = x.m_array_uint8_field;
    m_array_int16_field = x.m_array_int16_field;
    m_array_uint16_field = x.m_array_uint16_field;
    m_array_int32_field = x.m_array_int32_field;
    m_array_uint32_field = x.m_array_uint32_field;
    m_array_int64_field = x.m_array_int64_field;
    m_array_uint64_field = x.m_array_uint64_field;
    m_array_float_field = x.m_array_float_field;
    m_array_double_field = x.m_array_double_field;
    m_array_bool_field = x.m_array_bool_field;
    m_array_enum_field = x.m_array_enum_field;
    m_array_enum2_field = x.m_array_enum2_field;
    m_array_struct_field = x.m_array_struct_field;
    m_bounded_sequence_char_field = x.m_bounded_sequence_char_field;
    m_bounded_sequence_uint8_field = x.m_bounded_sequence_uint8_field;
    m_bounded_sequence_int16_field = x.m_bounded_sequence_int16_field;
    m_bounded_sequence_uint16_field = x.m_bounded_sequence_uint16_field;
    m_bounded_sequence_int32_field = x.m_bounded_sequence_int32_field;
    m_bounded_sequence_uint32_field = x.m_bounded_sequence_uint32_field;
    m_bounded_sequence_int64_field = x.m_bounded_sequence_int64_field;
    m_bounded_sequence_uint64_field = x.m_bounded_sequence_uint64_field;
    m_bounded_sequence_float_field = x.m_bounded_sequence_float_field;
    m_bounded_sequence_double_field = x.m_bounded_sequence_double_field;
    m_bounded_sequence_bool_field = x.m_bounded_sequence_bool_field;
    m_bounded_sequence_enum_field = x.m_bounded_sequence_enum_field;
    m_bounded_sequence_enum2_field = x.m_bounded_sequence_enum2_field;
    m_bounded_sequence_struct_field = x.m_bounded_sequence_struct_field;
    m_unbounded_sequence_char_field = x.m_unbounded_sequence_char_field;
    m_unbounded_sequence_uint8_field = x.m_unbounded_sequence_uint8_field;
    m_unbounded_sequence_int16_field = x.m_unbounded_sequence_int16_field;
    m_unbounded_sequence_uint16_field = x.m_unbounded_sequence_uint16_field;
    m_unbounded_sequence_int32_field = x.m_unbounded_sequence_int32_field;
    m_unbounded_sequence_uint32_field = x.m_unbounded_sequence_uint32_field;
    m_unbounded_sequence_int64_field = x.m_unbounded_sequence_int64_field;
    m_unbounded_sequence_uint64_field = x.m_unbounded_sequence_uint64_field;
    m_unbounded_sequence_float_field = x.m_unbounded_sequence_float_field;
    m_unbounded_sequence_double_field = x.m_unbounded_sequence_double_field;
    m_unbounded_sequence_bool_field = x.m_unbounded_sequence_bool_field;
    m_unbounded_sequence_enum_field = x.m_unbounded_sequence_enum_field;
    m_unbounded_sequence_enum2_field = x.m_unbounded_sequence_enum2_field;
    m_unbounded_sequence_struct_field = x.m_unbounded_sequence_struct_field;

    return *this;
}

CompleteTestType& CompleteTestType::operator =(
        CompleteTestType&& x)
{

    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = std::move(x.m_string_field);
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
    m_struct_field = std::move(x.m_struct_field);
    m_array_char_field = std::move(x.m_array_char_field);
    m_array_uint8_field = std::move(x.m_array_uint8_field);
    m_array_int16_field = std::move(x.m_array_int16_field);
    m_array_uint16_field = std::move(x.m_array_uint16_field);
    m_array_int32_field = std::move(x.m_array_int32_field);
    m_array_uint32_field = std::move(x.m_array_uint32_field);
    m_array_int64_field = std::move(x.m_array_int64_field);
    m_array_uint64_field = std::move(x.m_array_uint64_field);
    m_array_float_field = std::move(x.m_array_float_field);
    m_array_double_field = std::move(x.m_array_double_field);
    m_array_bool_field = std::move(x.m_array_bool_field);
    m_array_enum_field = std::move(x.m_array_enum_field);
    m_array_enum2_field = std::move(x.m_array_enum2_field);
    m_array_struct_field = std::move(x.m_array_struct_field);
    m_bounded_sequence_char_field = std::move(x.m_bounded_sequence_char_field);
    m_bounded_sequence_uint8_field = std::move(x.m_bounded_sequence_uint8_field);
    m_bounded_sequence_int16_field = std::move(x.m_bounded_sequence_int16_field);
    m_bounded_sequence_uint16_field = std::move(x.m_bounded_sequence_uint16_field);
    m_bounded_sequence_int32_field = std::move(x.m_bounded_sequence_int32_field);
    m_bounded_sequence_uint32_field = std::move(x.m_bounded_sequence_uint32_field);
    m_bounded_sequence_int64_field = std::move(x.m_bounded_sequence_int64_field);
    m_bounded_sequence_uint64_field = std::move(x.m_bounded_sequence_uint64_field);
    m_bounded_sequence_float_field = std::move(x.m_bounded_sequence_float_field);
    m_bounded_sequence_double_field = std::move(x.m_bounded_sequence_double_field);
    m_bounded_sequence_bool_field = std::move(x.m_bounded_sequence_bool_field);
    m_bounded_sequence_enum_field = std::move(x.m_bounded_sequence_enum_field);
    m_bounded_sequence_enum2_field = std::move(x.m_bounded_sequence_enum2_field);
    m_bounded_sequence_struct_field = std::move(x.m_bounded_sequence_struct_field);
    m_unbounded_sequence_char_field = std::move(x.m_unbounded_sequence_char_field);
    m_unbounded_sequence_uint8_field = std::move(x.m_unbounded_sequence_uint8_field);
    m_unbounded_sequence_int16_field = std::move(x.m_unbounded_sequence_int16_field);
    m_unbounded_sequence_uint16_field = std::move(x.m_unbounded_sequence_uint16_field);
    m_unbounded_sequence_int32_field = std::move(x.m_unbounded_sequence_int32_field);
    m_unbounded_sequence_uint32_field = std::move(x.m_unbounded_sequence_uint32_field);
    m_unbounded_sequence_int64_field = std::move(x.m_unbounded_sequence_int64_field);
    m_unbounded_sequence_uint64_field = std::move(x.m_unbounded_sequence_uint64_field);
    m_unbounded_sequence_float_field = std::move(x.m_unbounded_sequence_float_field);
    m_unbounded_sequence_double_field = std::move(x.m_unbounded_sequence_double_field);
    m_unbounded_sequence_bool_field = std::move(x.m_unbounded_sequence_bool_field);
    m_unbounded_sequence_enum_field = std::move(x.m_unbounded_sequence_enum_field);
    m_unbounded_sequence_enum2_field = std::move(x.m_unbounded_sequence_enum2_field);
    m_unbounded_sequence_struct_field = std::move(x.m_unbounded_sequence_struct_field);

    return *this;
}

bool CompleteTestType::operator ==(
        const CompleteTestType& x) const
{

    return (m_char_field == x.m_char_field && m_uint8_field == x.m_uint8_field && m_int16_field == x.m_int16_field && m_uint16_field == x.m_uint16_field && m_int32_field == x.m_int32_field && m_uint32_field == x.m_uint32_field && m_int64_field == x.m_int64_field && m_uint64_field == x.m_uint64_field && m_float_field == x.m_float_field && m_double_field == x.m_double_field && m_bool_field == x.m_bool_field && m_string_field == x.m_string_field && m_enum_field == x.m_enum_field && m_enum2_field == x.m_enum2_field && m_struct_field == x.m_struct_field && m_array_char_field == x.m_array_char_field && m_array_uint8_field == x.m_array_uint8_field && m_array_int16_field == x.m_array_int16_field && m_array_uint16_field == x.m_array_uint16_field && m_array_int32_field == x.m_array_int32_field && m_array_uint32_field == x.m_array_uint32_field && m_array_int64_field == x.m_array_int64_field && m_array_uint64_field == x.m_array_uint64_field && m_array_float_field == x.m_array_float_field && m_array_double_field == x.m_array_double_field && m_array_bool_field == x.m_array_bool_field && m_array_enum_field == x.m_array_enum_field && m_array_enum2_field == x.m_array_enum2_field && m_array_struct_field == x.m_array_struct_field && m_bounded_sequence_char_field == x.m_bounded_sequence_char_field && m_bounded_sequence_uint8_field == x.m_bounded_sequence_uint8_field && m_bounded_sequence_int16_field == x.m_bounded_sequence_int16_field && m_bounded_sequence_uint16_field == x.m_bounded_sequence_uint16_field && m_bounded_sequence_int32_field == x.m_bounded_sequence_int32_field && m_bounded_sequence_uint32_field == x.m_bounded_sequence_uint32_field && m_bounded_sequence_int64_field == x.m_bounded_sequence_int64_field && m_bounded_sequence_uint64_field == x.m_bounded_sequence_uint64_field && m_bounded_sequence_float_field == x.m_bounded_sequence_float_field && m_bounded_sequence_double_field == x.m_bounded_sequence_double_field && m_bounded_sequence_bool_field == x.m_bounded_sequence_bool_field && m_bounded_sequence_enum_field == x.m_bounded_sequence_enum_field && m_bounded_sequence_enum2_field == x.m_bounded_sequence_enum2_field && m_bounded_sequence_struct_field == x.m_bounded_sequence_struct_field && m_unbounded_sequence_char_field == x.m_unbounded_sequence_char_field && m_unbounded_sequence_uint8_field == x.m_unbounded_sequence_uint8_field && m_unbounded_sequence_int16_field == x.m_unbounded_sequence_int16_field && m_unbounded_sequence_uint16_field == x.m_unbounded_sequence_uint16_field && m_unbounded_sequence_int32_field == x.m_unbounded_sequence_int32_field && m_unbounded_sequence_uint32_field == x.m_unbounded_sequence_uint32_field && m_unbounded_sequence_int64_field == x.m_unbounded_sequence_int64_field && m_unbounded_sequence_uint64_field == x.m_unbounded_sequence_uint64_field && m_unbounded_sequence_float_field == x.m_unbounded_sequence_float_field && m_unbounded_sequence_double_field == x.m_unbounded_sequence_double_field && m_unbounded_sequence_bool_field == x.m_unbounded_sequence_bool_field && m_unbounded_sequence_enum_field == x.m_unbounded_sequence_enum_field && m_unbounded_sequence_enum2_field == x.m_unbounded_sequence_enum2_field && m_unbounded_sequence_struct_field == x.m_unbounded_sequence_struct_field);
}

bool CompleteTestType::operator !=(
        const CompleteTestType& x) const
{
    return !(*this == x);
}

size_t CompleteTestType::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += StructType::getMaxCdrSerializedSize(current_alignment);
    current_alignment += ((max_array_size) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += ((max_array_size) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += ((max_array_size) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += ((max_array_size) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += ((max_array_size) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((max_array_size) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((max_array_size) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ((max_array_size) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ((max_array_size) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((max_array_size) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ((max_array_size) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += ((max_array_size) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((max_array_size) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    for(size_t a = 0; a < (max_array_size); ++a)
    {
        current_alignment += StructType::getMaxCdrSerializedSize(current_alignment);}
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < max_seq_size; ++a)
    {
        current_alignment += StructType::getMaxCdrSerializedSize(current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += StructType::getMaxCdrSerializedSize(current_alignment);}


    return current_alignment - initial_alignment;
}

size_t CompleteTestType::getCdrSerializedSize(
        const CompleteTestType& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.string_field().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += StructType::getCdrSerializedSize(data.struct_field(), current_alignment);
    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }


    for(size_t a = 0; a < data.array_struct_field().size(); ++a)
    {
            current_alignment += StructType::getCdrSerializedSize(data.array_struct_field().at(a), current_alignment);
    }
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_char_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_char_field().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_uint8_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_uint8_field().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_int16_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_int16_field().size() * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_uint16_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_uint16_field().size() * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_int32_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_int32_field().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_uint32_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_uint32_field().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_int64_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_int64_field().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_uint64_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_uint64_field().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_float_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_float_field().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_double_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_double_field().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_bool_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_bool_field().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_enum_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_enum_field().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_enum2_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_enum2_field().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.bounded_sequence_struct_field().size(); ++a)
    {
        current_alignment += StructType::getCdrSerializedSize(data.bounded_sequence_struct_field().at(a), current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_char_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_char_field().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_uint8_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_uint8_field().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_int16_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_int16_field().size() * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_uint16_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_uint16_field().size() * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_int32_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_int32_field().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_uint32_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_uint32_field().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_int64_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_int64_field().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_uint64_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_uint64_field().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_float_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_float_field().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_double_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_double_field().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_bool_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_bool_field().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_enum_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_enum_field().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_enum2_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_enum2_field().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.unbounded_sequence_struct_field().size(); ++a)
    {
        current_alignment += StructType::getCdrSerializedSize(data.unbounded_sequence_struct_field().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void CompleteTestType::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_char_field;
    scdr << m_uint8_field;
    scdr << m_int16_field;
    scdr << m_uint16_field;
    scdr << m_int32_field;
    scdr << m_uint32_field;
    scdr << m_int64_field;
    scdr << m_uint64_field;
    scdr << m_float_field;
    scdr << m_double_field;
    scdr << m_bool_field;
    scdr << m_string_field;
    scdr << (uint32_t)m_enum_field;
    scdr << (uint32_t)m_enum2_field;
    scdr << m_struct_field;
    scdr << m_array_char_field;

    scdr << m_array_uint8_field;

    scdr << m_array_int16_field;

    scdr << m_array_uint16_field;

    scdr << m_array_int32_field;

    scdr << m_array_uint32_field;

    scdr << m_array_int64_field;

    scdr << m_array_uint64_field;

    scdr << m_array_float_field;

    scdr << m_array_double_field;

    scdr << m_array_bool_field;

    scdr.serializeArray(reinterpret_cast<const uint32_t*>(m_array_enum_field.data()), m_array_enum_field.size());


    scdr.serializeArray(reinterpret_cast<const uint32_t*>(m_array_enum2_field.data()), m_array_enum2_field.size());


    scdr << m_array_struct_field;

    scdr << m_bounded_sequence_char_field;
    scdr << m_bounded_sequence_uint8_field;
    scdr << m_bounded_sequence_int16_field;
    scdr << m_bounded_sequence_uint16_field;
    scdr << m_bounded_sequence_int32_field;
    scdr << m_bounded_sequence_uint32_field;
    scdr << m_bounded_sequence_int64_field;
    scdr << m_bounded_sequence_uint64_field;
    scdr << m_bounded_sequence_float_field;
    scdr << m_bounded_sequence_double_field;
    scdr << m_bounded_sequence_bool_field;
    scdr << static_cast<uint32_t>(m_bounded_sequence_enum_field.size());
    scdr.serializeArray(reinterpret_cast<const uint32_t*>(m_bounded_sequence_enum_field.data()), m_bounded_sequence_enum_field.size());

    scdr << static_cast<uint32_t>(m_bounded_sequence_enum2_field.size());
    scdr.serializeArray(reinterpret_cast<const uint32_t*>(m_bounded_sequence_enum2_field.data()), m_bounded_sequence_enum2_field.size());

    scdr << m_bounded_sequence_struct_field;
    scdr << m_unbounded_sequence_char_field;
    scdr << m_unbounded_sequence_uint8_field;
    scdr << m_unbounded_sequence_int16_field;
    scdr << m_unbounded_sequence_uint16_field;
    scdr << m_unbounded_sequence_int32_field;
    scdr << m_unbounded_sequence_uint32_field;
    scdr << m_unbounded_sequence_int64_field;
    scdr << m_unbounded_sequence_uint64_field;
    scdr << m_unbounded_sequence_float_field;
    scdr << m_unbounded_sequence_double_field;
    scdr << m_unbounded_sequence_bool_field;
    scdr << static_cast<uint32_t>(m_unbounded_sequence_enum_field.size());
    scdr.serializeArray(reinterpret_cast<const uint32_t*>(m_unbounded_sequence_enum_field.data()), m_unbounded_sequence_enum_field.size());

    scdr << static_cast<uint32_t>(m_unbounded_sequence_enum2_field.size());
    scdr.serializeArray(reinterpret_cast<const uint32_t*>(m_unbounded_sequence_enum2_field.data()), m_unbounded_sequence_enum2_field.size());

    scdr << m_unbounded_sequence_struct_field;

}

void CompleteTestType::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_char_field;
    dcdr >> m_uint8_field;
    dcdr >> m_int16_field;
    dcdr >> m_uint16_field;
    dcdr >> m_int32_field;
    dcdr >> m_uint32_field;
    dcdr >> m_int64_field;
    dcdr >> m_uint64_field;
    dcdr >> m_float_field;
    dcdr >> m_double_field;
    dcdr >> m_bool_field;
    dcdr >> m_string_field;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_enum_field = (Color)enum_value;
    }

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_enum2_field = (Material)enum_value;
    }

    dcdr >> m_struct_field;
    dcdr >> m_array_char_field;

    dcdr >> m_array_uint8_field;

    dcdr >> m_array_int16_field;

    dcdr >> m_array_uint16_field;

    dcdr >> m_array_int32_field;

    dcdr >> m_array_uint32_field;

    dcdr >> m_array_int64_field;

    dcdr >> m_array_uint64_field;

    dcdr >> m_array_float_field;

    dcdr >> m_array_double_field;

    dcdr >> m_array_bool_field;

    dcdr.deserializeArray(reinterpret_cast<uint32_t*>(m_array_enum_field.data()), m_array_enum_field.size());


    dcdr.deserializeArray(reinterpret_cast<uint32_t*>(m_array_enum2_field.data()), m_array_enum2_field.size());


    dcdr >> m_array_struct_field;

    dcdr >> m_bounded_sequence_char_field;
    dcdr >> m_bounded_sequence_uint8_field;
    dcdr >> m_bounded_sequence_int16_field;
    dcdr >> m_bounded_sequence_uint16_field;
    dcdr >> m_bounded_sequence_int32_field;
    dcdr >> m_bounded_sequence_uint32_field;
    dcdr >> m_bounded_sequence_int64_field;
    dcdr >> m_bounded_sequence_uint64_field;
    dcdr >> m_bounded_sequence_float_field;
    dcdr >> m_bounded_sequence_double_field;
    dcdr >> m_bounded_sequence_bool_field;
    {
        uint32_t seq_length = 0;
        dcdr >> seq_length;
        m_bounded_sequence_enum_field.resize(seq_length);
        dcdr.deserializeArray(reinterpret_cast<uint32_t*>(m_bounded_sequence_enum_field.data()), seq_length);
    }

    {
        uint32_t seq_length = 0;
        dcdr >> seq_length;
        m_bounded_sequence_enum2_field.resize(seq_length);
        dcdr.deserializeArray(reinterpret_cast<uint32_t*>(m_bounded_sequence_enum2_field.data()), seq_length);
    }

    dcdr >> m_bounded_sequence_struct_field;
    dcdr >> m_unbounded_sequence_char_field;
    dcdr >> m_unbounded_sequence_uint8_field;
    dcdr >> m_unbounded_sequence_int16_field;
    dcdr >> m_unbounded_sequence_uint16_field;
    dcdr >> m_unbounded_sequence_int32_field;
    dcdr >> m_unbounded_sequence_uint32_field;
    dcdr >> m_unbounded_sequence_int64_field;
    dcdr >> m_unbounded_sequence_uint64_field;
    dcdr >> m_unbounded_sequence_float_field;
    dcdr >> m_unbounded_sequence_double_field;
    dcdr >> m_unbounded_sequence_bool_field;
    {
        uint32_t seq_length = 0;
        dcdr >> seq_length;
        m_unbounded_sequence_enum_field.resize(seq_length);
        dcdr.deserializeArray(reinterpret_cast<uint32_t*>(m_unbounded_sequence_enum_field.data()), seq_length);
    }

    {
        uint32_t seq_length = 0;
        dcdr >> seq_length;
        m_unbounded_sequence_enum2_field.resize(seq_length);
        dcdr.deserializeArray(reinterpret_cast<uint32_t*>(m_unbounded_sequence_enum2_field.data()), seq_length);
    }

    dcdr >> m_unbounded_sequence_struct_field;
}

/*!
 * @brief This function sets a value in member char_field
 * @param _char_field New value for member char_field
 */
void CompleteTestType::char_field(
        char _char_field)
{
    m_char_field = _char_field;
}

/*!
 * @brief This function returns the value of member char_field
 * @return Value of member char_field
 */
char CompleteTestType::char_field() const
{
    return m_char_field;
}

/*!
 * @brief This function returns a reference to member char_field
 * @return Reference to member char_field
 */
char& CompleteTestType::char_field()
{
    return m_char_field;
}

/*!
 * @brief This function sets a value in member uint8_field
 * @param _uint8_field New value for member uint8_field
 */
void CompleteTestType::uint8_field(
        uint8_t _uint8_field)
{
    m_uint8_field = _uint8_field;
}

/*!
 * @brief This function returns the value of member uint8_field
 * @return Value of member uint8_field
 */
uint8_t CompleteTestType::uint8_field() const
{
    return m_uint8_field;
}

/*!
 * @brief This function returns a reference to member uint8_field
 * @return Reference to member uint8_field
 */
uint8_t& CompleteTestType::uint8_field()
{
    return m_uint8_field;
}

/*!
 * @brief This function sets a value in member int16_field
 * @param _int16_field New value for member int16_field
 */
void CompleteTestType::int16_field(
        int16_t _int16_field)
{
    m_int16_field = _int16_field;
}

/*!
 * @brief This function returns the value of member int16_field
 * @return Value of member int16_field
 */
int16_t CompleteTestType::int16_field() const
{
    return m_int16_field;
}

/*!
 * @brief This function returns a reference to member int16_field
 * @return Reference to member int16_field
 */
int16_t& CompleteTestType::int16_field()
{
    return m_int16_field;
}

/*!
 * @brief This function sets a value in member uint16_field
 * @param _uint16_field New value for member uint16_field
 */
void CompleteTestType::uint16_field(
        uint16_t _uint16_field)
{
    m_uint16_field = _uint16_field;
}

/*!
 * @brief This function returns the value of member uint16_field
 * @return Value of member uint16_field
 */
uint16_t CompleteTestType::uint16_field() const
{
    return m_uint16_field;
}

/*!
 * @brief This function returns a reference to member uint16_field
 * @return Reference to member uint16_field
 */
uint16_t& CompleteTestType::uint16_field()
{
    return m_uint16_field;
}

/*!
 * @brief This function sets a value in member int32_field
 * @param _int32_field New value for member int32_field
 */
void CompleteTestType::int32_field(
        int32_t _int32_field)
{
    m_int32_field = _int32_field;
}

/*!
 * @brief This function returns the value of member int32_field
 * @return Value of member int32_field
 */
int32_t CompleteTestType::int32_field() const
{
    return m_int32_field;
}

/*!
 * @brief This function returns a reference to member int32_field
 * @return Reference to member int32_field
 */
int32_t& CompleteTestType::int32_field()
{
    return m_int32_field;
}

/*!
 * @brief This function sets a value in member uint32_field
 * @param _uint32_field New value for member uint32_field
 */
void CompleteTestType::uint32_field(
        uint32_t _uint32_field)
{
    m_uint32_field = _uint32_field;
}

/*!
 * @brief This function returns the value of member uint32_field
 * @return Value of member uint32_field
 */
uint32_t CompleteTestType::uint32_field() const
{
    return m_uint32_field;
}

/*!
 * @brief This function returns a reference to member uint32_field
 * @return Reference to member uint32_field
 */
uint32_t& CompleteTestType::uint32_field()
{
    return m_uint32_field;
}

/*!
 * @brief This function sets a value in member int64_field
 * @param _int64_field New value for member int64_field
 */
void CompleteTestType::int64_field(
        int64_t _int64_field)
{
    m_int64_field = _int64_field;
}

/*!
 * @brief This function returns the value of member int64_field
 * @return Value of member int64_field
 */
int64_t CompleteTestType::int64_field() const
{
    return m_int64_field;
}

/*!
 * @brief This function returns a reference to member int64_field
 * @return Reference to member int64_field
 */
int64_t& CompleteTestType::int64_field()
{
    return m_int64_field;
}

/*!
 * @brief This function sets a value in member uint64_field
 * @param _uint64_field New value for member uint64_field
 */
void CompleteTestType::uint64_field(
        uint64_t _uint64_field)
{
    m_uint64_field = _uint64_field;
}

/*!
 * @brief This function returns the value of member uint64_field
 * @return Value of member uint64_field
 */
uint64_t CompleteTestType::uint64_field() const
{
    return m_uint64_field;
}

/*!
 * @brief This function returns a reference to member uint64_field
 * @return Reference to member uint64_field
 */
uint64_t& CompleteTestType::uint64_field()
{
    return m_uint64_field;
}

/*!
 * @brief This function sets a value in member float_field
 * @param _float_field New value for member float_field
 */
void CompleteTestType::float_field(
        float _float_field)
{
    m_float_field = _float_field;
}

/*!
 * @brief This function returns the value of member float_field
 * @return Value of member float_field
 */
float CompleteTestType::float_field() const
{
    return m_float_field;
}

/*!
 * @brief This function returns a reference to member float_field
 * @return Reference to member float_field
 */
float& CompleteTestType::float_field()
{
    return m_float_field;
}

/*!
 * @brief This function sets a value in member double_field
 * @param _double_field New value for member double_field
 */
void CompleteTestType::double_field(
        double _double_field)
{
    m_double_field = _double_field;
}

/*!
 * @brief This function returns the value of member double_field
 * @return Value of member double_field
 */
double CompleteTestType::double_field() const
{
    return m_double_field;
}

/*!
 * @brief This function returns a reference to member double_field
 * @return Reference to member double_field
 */
double& CompleteTestType::double_field()
{
    return m_double_field;
}

/*!
 * @brief This function sets a value in member bool_field
 * @param _bool_field New value for member bool_field
 */
void CompleteTestType::bool_field(
        bool _bool_field)
{
    m_bool_field = _bool_field;
}

/*!
 * @brief This function returns the value of member bool_field
 * @return Value of member bool_field
 */
bool CompleteTestType::bool_field() const
{
    return m_bool_field;
}

/*!
 * @brief This function returns a reference to member bool_field
 * @return Reference to member bool_field
 */
bool& CompleteTestType::bool_field()
{
    return m_bool_field;
}

/*!
 * @brief This function copies the value in member string_field
 * @param _string_field New value to be copied in member string_field
 */
void CompleteTestType::string_field(
        const std::string& _string_field)
{
    m_string_field = _string_field;
}

/*!
 * @brief This function moves the value in member string_field
 * @param _string_field New value to be moved in member string_field
 */
void CompleteTestType::string_field(
        std::string&& _string_field)
{
    m_string_field = std::move(_string_field);
}

/*!
 * @brief This function returns a constant reference to member string_field
 * @return Constant reference to member string_field
 */
const std::string& CompleteTestType::string_field() const
{
    return m_string_field;
}

/*!
 * @brief This function returns a reference to member string_field
 * @return Reference to member string_field
 */
std::string& CompleteTestType::string_field()
{
    return m_string_field;
}
/*!
 * @brief This function sets a value in member enum_field
 * @param _enum_field New value for member enum_field
 */
void CompleteTestType::enum_field(
        Color _enum_field)
{
    m_enum_field = _enum_field;
}

/*!
 * @brief This function returns the value of member enum_field
 * @return Value of member enum_field
 */
Color CompleteTestType::enum_field() const
{
    return m_enum_field;
}

/*!
 * @brief This function returns a reference to member enum_field
 * @return Reference to member enum_field
 */
Color& CompleteTestType::enum_field()
{
    return m_enum_field;
}

/*!
 * @brief This function sets a value in member enum2_field
 * @param _enum2_field New value for member enum2_field
 */
void CompleteTestType::enum2_field(
        Material _enum2_field)
{
    m_enum2_field = _enum2_field;
}

/*!
 * @brief This function returns the value of member enum2_field
 * @return Value of member enum2_field
 */
Material CompleteTestType::enum2_field() const
{
    return m_enum2_field;
}

/*!
 * @brief This function returns a reference to member enum2_field
 * @return Reference to member enum2_field
 */
Material& CompleteTestType::enum2_field()
{
    return m_enum2_field;
}

/*!
 * @brief This function copies the value in member struct_field
 * @param _struct_field New value to be copied in member struct_field
 */
void CompleteTestType::struct_field(
        const StructType& _struct_field)
{
    m_struct_field = _struct_field;
}

/*!
 * @brief This function moves the value in member struct_field
 * @param _struct_field New value to be moved in member struct_field
 */
void CompleteTestType::struct_field(
        StructType&& _struct_field)
{
    m_struct_field = std::move(_struct_field);
}

/*!
 * @brief This function returns a constant reference to member struct_field
 * @return Constant reference to member struct_field
 */
const StructType& CompleteTestType::struct_field() const
{
    return m_struct_field;
}

/*!
 * @brief This function returns a reference to member struct_field
 * @return Reference to member struct_field
 */
StructType& CompleteTestType::struct_field()
{
    return m_struct_field;
}
/*!
 * @brief This function copies the value in member array_char_field
 * @param _array_char_field New value to be copied in member array_char_field
 */
void CompleteTestType::array_char_field(
        const std::array<char, max_array_size>& _array_char_field)
{
    m_array_char_field = _array_char_field;
}

/*!
 * @brief This function moves the value in member array_char_field
 * @param _array_char_field New value to be moved in member array_char_field
 */
void CompleteTestType::array_char_field(
        std::array<char, max_array_size>&& _array_char_field)
{
    m_array_char_field = std::move(_array_char_field);
}

/*!
 * @brief This function returns a constant reference to member array_char_field
 * @return Constant reference to member array_char_field
 */
const std::array<char, max_array_size>& CompleteTestType::array_char_field() const
{
    return m_array_char_field;
}

/*!
 * @brief This function returns a reference to member array_char_field
 * @return Reference to member array_char_field
 */
std::array<char, max_array_size>& CompleteTestType::array_char_field()
{
    return m_array_char_field;
}
/*!
 * @brief This function copies the value in member array_uint8_field
 * @param _array_uint8_field New value to be copied in member array_uint8_field
 */
void CompleteTestType::array_uint8_field(
        const std::array<uint8_t, max_array_size>& _array_uint8_field)
{
    m_array_uint8_field = _array_uint8_field;
}

/*!
 * @brief This function moves the value in member array_uint8_field
 * @param _array_uint8_field New value to be moved in member array_uint8_field
 */
void CompleteTestType::array_uint8_field(
        std::array<uint8_t, max_array_size>&& _array_uint8_field)
{
    m_array_uint8_field = std::move(_array_uint8_field);
}

/*!
 * @brief This function returns a constant reference to member array_uint8_field
 * @return Constant reference to member array_uint8_field
 */
const std::array<uint8_t, max_array_size>& CompleteTestType::array_uint8_field() const
{
    return m_array_uint8_field;
}

/*!
 * @brief This function returns a reference to member array_uint8_field
 * @return Reference to member array_uint8_field
 */
std::array<uint8_t, max_array_size>& CompleteTestType::array_uint8_field()
{
    return m_array_uint8_field;
}
/*!
 * @brief This function copies the value in member array_int16_field
 * @param _array_int16_field New value to be copied in member array_int16_field
 */
void CompleteTestType::array_int16_field(
        const std::array<int16_t, max_array_size>& _array_int16_field)
{
    m_array_int16_field = _array_int16_field;
}

/*!
 * @brief This function moves the value in member array_int16_field
 * @param _array_int16_field New value to be moved in member array_int16_field
 */
void CompleteTestType::array_int16_field(
        std::array<int16_t, max_array_size>&& _array_int16_field)
{
    m_array_int16_field = std::move(_array_int16_field);
}

/*!
 * @brief This function returns a constant reference to member array_int16_field
 * @return Constant reference to member array_int16_field
 */
const std::array<int16_t, max_array_size>& CompleteTestType::array_int16_field() const
{
    return m_array_int16_field;
}

/*!
 * @brief This function returns a reference to member array_int16_field
 * @return Reference to member array_int16_field
 */
std::array<int16_t, max_array_size>& CompleteTestType::array_int16_field()
{
    return m_array_int16_field;
}
/*!
 * @brief This function copies the value in member array_uint16_field
 * @param _array_uint16_field New value to be copied in member array_uint16_field
 */
void CompleteTestType::array_uint16_field(
        const std::array<uint16_t, max_array_size>& _array_uint16_field)
{
    m_array_uint16_field = _array_uint16_field;
}

/*!
 * @brief This function moves the value in member array_uint16_field
 * @param _array_uint16_field New value to be moved in member array_uint16_field
 */
void CompleteTestType::array_uint16_field(
        std::array<uint16_t, max_array_size>&& _array_uint16_field)
{
    m_array_uint16_field = std::move(_array_uint16_field);
}

/*!
 * @brief This function returns a constant reference to member array_uint16_field
 * @return Constant reference to member array_uint16_field
 */
const std::array<uint16_t, max_array_size>& CompleteTestType::array_uint16_field() const
{
    return m_array_uint16_field;
}

/*!
 * @brief This function returns a reference to member array_uint16_field
 * @return Reference to member array_uint16_field
 */
std::array<uint16_t, max_array_size>& CompleteTestType::array_uint16_field()
{
    return m_array_uint16_field;
}
/*!
 * @brief This function copies the value in member array_int32_field
 * @param _array_int32_field New value to be copied in member array_int32_field
 */
void CompleteTestType::array_int32_field(
        const std::array<int32_t, max_array_size>& _array_int32_field)
{
    m_array_int32_field = _array_int32_field;
}

/*!
 * @brief This function moves the value in member array_int32_field
 * @param _array_int32_field New value to be moved in member array_int32_field
 */
void CompleteTestType::array_int32_field(
        std::array<int32_t, max_array_size>&& _array_int32_field)
{
    m_array_int32_field = std::move(_array_int32_field);
}

/*!
 * @brief This function returns a constant reference to member array_int32_field
 * @return Constant reference to member array_int32_field
 */
const std::array<int32_t, max_array_size>& CompleteTestType::array_int32_field() const
{
    return m_array_int32_field;
}

/*!
 * @brief This function returns a reference to member array_int32_field
 * @return Reference to member array_int32_field
 */
std::array<int32_t, max_array_size>& CompleteTestType::array_int32_field()
{
    return m_array_int32_field;
}
/*!
 * @brief This function copies the value in member array_uint32_field
 * @param _array_uint32_field New value to be copied in member array_uint32_field
 */
void CompleteTestType::array_uint32_field(
        const std::array<uint32_t, max_array_size>& _array_uint32_field)
{
    m_array_uint32_field = _array_uint32_field;
}

/*!
 * @brief This function moves the value in member array_uint32_field
 * @param _array_uint32_field New value to be moved in member array_uint32_field
 */
void CompleteTestType::array_uint32_field(
        std::array<uint32_t, max_array_size>&& _array_uint32_field)
{
    m_array_uint32_field = std::move(_array_uint32_field);
}

/*!
 * @brief This function returns a constant reference to member array_uint32_field
 * @return Constant reference to member array_uint32_field
 */
const std::array<uint32_t, max_array_size>& CompleteTestType::array_uint32_field() const
{
    return m_array_uint32_field;
}

/*!
 * @brief This function returns a reference to member array_uint32_field
 * @return Reference to member array_uint32_field
 */
std::array<uint32_t, max_array_size>& CompleteTestType::array_uint32_field()
{
    return m_array_uint32_field;
}
/*!
 * @brief This function copies the value in member array_int64_field
 * @param _array_int64_field New value to be copied in member array_int64_field
 */
void CompleteTestType::array_int64_field(
        const std::array<int64_t, max_array_size>& _array_int64_field)
{
    m_array_int64_field = _array_int64_field;
}

/*!
 * @brief This function moves the value in member array_int64_field
 * @param _array_int64_field New value to be moved in member array_int64_field
 */
void CompleteTestType::array_int64_field(
        std::array<int64_t, max_array_size>&& _array_int64_field)
{
    m_array_int64_field = std::move(_array_int64_field);
}

/*!
 * @brief This function returns a constant reference to member array_int64_field
 * @return Constant reference to member array_int64_field
 */
const std::array<int64_t, max_array_size>& CompleteTestType::array_int64_field() const
{
    return m_array_int64_field;
}

/*!
 * @brief This function returns a reference to member array_int64_field
 * @return Reference to member array_int64_field
 */
std::array<int64_t, max_array_size>& CompleteTestType::array_int64_field()
{
    return m_array_int64_field;
}
/*!
 * @brief This function copies the value in member array_uint64_field
 * @param _array_uint64_field New value to be copied in member array_uint64_field
 */
void CompleteTestType::array_uint64_field(
        const std::array<uint64_t, max_array_size>& _array_uint64_field)
{
    m_array_uint64_field = _array_uint64_field;
}

/*!
 * @brief This function moves the value in member array_uint64_field
 * @param _array_uint64_field New value to be moved in member array_uint64_field
 */
void CompleteTestType::array_uint64_field(
        std::array<uint64_t, max_array_size>&& _array_uint64_field)
{
    m_array_uint64_field = std::move(_array_uint64_field);
}

/*!
 * @brief This function returns a constant reference to member array_uint64_field
 * @return Constant reference to member array_uint64_field
 */
const std::array<uint64_t, max_array_size>& CompleteTestType::array_uint64_field() const
{
    return m_array_uint64_field;
}

/*!
 * @brief This function returns a reference to member array_uint64_field
 * @return Reference to member array_uint64_field
 */
std::array<uint64_t, max_array_size>& CompleteTestType::array_uint64_field()
{
    return m_array_uint64_field;
}
/*!
 * @brief This function copies the value in member array_float_field
 * @param _array_float_field New value to be copied in member array_float_field
 */
void CompleteTestType::array_float_field(
        const std::array<float, max_array_size>& _array_float_field)
{
    m_array_float_field = _array_float_field;
}

/*!
 * @brief This function moves the value in member array_float_field
 * @param _array_float_field New value to be moved in member array_float_field
 */
void CompleteTestType::array_float_field(
        std::array<float, max_array_size>&& _array_float_field)
{
    m_array_float_field = std::move(_array_float_field);
}

/*!
 * @brief This function returns a constant reference to member array_float_field
 * @return Constant reference to member array_float_field
 */
const std::array<float, max_array_size>& CompleteTestType::array_float_field() const
{
    return m_array_float_field;
}

/*!
 * @brief This function returns a reference to member array_float_field
 * @return Reference to member array_float_field
 */
std::array<float, max_array_size>& CompleteTestType::array_float_field()
{
    return m_array_float_field;
}
/*!
 * @brief This function copies the value in member array_double_field
 * @param _array_double_field New value to be copied in member array_double_field
 */
void CompleteTestType::array_double_field(
        const std::array<double, max_array_size>& _array_double_field)
{
    m_array_double_field = _array_double_field;
}

/*!
 * @brief This function moves the value in member array_double_field
 * @param _array_double_field New value to be moved in member array_double_field
 */
void CompleteTestType::array_double_field(
        std::array<double, max_array_size>&& _array_double_field)
{
    m_array_double_field = std::move(_array_double_field);
}

/*!
 * @brief This function returns a constant reference to member array_double_field
 * @return Constant reference to member array_double_field
 */
const std::array<double, max_array_size>& CompleteTestType::array_double_field() const
{
    return m_array_double_field;
}

/*!
 * @brief This function returns a reference to member array_double_field
 * @return Reference to member array_double_field
 */
std::array<double, max_array_size>& CompleteTestType::array_double_field()
{
    return m_array_double_field;
}
/*!
 * @brief This function copies the value in member array_bool_field
 * @param _array_bool_field New value to be copied in member array_bool_field
 */
void CompleteTestType::array_bool_field(
        const std::array<bool, max_array_size>& _array_bool_field)
{
    m_array_bool_field = _array_bool_field;
}

/*!
 * @brief This function moves the value in member array_bool_field
 * @param _array_bool_field New value to be moved in member array_bool_field
 */
void CompleteTestType::array_bool_field(
        std::array<bool, max_array_size>&& _array_bool_field)
{
    m_array_bool_field = std::move(_array_bool_field);
}

/*!
 * @brief This function returns a constant reference to member array_bool_field
 * @return Constant reference to member array_bool_field
 */
const std::array<bool, max_array_size>& CompleteTestType::array_bool_field() const
{
    return m_array_bool_field;
}

/*!
 * @brief This function returns a reference to member array_bool_field
 * @return Reference to member array_bool_field
 */
std::array<bool, max_array_size>& CompleteTestType::array_bool_field()
{
    return m_array_bool_field;
}
/*!
 * @brief This function copies the value in member array_enum_field
 * @param _array_enum_field New value to be copied in member array_enum_field
 */
void CompleteTestType::array_enum_field(
        const std::array<Color, max_array_size>& _array_enum_field)
{
    m_array_enum_field = _array_enum_field;
}

/*!
 * @brief This function moves the value in member array_enum_field
 * @param _array_enum_field New value to be moved in member array_enum_field
 */
void CompleteTestType::array_enum_field(
        std::array<Color, max_array_size>&& _array_enum_field)
{
    m_array_enum_field = std::move(_array_enum_field);
}

/*!
 * @brief This function returns a constant reference to member array_enum_field
 * @return Constant reference to member array_enum_field
 */
const std::array<Color, max_array_size>& CompleteTestType::array_enum_field() const
{
    return m_array_enum_field;
}

/*!
 * @brief This function returns a reference to member array_enum_field
 * @return Reference to member array_enum_field
 */
std::array<Color, max_array_size>& CompleteTestType::array_enum_field()
{
    return m_array_enum_field;
}
/*!
 * @brief This function copies the value in member array_enum2_field
 * @param _array_enum2_field New value to be copied in member array_enum2_field
 */
void CompleteTestType::array_enum2_field(
        const std::array<Material, max_array_size>& _array_enum2_field)
{
    m_array_enum2_field = _array_enum2_field;
}

/*!
 * @brief This function moves the value in member array_enum2_field
 * @param _array_enum2_field New value to be moved in member array_enum2_field
 */
void CompleteTestType::array_enum2_field(
        std::array<Material, max_array_size>&& _array_enum2_field)
{
    m_array_enum2_field = std::move(_array_enum2_field);
}

/*!
 * @brief This function returns a constant reference to member array_enum2_field
 * @return Constant reference to member array_enum2_field
 */
const std::array<Material, max_array_size>& CompleteTestType::array_enum2_field() const
{
    return m_array_enum2_field;
}

/*!
 * @brief This function returns a reference to member array_enum2_field
 * @return Reference to member array_enum2_field
 */
std::array<Material, max_array_size>& CompleteTestType::array_enum2_field()
{
    return m_array_enum2_field;
}
/*!
 * @brief This function copies the value in member array_struct_field
 * @param _array_struct_field New value to be copied in member array_struct_field
 */
void CompleteTestType::array_struct_field(
        const std::array<StructType, max_array_size>& _array_struct_field)
{
    m_array_struct_field = _array_struct_field;
}

/*!
 * @brief This function moves the value in member array_struct_field
 * @param _array_struct_field New value to be moved in member array_struct_field
 */
void CompleteTestType::array_struct_field(
        std::array<StructType, max_array_size>&& _array_struct_field)
{
    m_array_struct_field = std::move(_array_struct_field);
}

/*!
 * @brief This function returns a constant reference to member array_struct_field
 * @return Constant reference to member array_struct_field
 */
const std::array<StructType, max_array_size>& CompleteTestType::array_struct_field() const
{
    return m_array_struct_field;
}

/*!
 * @brief This function returns a reference to member array_struct_field
 * @return Reference to member array_struct_field
 */
std::array<StructType, max_array_size>& CompleteTestType::array_struct_field()
{
    return m_array_struct_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_char_field
 * @param _bounded_sequence_char_field New value to be copied in member bounded_sequence_char_field
 */
void CompleteTestType::bounded_sequence_char_field(
        const std::vector<char>& _bounded_sequence_char_field)
{
    m_bounded_sequence_char_field = _bounded_sequence_char_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_char_field
 * @param _bounded_sequence_char_field New value to be moved in member bounded_sequence_char_field
 */
void CompleteTestType::bounded_sequence_char_field(
        std::vector<char>&& _bounded_sequence_char_field)
{
    m_bounded_sequence_char_field = std::move(_bounded_sequence_char_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_char_field
 * @return Constant reference to member bounded_sequence_char_field
 */
const std::vector<char>& CompleteTestType::bounded_sequence_char_field() const
{
    return m_bounded_sequence_char_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_char_field
 * @return Reference to member bounded_sequence_char_field
 */
std::vector<char>& CompleteTestType::bounded_sequence_char_field()
{
    return m_bounded_sequence_char_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_uint8_field
 * @param _bounded_sequence_uint8_field New value to be copied in member bounded_sequence_uint8_field
 */
void CompleteTestType::bounded_sequence_uint8_field(
        const std::vector<uint8_t>& _bounded_sequence_uint8_field)
{
    m_bounded_sequence_uint8_field = _bounded_sequence_uint8_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_uint8_field
 * @param _bounded_sequence_uint8_field New value to be moved in member bounded_sequence_uint8_field
 */
void CompleteTestType::bounded_sequence_uint8_field(
        std::vector<uint8_t>&& _bounded_sequence_uint8_field)
{
    m_bounded_sequence_uint8_field = std::move(_bounded_sequence_uint8_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_uint8_field
 * @return Constant reference to member bounded_sequence_uint8_field
 */
const std::vector<uint8_t>& CompleteTestType::bounded_sequence_uint8_field() const
{
    return m_bounded_sequence_uint8_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_uint8_field
 * @return Reference to member bounded_sequence_uint8_field
 */
std::vector<uint8_t>& CompleteTestType::bounded_sequence_uint8_field()
{
    return m_bounded_sequence_uint8_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_int16_field
 * @param _bounded_sequence_int16_field New value to be copied in member bounded_sequence_int16_field
 */
void CompleteTestType::bounded_sequence_int16_field(
        const std::vector<int16_t>& _bounded_sequence_int16_field)
{
    m_bounded_sequence_int16_field = _bounded_sequence_int16_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_int16_field
 * @param _bounded_sequence_int16_field New value to be moved in member bounded_sequence_int16_field
 */
void CompleteTestType::bounded_sequence_int16_field(
        std::vector<int16_t>&& _bounded_sequence_int16_field)
{
    m_bounded_sequence_int16_field = std::move(_bounded_sequence_int16_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_int16_field
 * @return Constant reference to member bounded_sequence_int16_field
 */
const std::vector<int16_t>& CompleteTestType::bounded_sequence_int16_field() const
{
    return m_bounded_sequence_int16_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_int16_field
 * @return Reference to member bounded_sequence_int16_field
 */
std::vector<int16_t>& CompleteTestType::bounded_sequence_int16_field()
{
    return m_bounded_sequence_int16_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_uint16_field
 * @param _bounded_sequence_uint16_field New value to be copied in member bounded_sequence_uint16_field
 */
void CompleteTestType::bounded_sequence_uint16_field(
        const std::vector<uint16_t>& _bounded_sequence_uint16_field)
{
    m_bounded_sequence_uint16_field = _bounded_sequence_uint16_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_uint16_field
 * @param _bounded_sequence_uint16_field New value to be moved in member bounded_sequence_uint16_field
 */
void CompleteTestType::bounded_sequence_uint16_field(
        std::vector<uint16_t>&& _bounded_sequence_uint16_field)
{
    m_bounded_sequence_uint16_field = std::move(_bounded_sequence_uint16_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_uint16_field
 * @return Constant reference to member bounded_sequence_uint16_field
 */
const std::vector<uint16_t>& CompleteTestType::bounded_sequence_uint16_field() const
{
    return m_bounded_sequence_uint16_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_uint16_field
 * @return Reference to member bounded_sequence_uint16_field
 */
std::vector<uint16_t>& CompleteTestType::bounded_sequence_uint16_field()
{
    return m_bounded_sequence_uint16_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_int32_field
 * @param _bounded_sequence_int32_field New value to be copied in member bounded_sequence_int32_field
 */
void CompleteTestType::bounded_sequence_int32_field(
        const std::vector<int32_t>& _bounded_sequence_int32_field)
{
    m_bounded_sequence_int32_field = _bounded_sequence_int32_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_int32_field
 * @param _bounded_sequence_int32_field New value to be moved in member bounded_sequence_int32_field
 */
void CompleteTestType::bounded_sequence_int32_field(
        std::vector<int32_t>&& _bounded_sequence_int32_field)
{
    m_bounded_sequence_int32_field = std::move(_bounded_sequence_int32_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_int32_field
 * @return Constant reference to member bounded_sequence_int32_field
 */
const std::vector<int32_t>& CompleteTestType::bounded_sequence_int32_field() const
{
    return m_bounded_sequence_int32_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_int32_field
 * @return Reference to member bounded_sequence_int32_field
 */
std::vector<int32_t>& CompleteTestType::bounded_sequence_int32_field()
{
    return m_bounded_sequence_int32_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_uint32_field
 * @param _bounded_sequence_uint32_field New value to be copied in member bounded_sequence_uint32_field
 */
void CompleteTestType::bounded_sequence_uint32_field(
        const std::vector<uint32_t>& _bounded_sequence_uint32_field)
{
    m_bounded_sequence_uint32_field = _bounded_sequence_uint32_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_uint32_field
 * @param _bounded_sequence_uint32_field New value to be moved in member bounded_sequence_uint32_field
 */
void CompleteTestType::bounded_sequence_uint32_field(
        std::vector<uint32_t>&& _bounded_sequence_uint32_field)
{
    m_bounded_sequence_uint32_field = std::move(_bounded_sequence_uint32_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_uint32_field
 * @return Constant reference to member bounded_sequence_uint32_field
 */
const std::vector<uint32_t>& CompleteTestType::bounded_sequence_uint32_field() const
{
    return m_bounded_sequence_uint32_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_uint32_field
 * @return Reference to member bounded_sequence_uint32_field
 */
std::vector<uint32_t>& CompleteTestType::bounded_sequence_uint32_field()
{
    return m_bounded_sequence_uint32_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_int64_field
 * @param _bounded_sequence_int64_field New value to be copied in member bounded_sequence_int64_field
 */
void CompleteTestType::bounded_sequence_int64_field(
        const std::vector<int64_t>& _bounded_sequence_int64_field)
{
    m_bounded_sequence_int64_field = _bounded_sequence_int64_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_int64_field
 * @param _bounded_sequence_int64_field New value to be moved in member bounded_sequence_int64_field
 */
void CompleteTestType::bounded_sequence_int64_field(
        std::vector<int64_t>&& _bounded_sequence_int64_field)
{
    m_bounded_sequence_int64_field = std::move(_bounded_sequence_int64_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_int64_field
 * @return Constant reference to member bounded_sequence_int64_field
 */
const std::vector<int64_t>& CompleteTestType::bounded_sequence_int64_field() const
{
    return m_bounded_sequence_int64_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_int64_field
 * @return Reference to member bounded_sequence_int64_field
 */
std::vector<int64_t>& CompleteTestType::bounded_sequence_int64_field()
{
    return m_bounded_sequence_int64_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_uint64_field
 * @param _bounded_sequence_uint64_field New value to be copied in member bounded_sequence_uint64_field
 */
void CompleteTestType::bounded_sequence_uint64_field(
        const std::vector<uint64_t>& _bounded_sequence_uint64_field)
{
    m_bounded_sequence_uint64_field = _bounded_sequence_uint64_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_uint64_field
 * @param _bounded_sequence_uint64_field New value to be moved in member bounded_sequence_uint64_field
 */
void CompleteTestType::bounded_sequence_uint64_field(
        std::vector<uint64_t>&& _bounded_sequence_uint64_field)
{
    m_bounded_sequence_uint64_field = std::move(_bounded_sequence_uint64_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_uint64_field
 * @return Constant reference to member bounded_sequence_uint64_field
 */
const std::vector<uint64_t>& CompleteTestType::bounded_sequence_uint64_field() const
{
    return m_bounded_sequence_uint64_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_uint64_field
 * @return Reference to member bounded_sequence_uint64_field
 */
std::vector<uint64_t>& CompleteTestType::bounded_sequence_uint64_field()
{
    return m_bounded_sequence_uint64_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_float_field
 * @param _bounded_sequence_float_field New value to be copied in member bounded_sequence_float_field
 */
void CompleteTestType::bounded_sequence_float_field(
        const std::vector<float>& _bounded_sequence_float_field)
{
    m_bounded_sequence_float_field = _bounded_sequence_float_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_float_field
 * @param _bounded_sequence_float_field New value to be moved in member bounded_sequence_float_field
 */
void CompleteTestType::bounded_sequence_float_field(
        std::vector<float>&& _bounded_sequence_float_field)
{
    m_bounded_sequence_float_field = std::move(_bounded_sequence_float_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_float_field
 * @return Constant reference to member bounded_sequence_float_field
 */
const std::vector<float>& CompleteTestType::bounded_sequence_float_field() const
{
    return m_bounded_sequence_float_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_float_field
 * @return Reference to member bounded_sequence_float_field
 */
std::vector<float>& CompleteTestType::bounded_sequence_float_field()
{
    return m_bounded_sequence_float_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_double_field
 * @param _bounded_sequence_double_field New value to be copied in member bounded_sequence_double_field
 */
void CompleteTestType::bounded_sequence_double_field(
        const std::vector<double>& _bounded_sequence_double_field)
{
    m_bounded_sequence_double_field = _bounded_sequence_double_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_double_field
 * @param _bounded_sequence_double_field New value to be moved in member bounded_sequence_double_field
 */
void CompleteTestType::bounded_sequence_double_field(
        std::vector<double>&& _bounded_sequence_double_field)
{
    m_bounded_sequence_double_field = std::move(_bounded_sequence_double_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_double_field
 * @return Constant reference to member bounded_sequence_double_field
 */
const std::vector<double>& CompleteTestType::bounded_sequence_double_field() const
{
    return m_bounded_sequence_double_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_double_field
 * @return Reference to member bounded_sequence_double_field
 */
std::vector<double>& CompleteTestType::bounded_sequence_double_field()
{
    return m_bounded_sequence_double_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_bool_field
 * @param _bounded_sequence_bool_field New value to be copied in member bounded_sequence_bool_field
 */
void CompleteTestType::bounded_sequence_bool_field(
        const std::vector<bool>& _bounded_sequence_bool_field)
{
    m_bounded_sequence_bool_field = _bounded_sequence_bool_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_bool_field
 * @param _bounded_sequence_bool_field New value to be moved in member bounded_sequence_bool_field
 */
void CompleteTestType::bounded_sequence_bool_field(
        std::vector<bool>&& _bounded_sequence_bool_field)
{
    m_bounded_sequence_bool_field = std::move(_bounded_sequence_bool_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_bool_field
 * @return Constant reference to member bounded_sequence_bool_field
 */
const std::vector<bool>& CompleteTestType::bounded_sequence_bool_field() const
{
    return m_bounded_sequence_bool_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_bool_field
 * @return Reference to member bounded_sequence_bool_field
 */
std::vector<bool>& CompleteTestType::bounded_sequence_bool_field()
{
    return m_bounded_sequence_bool_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_enum_field
 * @param _bounded_sequence_enum_field New value to be copied in member bounded_sequence_enum_field
 */
void CompleteTestType::bounded_sequence_enum_field(
        const std::vector<Color>& _bounded_sequence_enum_field)
{
    m_bounded_sequence_enum_field = _bounded_sequence_enum_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_enum_field
 * @param _bounded_sequence_enum_field New value to be moved in member bounded_sequence_enum_field
 */
void CompleteTestType::bounded_sequence_enum_field(
        std::vector<Color>&& _bounded_sequence_enum_field)
{
    m_bounded_sequence_enum_field = std::move(_bounded_sequence_enum_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_enum_field
 * @return Constant reference to member bounded_sequence_enum_field
 */
const std::vector<Color>& CompleteTestType::bounded_sequence_enum_field() const
{
    return m_bounded_sequence_enum_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_enum_field
 * @return Reference to member bounded_sequence_enum_field
 */
std::vector<Color>& CompleteTestType::bounded_sequence_enum_field()
{
    return m_bounded_sequence_enum_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_enum2_field
 * @param _bounded_sequence_enum2_field New value to be copied in member bounded_sequence_enum2_field
 */
void CompleteTestType::bounded_sequence_enum2_field(
        const std::vector<Material>& _bounded_sequence_enum2_field)
{
    m_bounded_sequence_enum2_field = _bounded_sequence_enum2_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_enum2_field
 * @param _bounded_sequence_enum2_field New value to be moved in member bounded_sequence_enum2_field
 */
void CompleteTestType::bounded_sequence_enum2_field(
        std::vector<Material>&& _bounded_sequence_enum2_field)
{
    m_bounded_sequence_enum2_field = std::move(_bounded_sequence_enum2_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_enum2_field
 * @return Constant reference to member bounded_sequence_enum2_field
 */
const std::vector<Material>& CompleteTestType::bounded_sequence_enum2_field() const
{
    return m_bounded_sequence_enum2_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_enum2_field
 * @return Reference to member bounded_sequence_enum2_field
 */
std::vector<Material>& CompleteTestType::bounded_sequence_enum2_field()
{
    return m_bounded_sequence_enum2_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_struct_field
 * @param _bounded_sequence_struct_field New value to be copied in member bounded_sequence_struct_field
 */
void CompleteTestType::bounded_sequence_struct_field(
        const std::vector<StructType>& _bounded_sequence_struct_field)
{
    m_bounded_sequence_struct_field = _bounded_sequence_struct_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_struct_field
 * @param _bounded_sequence_struct_field New value to be moved in member bounded_sequence_struct_field
 */
void CompleteTestType::bounded_sequence_struct_field(
        std::vector<StructType>&& _bounded_sequence_struct_field)
{
    m_bounded_sequence_struct_field = std::move(_bounded_sequence_struct_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_struct_field
 * @return Constant reference to member bounded_sequence_struct_field
 */
const std::vector<StructType>& CompleteTestType::bounded_sequence_struct_field() const
{
    return m_bounded_sequence_struct_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_struct_field
 * @return Reference to member bounded_sequence_struct_field
 */
std::vector<StructType>& CompleteTestType::bounded_sequence_struct_field()
{
    return m_bounded_sequence_struct_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_char_field
 * @param _unbounded_sequence_char_field New value to be copied in member unbounded_sequence_char_field
 */
void CompleteTestType::unbounded_sequence_char_field(
        const std::vector<char>& _unbounded_sequence_char_field)
{
    m_unbounded_sequence_char_field = _unbounded_sequence_char_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_char_field
 * @param _unbounded_sequence_char_field New value to be moved in member unbounded_sequence_char_field
 */
void CompleteTestType::unbounded_sequence_char_field(
        std::vector<char>&& _unbounded_sequence_char_field)
{
    m_unbounded_sequence_char_field = std::move(_unbounded_sequence_char_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_char_field
 * @return Constant reference to member unbounded_sequence_char_field
 */
const std::vector<char>& CompleteTestType::unbounded_sequence_char_field() const
{
    return m_unbounded_sequence_char_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_char_field
 * @return Reference to member unbounded_sequence_char_field
 */
std::vector<char>& CompleteTestType::unbounded_sequence_char_field()
{
    return m_unbounded_sequence_char_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_uint8_field
 * @param _unbounded_sequence_uint8_field New value to be copied in member unbounded_sequence_uint8_field
 */
void CompleteTestType::unbounded_sequence_uint8_field(
        const std::vector<uint8_t>& _unbounded_sequence_uint8_field)
{
    m_unbounded_sequence_uint8_field = _unbounded_sequence_uint8_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_uint8_field
 * @param _unbounded_sequence_uint8_field New value to be moved in member unbounded_sequence_uint8_field
 */
void CompleteTestType::unbounded_sequence_uint8_field(
        std::vector<uint8_t>&& _unbounded_sequence_uint8_field)
{
    m_unbounded_sequence_uint8_field = std::move(_unbounded_sequence_uint8_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_uint8_field
 * @return Constant reference to member unbounded_sequence_uint8_field
 */
const std::vector<uint8_t>& CompleteTestType::unbounded_sequence_uint8_field() const
{
    return m_unbounded_sequence_uint8_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_uint8_field
 * @return Reference to member unbounded_sequence_uint8_field
 */
std::vector<uint8_t>& CompleteTestType::unbounded_sequence_uint8_field()
{
    return m_unbounded_sequence_uint8_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_int16_field
 * @param _unbounded_sequence_int16_field New value to be copied in member unbounded_sequence_int16_field
 */
void CompleteTestType::unbounded_sequence_int16_field(
        const std::vector<int16_t>& _unbounded_sequence_int16_field)
{
    m_unbounded_sequence_int16_field = _unbounded_sequence_int16_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_int16_field
 * @param _unbounded_sequence_int16_field New value to be moved in member unbounded_sequence_int16_field
 */
void CompleteTestType::unbounded_sequence_int16_field(
        std::vector<int16_t>&& _unbounded_sequence_int16_field)
{
    m_unbounded_sequence_int16_field = std::move(_unbounded_sequence_int16_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_int16_field
 * @return Constant reference to member unbounded_sequence_int16_field
 */
const std::vector<int16_t>& CompleteTestType::unbounded_sequence_int16_field() const
{
    return m_unbounded_sequence_int16_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_int16_field
 * @return Reference to member unbounded_sequence_int16_field
 */
std::vector<int16_t>& CompleteTestType::unbounded_sequence_int16_field()
{
    return m_unbounded_sequence_int16_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_uint16_field
 * @param _unbounded_sequence_uint16_field New value to be copied in member unbounded_sequence_uint16_field
 */
void CompleteTestType::unbounded_sequence_uint16_field(
        const std::vector<uint16_t>& _unbounded_sequence_uint16_field)
{
    m_unbounded_sequence_uint16_field = _unbounded_sequence_uint16_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_uint16_field
 * @param _unbounded_sequence_uint16_field New value to be moved in member unbounded_sequence_uint16_field
 */
void CompleteTestType::unbounded_sequence_uint16_field(
        std::vector<uint16_t>&& _unbounded_sequence_uint16_field)
{
    m_unbounded_sequence_uint16_field = std::move(_unbounded_sequence_uint16_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_uint16_field
 * @return Constant reference to member unbounded_sequence_uint16_field
 */
const std::vector<uint16_t>& CompleteTestType::unbounded_sequence_uint16_field() const
{
    return m_unbounded_sequence_uint16_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_uint16_field
 * @return Reference to member unbounded_sequence_uint16_field
 */
std::vector<uint16_t>& CompleteTestType::unbounded_sequence_uint16_field()
{
    return m_unbounded_sequence_uint16_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_int32_field
 * @param _unbounded_sequence_int32_field New value to be copied in member unbounded_sequence_int32_field
 */
void CompleteTestType::unbounded_sequence_int32_field(
        const std::vector<int32_t>& _unbounded_sequence_int32_field)
{
    m_unbounded_sequence_int32_field = _unbounded_sequence_int32_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_int32_field
 * @param _unbounded_sequence_int32_field New value to be moved in member unbounded_sequence_int32_field
 */
void CompleteTestType::unbounded_sequence_int32_field(
        std::vector<int32_t>&& _unbounded_sequence_int32_field)
{
    m_unbounded_sequence_int32_field = std::move(_unbounded_sequence_int32_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_int32_field
 * @return Constant reference to member unbounded_sequence_int32_field
 */
const std::vector<int32_t>& CompleteTestType::unbounded_sequence_int32_field() const
{
    return m_unbounded_sequence_int32_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_int32_field
 * @return Reference to member unbounded_sequence_int32_field
 */
std::vector<int32_t>& CompleteTestType::unbounded_sequence_int32_field()
{
    return m_unbounded_sequence_int32_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_uint32_field
 * @param _unbounded_sequence_uint32_field New value to be copied in member unbounded_sequence_uint32_field
 */
void CompleteTestType::unbounded_sequence_uint32_field(
        const std::vector<uint32_t>& _unbounded_sequence_uint32_field)
{
    m_unbounded_sequence_uint32_field = _unbounded_sequence_uint32_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_uint32_field
 * @param _unbounded_sequence_uint32_field New value to be moved in member unbounded_sequence_uint32_field
 */
void CompleteTestType::unbounded_sequence_uint32_field(
        std::vector<uint32_t>&& _unbounded_sequence_uint32_field)
{
    m_unbounded_sequence_uint32_field = std::move(_unbounded_sequence_uint32_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_uint32_field
 * @return Constant reference to member unbounded_sequence_uint32_field
 */
const std::vector<uint32_t>& CompleteTestType::unbounded_sequence_uint32_field() const
{
    return m_unbounded_sequence_uint32_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_uint32_field
 * @return Reference to member unbounded_sequence_uint32_field
 */
std::vector<uint32_t>& CompleteTestType::unbounded_sequence_uint32_field()
{
    return m_unbounded_sequence_uint32_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_int64_field
 * @param _unbounded_sequence_int64_field New value to be copied in member unbounded_sequence_int64_field
 */
void CompleteTestType::unbounded_sequence_int64_field(
        const std::vector<int64_t>& _unbounded_sequence_int64_field)
{
    m_unbounded_sequence_int64_field = _unbounded_sequence_int64_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_int64_field
 * @param _unbounded_sequence_int64_field New value to be moved in member unbounded_sequence_int64_field
 */
void CompleteTestType::unbounded_sequence_int64_field(
        std::vector<int64_t>&& _unbounded_sequence_int64_field)
{
    m_unbounded_sequence_int64_field = std::move(_unbounded_sequence_int64_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_int64_field
 * @return Constant reference to member unbounded_sequence_int64_field
 */
const std::vector<int64_t>& CompleteTestType::unbounded_sequence_int64_field() const
{
    return m_unbounded_sequence_int64_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_int64_field
 * @return Reference to member unbounded_sequence_int64_field
 */
std::vector<int64_t>& CompleteTestType::unbounded_sequence_int64_field()
{
    return m_unbounded_sequence_int64_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_uint64_field
 * @param _unbounded_sequence_uint64_field New value to be copied in member unbounded_sequence_uint64_field
 */
void CompleteTestType::unbounded_sequence_uint64_field(
        const std::vector<uint64_t>& _unbounded_sequence_uint64_field)
{
    m_unbounded_sequence_uint64_field = _unbounded_sequence_uint64_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_uint64_field
 * @param _unbounded_sequence_uint64_field New value to be moved in member unbounded_sequence_uint64_field
 */
void CompleteTestType::unbounded_sequence_uint64_field(
        std::vector<uint64_t>&& _unbounded_sequence_uint64_field)
{
    m_unbounded_sequence_uint64_field = std::move(_unbounded_sequence_uint64_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_uint64_field
 * @return Constant reference to member unbounded_sequence_uint64_field
 */
const std::vector<uint64_t>& CompleteTestType::unbounded_sequence_uint64_field() const
{
    return m_unbounded_sequence_uint64_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_uint64_field
 * @return Reference to member unbounded_sequence_uint64_field
 */
std::vector<uint64_t>& CompleteTestType::unbounded_sequence_uint64_field()
{
    return m_unbounded_sequence_uint64_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_float_field
 * @param _unbounded_sequence_float_field New value to be copied in member unbounded_sequence_float_field
 */
void CompleteTestType::unbounded_sequence_float_field(
        const std::vector<float>& _unbounded_sequence_float_field)
{
    m_unbounded_sequence_float_field = _unbounded_sequence_float_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_float_field
 * @param _unbounded_sequence_float_field New value to be moved in member unbounded_sequence_float_field
 */
void CompleteTestType::unbounded_sequence_float_field(
        std::vector<float>&& _unbounded_sequence_float_field)
{
    m_unbounded_sequence_float_field = std::move(_unbounded_sequence_float_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_float_field
 * @return Constant reference to member unbounded_sequence_float_field
 */
const std::vector<float>& CompleteTestType::unbounded_sequence_float_field() const
{
    return m_unbounded_sequence_float_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_float_field
 * @return Reference to member unbounded_sequence_float_field
 */
std::vector<float>& CompleteTestType::unbounded_sequence_float_field()
{
    return m_unbounded_sequence_float_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_double_field
 * @param _unbounded_sequence_double_field New value to be copied in member unbounded_sequence_double_field
 */
void CompleteTestType::unbounded_sequence_double_field(
        const std::vector<double>& _unbounded_sequence_double_field)
{
    m_unbounded_sequence_double_field = _unbounded_sequence_double_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_double_field
 * @param _unbounded_sequence_double_field New value to be moved in member unbounded_sequence_double_field
 */
void CompleteTestType::unbounded_sequence_double_field(
        std::vector<double>&& _unbounded_sequence_double_field)
{
    m_unbounded_sequence_double_field = std::move(_unbounded_sequence_double_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_double_field
 * @return Constant reference to member unbounded_sequence_double_field
 */
const std::vector<double>& CompleteTestType::unbounded_sequence_double_field() const
{
    return m_unbounded_sequence_double_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_double_field
 * @return Reference to member unbounded_sequence_double_field
 */
std::vector<double>& CompleteTestType::unbounded_sequence_double_field()
{
    return m_unbounded_sequence_double_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_bool_field
 * @param _unbounded_sequence_bool_field New value to be copied in member unbounded_sequence_bool_field
 */
void CompleteTestType::unbounded_sequence_bool_field(
        const std::vector<bool>& _unbounded_sequence_bool_field)
{
    m_unbounded_sequence_bool_field = _unbounded_sequence_bool_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_bool_field
 * @param _unbounded_sequence_bool_field New value to be moved in member unbounded_sequence_bool_field
 */
void CompleteTestType::unbounded_sequence_bool_field(
        std::vector<bool>&& _unbounded_sequence_bool_field)
{
    m_unbounded_sequence_bool_field = std::move(_unbounded_sequence_bool_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_bool_field
 * @return Constant reference to member unbounded_sequence_bool_field
 */
const std::vector<bool>& CompleteTestType::unbounded_sequence_bool_field() const
{
    return m_unbounded_sequence_bool_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_bool_field
 * @return Reference to member unbounded_sequence_bool_field
 */
std::vector<bool>& CompleteTestType::unbounded_sequence_bool_field()
{
    return m_unbounded_sequence_bool_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_enum_field
 * @param _unbounded_sequence_enum_field New value to be copied in member unbounded_sequence_enum_field
 */
void CompleteTestType::unbounded_sequence_enum_field(
        const std::vector<Color>& _unbounded_sequence_enum_field)
{
    m_unbounded_sequence_enum_field = _unbounded_sequence_enum_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_enum_field
 * @param _unbounded_sequence_enum_field New value to be moved in member unbounded_sequence_enum_field
 */
void CompleteTestType::unbounded_sequence_enum_field(
        std::vector<Color>&& _unbounded_sequence_enum_field)
{
    m_unbounded_sequence_enum_field = std::move(_unbounded_sequence_enum_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_enum_field
 * @return Constant reference to member unbounded_sequence_enum_field
 */
const std::vector<Color>& CompleteTestType::unbounded_sequence_enum_field() const
{
    return m_unbounded_sequence_enum_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_enum_field
 * @return Reference to member unbounded_sequence_enum_field
 */
std::vector<Color>& CompleteTestType::unbounded_sequence_enum_field()
{
    return m_unbounded_sequence_enum_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_enum2_field
 * @param _unbounded_sequence_enum2_field New value to be copied in member unbounded_sequence_enum2_field
 */
void CompleteTestType::unbounded_sequence_enum2_field(
        const std::vector<Material>& _unbounded_sequence_enum2_field)
{
    m_unbounded_sequence_enum2_field = _unbounded_sequence_enum2_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_enum2_field
 * @param _unbounded_sequence_enum2_field New value to be moved in member unbounded_sequence_enum2_field
 */
void CompleteTestType::unbounded_sequence_enum2_field(
        std::vector<Material>&& _unbounded_sequence_enum2_field)
{
    m_unbounded_sequence_enum2_field = std::move(_unbounded_sequence_enum2_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_enum2_field
 * @return Constant reference to member unbounded_sequence_enum2_field
 */
const std::vector<Material>& CompleteTestType::unbounded_sequence_enum2_field() const
{
    return m_unbounded_sequence_enum2_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_enum2_field
 * @return Reference to member unbounded_sequence_enum2_field
 */
std::vector<Material>& CompleteTestType::unbounded_sequence_enum2_field()
{
    return m_unbounded_sequence_enum2_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_struct_field
 * @param _unbounded_sequence_struct_field New value to be copied in member unbounded_sequence_struct_field
 */
void CompleteTestType::unbounded_sequence_struct_field(
        const std::vector<StructType>& _unbounded_sequence_struct_field)
{
    m_unbounded_sequence_struct_field = _unbounded_sequence_struct_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_struct_field
 * @param _unbounded_sequence_struct_field New value to be moved in member unbounded_sequence_struct_field
 */
void CompleteTestType::unbounded_sequence_struct_field(
        std::vector<StructType>&& _unbounded_sequence_struct_field)
{
    m_unbounded_sequence_struct_field = std::move(_unbounded_sequence_struct_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_struct_field
 * @return Constant reference to member unbounded_sequence_struct_field
 */
const std::vector<StructType>& CompleteTestType::unbounded_sequence_struct_field() const
{
    return m_unbounded_sequence_struct_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_struct_field
 * @return Reference to member unbounded_sequence_struct_field
 */
std::vector<StructType>& CompleteTestType::unbounded_sequence_struct_field()
{
    return m_unbounded_sequence_struct_field;
}

size_t CompleteTestType::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;




























































    return current_align;
}

bool CompleteTestType::isKeyDefined()
{
    return false;
}

void CompleteTestType::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
                                                             
}

KeyedCompleteTestType::KeyedCompleteTestType()
{
    // m_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1e4a7dd4
    m_id = 0;
    // m_char_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4f51b3e0
    m_char_field = 0;
    // m_uint8_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4b9e255
    m_uint8_field = 0;
    // m_int16_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5e57643e
    m_int16_field = 0;
    // m_uint16_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@133e16fd
    m_uint16_field = 0;
    // m_int32_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@51b279c9
    m_int32_field = 0;
    // m_uint32_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1ad282e0
    m_uint32_field = 0;
    // m_int64_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7f416310
    m_int64_field = 0;
    // m_uint64_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1cab0bfb
    m_uint64_field = 0;
    // m_float_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5e955596
    m_float_field = 0.0;
    // m_double_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@50de0926
    m_double_field = 0.0;
    // m_bool_field com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2473b9ce
    m_bool_field = false;
    // m_string_field com.eprosima.idl.parser.typecode.StringTypeCode@60438a68
    m_string_field ="";
    // m_enum_field com.eprosima.idl.parser.typecode.EnumTypeCode@3aeaafa6
    m_enum_field = ::RED;
    // m_enum2_field com.eprosima.idl.parser.typecode.EnumTypeCode@76a3e297
    m_enum2_field = ::WOOD;
    // m_struct_field com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@fe18270

    // m_array_char_field com.eprosima.idl.parser.typecode.ArrayTypeCode@140e5a13
    memset(&m_array_char_field, 0, (max_array_size) * 1);
    // m_array_uint8_field com.eprosima.idl.parser.typecode.ArrayTypeCode@3439f68d
    memset(&m_array_uint8_field, 0, (max_array_size) * 1);
    // m_array_int16_field com.eprosima.idl.parser.typecode.ArrayTypeCode@dbd940d
    memset(&m_array_int16_field, 0, (max_array_size) * 2);
    // m_array_uint16_field com.eprosima.idl.parser.typecode.ArrayTypeCode@71d15f18
    memset(&m_array_uint16_field, 0, (max_array_size) * 2);
    // m_array_int32_field com.eprosima.idl.parser.typecode.ArrayTypeCode@17695df3
    memset(&m_array_int32_field, 0, (max_array_size) * 4);
    // m_array_uint32_field com.eprosima.idl.parser.typecode.ArrayTypeCode@6c9f5c0d
    memset(&m_array_uint32_field, 0, (max_array_size) * 4);
    // m_array_int64_field com.eprosima.idl.parser.typecode.ArrayTypeCode@de3a06f
    memset(&m_array_int64_field, 0, (max_array_size) * 8);
    // m_array_uint64_field com.eprosima.idl.parser.typecode.ArrayTypeCode@76b10754
    memset(&m_array_uint64_field, 0, (max_array_size) * 8);
    // m_array_float_field com.eprosima.idl.parser.typecode.ArrayTypeCode@2bea5ab4
    memset(&m_array_float_field, 0, (max_array_size) * 4);
    // m_array_double_field com.eprosima.idl.parser.typecode.ArrayTypeCode@3d8314f0
    memset(&m_array_double_field, 0, (max_array_size) * 8);
    // m_array_bool_field com.eprosima.idl.parser.typecode.ArrayTypeCode@2df32bf7
    memset(&m_array_bool_field, 0, (max_array_size) * 1);
    // m_array_enum_field com.eprosima.idl.parser.typecode.ArrayTypeCode@530612ba
    memset(&m_array_enum_field, 0, (max_array_size) * 4);
    // m_array_enum2_field com.eprosima.idl.parser.typecode.ArrayTypeCode@2a40cd94
    memset(&m_array_enum2_field, 0, (max_array_size) * 4);
    // m_array_struct_field com.eprosima.idl.parser.typecode.ArrayTypeCode@f4168b8

    // m_bounded_sequence_char_field com.eprosima.idl.parser.typecode.SequenceTypeCode@3bd94634

    // m_bounded_sequence_uint8_field com.eprosima.idl.parser.typecode.SequenceTypeCode@58a90037

    // m_bounded_sequence_int16_field com.eprosima.idl.parser.typecode.SequenceTypeCode@74294adb

    // m_bounded_sequence_uint16_field com.eprosima.idl.parser.typecode.SequenceTypeCode@70a9f84e

    // m_bounded_sequence_int32_field com.eprosima.idl.parser.typecode.SequenceTypeCode@130f889

    // m_bounded_sequence_uint32_field com.eprosima.idl.parser.typecode.SequenceTypeCode@1188e820

    // m_bounded_sequence_int64_field com.eprosima.idl.parser.typecode.SequenceTypeCode@2f490758

    // m_bounded_sequence_uint64_field com.eprosima.idl.parser.typecode.SequenceTypeCode@101df177

    // m_bounded_sequence_float_field com.eprosima.idl.parser.typecode.SequenceTypeCode@166fa74d

    // m_bounded_sequence_double_field com.eprosima.idl.parser.typecode.SequenceTypeCode@40f08448

    // m_bounded_sequence_bool_field com.eprosima.idl.parser.typecode.SequenceTypeCode@276438c9

    // m_bounded_sequence_enum_field com.eprosima.idl.parser.typecode.SequenceTypeCode@588df31b

    // m_bounded_sequence_enum2_field com.eprosima.idl.parser.typecode.SequenceTypeCode@33b37288

    // m_bounded_sequence_struct_field com.eprosima.idl.parser.typecode.SequenceTypeCode@77a57272

    // m_unbounded_sequence_char_field com.eprosima.idl.parser.typecode.SequenceTypeCode@7181ae3f

    // m_unbounded_sequence_uint8_field com.eprosima.idl.parser.typecode.SequenceTypeCode@46238e3f

    // m_unbounded_sequence_int16_field com.eprosima.idl.parser.typecode.SequenceTypeCode@6e2c9341

    // m_unbounded_sequence_uint16_field com.eprosima.idl.parser.typecode.SequenceTypeCode@32464a14

    // m_unbounded_sequence_int32_field com.eprosima.idl.parser.typecode.SequenceTypeCode@4e4aea35

    // m_unbounded_sequence_uint32_field com.eprosima.idl.parser.typecode.SequenceTypeCode@1442d7b5

    // m_unbounded_sequence_int64_field com.eprosima.idl.parser.typecode.SequenceTypeCode@1efee8e7

    // m_unbounded_sequence_uint64_field com.eprosima.idl.parser.typecode.SequenceTypeCode@1ee807c6

    // m_unbounded_sequence_float_field com.eprosima.idl.parser.typecode.SequenceTypeCode@76a4d6c

    // m_unbounded_sequence_double_field com.eprosima.idl.parser.typecode.SequenceTypeCode@517cd4b

    // m_unbounded_sequence_bool_field com.eprosima.idl.parser.typecode.SequenceTypeCode@6cc7b4de

    // m_unbounded_sequence_enum_field com.eprosima.idl.parser.typecode.SequenceTypeCode@32cf48b7

    // m_unbounded_sequence_enum2_field com.eprosima.idl.parser.typecode.SequenceTypeCode@679b62af

    // m_unbounded_sequence_struct_field com.eprosima.idl.parser.typecode.SequenceTypeCode@5cdd8682


}

KeyedCompleteTestType::~KeyedCompleteTestType()
{


























































}

KeyedCompleteTestType::KeyedCompleteTestType(
        const KeyedCompleteTestType& x)
{
    m_id = x.m_id;
    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = x.m_string_field;
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
    m_struct_field = x.m_struct_field;
    m_array_char_field = x.m_array_char_field;
    m_array_uint8_field = x.m_array_uint8_field;
    m_array_int16_field = x.m_array_int16_field;
    m_array_uint16_field = x.m_array_uint16_field;
    m_array_int32_field = x.m_array_int32_field;
    m_array_uint32_field = x.m_array_uint32_field;
    m_array_int64_field = x.m_array_int64_field;
    m_array_uint64_field = x.m_array_uint64_field;
    m_array_float_field = x.m_array_float_field;
    m_array_double_field = x.m_array_double_field;
    m_array_bool_field = x.m_array_bool_field;
    m_array_enum_field = x.m_array_enum_field;
    m_array_enum2_field = x.m_array_enum2_field;
    m_array_struct_field = x.m_array_struct_field;
    m_bounded_sequence_char_field = x.m_bounded_sequence_char_field;
    m_bounded_sequence_uint8_field = x.m_bounded_sequence_uint8_field;
    m_bounded_sequence_int16_field = x.m_bounded_sequence_int16_field;
    m_bounded_sequence_uint16_field = x.m_bounded_sequence_uint16_field;
    m_bounded_sequence_int32_field = x.m_bounded_sequence_int32_field;
    m_bounded_sequence_uint32_field = x.m_bounded_sequence_uint32_field;
    m_bounded_sequence_int64_field = x.m_bounded_sequence_int64_field;
    m_bounded_sequence_uint64_field = x.m_bounded_sequence_uint64_field;
    m_bounded_sequence_float_field = x.m_bounded_sequence_float_field;
    m_bounded_sequence_double_field = x.m_bounded_sequence_double_field;
    m_bounded_sequence_bool_field = x.m_bounded_sequence_bool_field;
    m_bounded_sequence_enum_field = x.m_bounded_sequence_enum_field;
    m_bounded_sequence_enum2_field = x.m_bounded_sequence_enum2_field;
    m_bounded_sequence_struct_field = x.m_bounded_sequence_struct_field;
    m_unbounded_sequence_char_field = x.m_unbounded_sequence_char_field;
    m_unbounded_sequence_uint8_field = x.m_unbounded_sequence_uint8_field;
    m_unbounded_sequence_int16_field = x.m_unbounded_sequence_int16_field;
    m_unbounded_sequence_uint16_field = x.m_unbounded_sequence_uint16_field;
    m_unbounded_sequence_int32_field = x.m_unbounded_sequence_int32_field;
    m_unbounded_sequence_uint32_field = x.m_unbounded_sequence_uint32_field;
    m_unbounded_sequence_int64_field = x.m_unbounded_sequence_int64_field;
    m_unbounded_sequence_uint64_field = x.m_unbounded_sequence_uint64_field;
    m_unbounded_sequence_float_field = x.m_unbounded_sequence_float_field;
    m_unbounded_sequence_double_field = x.m_unbounded_sequence_double_field;
    m_unbounded_sequence_bool_field = x.m_unbounded_sequence_bool_field;
    m_unbounded_sequence_enum_field = x.m_unbounded_sequence_enum_field;
    m_unbounded_sequence_enum2_field = x.m_unbounded_sequence_enum2_field;
    m_unbounded_sequence_struct_field = x.m_unbounded_sequence_struct_field;
}

KeyedCompleteTestType::KeyedCompleteTestType(
        KeyedCompleteTestType&& x)
{
    m_id = x.m_id;
    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = std::move(x.m_string_field);
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
    m_struct_field = std::move(x.m_struct_field);
    m_array_char_field = std::move(x.m_array_char_field);
    m_array_uint8_field = std::move(x.m_array_uint8_field);
    m_array_int16_field = std::move(x.m_array_int16_field);
    m_array_uint16_field = std::move(x.m_array_uint16_field);
    m_array_int32_field = std::move(x.m_array_int32_field);
    m_array_uint32_field = std::move(x.m_array_uint32_field);
    m_array_int64_field = std::move(x.m_array_int64_field);
    m_array_uint64_field = std::move(x.m_array_uint64_field);
    m_array_float_field = std::move(x.m_array_float_field);
    m_array_double_field = std::move(x.m_array_double_field);
    m_array_bool_field = std::move(x.m_array_bool_field);
    m_array_enum_field = std::move(x.m_array_enum_field);
    m_array_enum2_field = std::move(x.m_array_enum2_field);
    m_array_struct_field = std::move(x.m_array_struct_field);
    m_bounded_sequence_char_field = std::move(x.m_bounded_sequence_char_field);
    m_bounded_sequence_uint8_field = std::move(x.m_bounded_sequence_uint8_field);
    m_bounded_sequence_int16_field = std::move(x.m_bounded_sequence_int16_field);
    m_bounded_sequence_uint16_field = std::move(x.m_bounded_sequence_uint16_field);
    m_bounded_sequence_int32_field = std::move(x.m_bounded_sequence_int32_field);
    m_bounded_sequence_uint32_field = std::move(x.m_bounded_sequence_uint32_field);
    m_bounded_sequence_int64_field = std::move(x.m_bounded_sequence_int64_field);
    m_bounded_sequence_uint64_field = std::move(x.m_bounded_sequence_uint64_field);
    m_bounded_sequence_float_field = std::move(x.m_bounded_sequence_float_field);
    m_bounded_sequence_double_field = std::move(x.m_bounded_sequence_double_field);
    m_bounded_sequence_bool_field = std::move(x.m_bounded_sequence_bool_field);
    m_bounded_sequence_enum_field = std::move(x.m_bounded_sequence_enum_field);
    m_bounded_sequence_enum2_field = std::move(x.m_bounded_sequence_enum2_field);
    m_bounded_sequence_struct_field = std::move(x.m_bounded_sequence_struct_field);
    m_unbounded_sequence_char_field = std::move(x.m_unbounded_sequence_char_field);
    m_unbounded_sequence_uint8_field = std::move(x.m_unbounded_sequence_uint8_field);
    m_unbounded_sequence_int16_field = std::move(x.m_unbounded_sequence_int16_field);
    m_unbounded_sequence_uint16_field = std::move(x.m_unbounded_sequence_uint16_field);
    m_unbounded_sequence_int32_field = std::move(x.m_unbounded_sequence_int32_field);
    m_unbounded_sequence_uint32_field = std::move(x.m_unbounded_sequence_uint32_field);
    m_unbounded_sequence_int64_field = std::move(x.m_unbounded_sequence_int64_field);
    m_unbounded_sequence_uint64_field = std::move(x.m_unbounded_sequence_uint64_field);
    m_unbounded_sequence_float_field = std::move(x.m_unbounded_sequence_float_field);
    m_unbounded_sequence_double_field = std::move(x.m_unbounded_sequence_double_field);
    m_unbounded_sequence_bool_field = std::move(x.m_unbounded_sequence_bool_field);
    m_unbounded_sequence_enum_field = std::move(x.m_unbounded_sequence_enum_field);
    m_unbounded_sequence_enum2_field = std::move(x.m_unbounded_sequence_enum2_field);
    m_unbounded_sequence_struct_field = std::move(x.m_unbounded_sequence_struct_field);
}

KeyedCompleteTestType& KeyedCompleteTestType::operator =(
        const KeyedCompleteTestType& x)
{

    m_id = x.m_id;
    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = x.m_string_field;
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
    m_struct_field = x.m_struct_field;
    m_array_char_field = x.m_array_char_field;
    m_array_uint8_field = x.m_array_uint8_field;
    m_array_int16_field = x.m_array_int16_field;
    m_array_uint16_field = x.m_array_uint16_field;
    m_array_int32_field = x.m_array_int32_field;
    m_array_uint32_field = x.m_array_uint32_field;
    m_array_int64_field = x.m_array_int64_field;
    m_array_uint64_field = x.m_array_uint64_field;
    m_array_float_field = x.m_array_float_field;
    m_array_double_field = x.m_array_double_field;
    m_array_bool_field = x.m_array_bool_field;
    m_array_enum_field = x.m_array_enum_field;
    m_array_enum2_field = x.m_array_enum2_field;
    m_array_struct_field = x.m_array_struct_field;
    m_bounded_sequence_char_field = x.m_bounded_sequence_char_field;
    m_bounded_sequence_uint8_field = x.m_bounded_sequence_uint8_field;
    m_bounded_sequence_int16_field = x.m_bounded_sequence_int16_field;
    m_bounded_sequence_uint16_field = x.m_bounded_sequence_uint16_field;
    m_bounded_sequence_int32_field = x.m_bounded_sequence_int32_field;
    m_bounded_sequence_uint32_field = x.m_bounded_sequence_uint32_field;
    m_bounded_sequence_int64_field = x.m_bounded_sequence_int64_field;
    m_bounded_sequence_uint64_field = x.m_bounded_sequence_uint64_field;
    m_bounded_sequence_float_field = x.m_bounded_sequence_float_field;
    m_bounded_sequence_double_field = x.m_bounded_sequence_double_field;
    m_bounded_sequence_bool_field = x.m_bounded_sequence_bool_field;
    m_bounded_sequence_enum_field = x.m_bounded_sequence_enum_field;
    m_bounded_sequence_enum2_field = x.m_bounded_sequence_enum2_field;
    m_bounded_sequence_struct_field = x.m_bounded_sequence_struct_field;
    m_unbounded_sequence_char_field = x.m_unbounded_sequence_char_field;
    m_unbounded_sequence_uint8_field = x.m_unbounded_sequence_uint8_field;
    m_unbounded_sequence_int16_field = x.m_unbounded_sequence_int16_field;
    m_unbounded_sequence_uint16_field = x.m_unbounded_sequence_uint16_field;
    m_unbounded_sequence_int32_field = x.m_unbounded_sequence_int32_field;
    m_unbounded_sequence_uint32_field = x.m_unbounded_sequence_uint32_field;
    m_unbounded_sequence_int64_field = x.m_unbounded_sequence_int64_field;
    m_unbounded_sequence_uint64_field = x.m_unbounded_sequence_uint64_field;
    m_unbounded_sequence_float_field = x.m_unbounded_sequence_float_field;
    m_unbounded_sequence_double_field = x.m_unbounded_sequence_double_field;
    m_unbounded_sequence_bool_field = x.m_unbounded_sequence_bool_field;
    m_unbounded_sequence_enum_field = x.m_unbounded_sequence_enum_field;
    m_unbounded_sequence_enum2_field = x.m_unbounded_sequence_enum2_field;
    m_unbounded_sequence_struct_field = x.m_unbounded_sequence_struct_field;

    return *this;
}

KeyedCompleteTestType& KeyedCompleteTestType::operator =(
        KeyedCompleteTestType&& x)
{

    m_id = x.m_id;
    m_char_field = x.m_char_field;
    m_uint8_field = x.m_uint8_field;
    m_int16_field = x.m_int16_field;
    m_uint16_field = x.m_uint16_field;
    m_int32_field = x.m_int32_field;
    m_uint32_field = x.m_uint32_field;
    m_int64_field = x.m_int64_field;
    m_uint64_field = x.m_uint64_field;
    m_float_field = x.m_float_field;
    m_double_field = x.m_double_field;
    m_bool_field = x.m_bool_field;
    m_string_field = std::move(x.m_string_field);
    m_enum_field = x.m_enum_field;
    m_enum2_field = x.m_enum2_field;
    m_struct_field = std::move(x.m_struct_field);
    m_array_char_field = std::move(x.m_array_char_field);
    m_array_uint8_field = std::move(x.m_array_uint8_field);
    m_array_int16_field = std::move(x.m_array_int16_field);
    m_array_uint16_field = std::move(x.m_array_uint16_field);
    m_array_int32_field = std::move(x.m_array_int32_field);
    m_array_uint32_field = std::move(x.m_array_uint32_field);
    m_array_int64_field = std::move(x.m_array_int64_field);
    m_array_uint64_field = std::move(x.m_array_uint64_field);
    m_array_float_field = std::move(x.m_array_float_field);
    m_array_double_field = std::move(x.m_array_double_field);
    m_array_bool_field = std::move(x.m_array_bool_field);
    m_array_enum_field = std::move(x.m_array_enum_field);
    m_array_enum2_field = std::move(x.m_array_enum2_field);
    m_array_struct_field = std::move(x.m_array_struct_field);
    m_bounded_sequence_char_field = std::move(x.m_bounded_sequence_char_field);
    m_bounded_sequence_uint8_field = std::move(x.m_bounded_sequence_uint8_field);
    m_bounded_sequence_int16_field = std::move(x.m_bounded_sequence_int16_field);
    m_bounded_sequence_uint16_field = std::move(x.m_bounded_sequence_uint16_field);
    m_bounded_sequence_int32_field = std::move(x.m_bounded_sequence_int32_field);
    m_bounded_sequence_uint32_field = std::move(x.m_bounded_sequence_uint32_field);
    m_bounded_sequence_int64_field = std::move(x.m_bounded_sequence_int64_field);
    m_bounded_sequence_uint64_field = std::move(x.m_bounded_sequence_uint64_field);
    m_bounded_sequence_float_field = std::move(x.m_bounded_sequence_float_field);
    m_bounded_sequence_double_field = std::move(x.m_bounded_sequence_double_field);
    m_bounded_sequence_bool_field = std::move(x.m_bounded_sequence_bool_field);
    m_bounded_sequence_enum_field = std::move(x.m_bounded_sequence_enum_field);
    m_bounded_sequence_enum2_field = std::move(x.m_bounded_sequence_enum2_field);
    m_bounded_sequence_struct_field = std::move(x.m_bounded_sequence_struct_field);
    m_unbounded_sequence_char_field = std::move(x.m_unbounded_sequence_char_field);
    m_unbounded_sequence_uint8_field = std::move(x.m_unbounded_sequence_uint8_field);
    m_unbounded_sequence_int16_field = std::move(x.m_unbounded_sequence_int16_field);
    m_unbounded_sequence_uint16_field = std::move(x.m_unbounded_sequence_uint16_field);
    m_unbounded_sequence_int32_field = std::move(x.m_unbounded_sequence_int32_field);
    m_unbounded_sequence_uint32_field = std::move(x.m_unbounded_sequence_uint32_field);
    m_unbounded_sequence_int64_field = std::move(x.m_unbounded_sequence_int64_field);
    m_unbounded_sequence_uint64_field = std::move(x.m_unbounded_sequence_uint64_field);
    m_unbounded_sequence_float_field = std::move(x.m_unbounded_sequence_float_field);
    m_unbounded_sequence_double_field = std::move(x.m_unbounded_sequence_double_field);
    m_unbounded_sequence_bool_field = std::move(x.m_unbounded_sequence_bool_field);
    m_unbounded_sequence_enum_field = std::move(x.m_unbounded_sequence_enum_field);
    m_unbounded_sequence_enum2_field = std::move(x.m_unbounded_sequence_enum2_field);
    m_unbounded_sequence_struct_field = std::move(x.m_unbounded_sequence_struct_field);

    return *this;
}

bool KeyedCompleteTestType::operator ==(
        const KeyedCompleteTestType& x) const
{

    return (m_id == x.m_id && m_char_field == x.m_char_field && m_uint8_field == x.m_uint8_field && m_int16_field == x.m_int16_field && m_uint16_field == x.m_uint16_field && m_int32_field == x.m_int32_field && m_uint32_field == x.m_uint32_field && m_int64_field == x.m_int64_field && m_uint64_field == x.m_uint64_field && m_float_field == x.m_float_field && m_double_field == x.m_double_field && m_bool_field == x.m_bool_field && m_string_field == x.m_string_field && m_enum_field == x.m_enum_field && m_enum2_field == x.m_enum2_field && m_struct_field == x.m_struct_field && m_array_char_field == x.m_array_char_field && m_array_uint8_field == x.m_array_uint8_field && m_array_int16_field == x.m_array_int16_field && m_array_uint16_field == x.m_array_uint16_field && m_array_int32_field == x.m_array_int32_field && m_array_uint32_field == x.m_array_uint32_field && m_array_int64_field == x.m_array_int64_field && m_array_uint64_field == x.m_array_uint64_field && m_array_float_field == x.m_array_float_field && m_array_double_field == x.m_array_double_field && m_array_bool_field == x.m_array_bool_field && m_array_enum_field == x.m_array_enum_field && m_array_enum2_field == x.m_array_enum2_field && m_array_struct_field == x.m_array_struct_field && m_bounded_sequence_char_field == x.m_bounded_sequence_char_field && m_bounded_sequence_uint8_field == x.m_bounded_sequence_uint8_field && m_bounded_sequence_int16_field == x.m_bounded_sequence_int16_field && m_bounded_sequence_uint16_field == x.m_bounded_sequence_uint16_field && m_bounded_sequence_int32_field == x.m_bounded_sequence_int32_field && m_bounded_sequence_uint32_field == x.m_bounded_sequence_uint32_field && m_bounded_sequence_int64_field == x.m_bounded_sequence_int64_field && m_bounded_sequence_uint64_field == x.m_bounded_sequence_uint64_field && m_bounded_sequence_float_field == x.m_bounded_sequence_float_field && m_bounded_sequence_double_field == x.m_bounded_sequence_double_field && m_bounded_sequence_bool_field == x.m_bounded_sequence_bool_field && m_bounded_sequence_enum_field == x.m_bounded_sequence_enum_field && m_bounded_sequence_enum2_field == x.m_bounded_sequence_enum2_field && m_bounded_sequence_struct_field == x.m_bounded_sequence_struct_field && m_unbounded_sequence_char_field == x.m_unbounded_sequence_char_field && m_unbounded_sequence_uint8_field == x.m_unbounded_sequence_uint8_field && m_unbounded_sequence_int16_field == x.m_unbounded_sequence_int16_field && m_unbounded_sequence_uint16_field == x.m_unbounded_sequence_uint16_field && m_unbounded_sequence_int32_field == x.m_unbounded_sequence_int32_field && m_unbounded_sequence_uint32_field == x.m_unbounded_sequence_uint32_field && m_unbounded_sequence_int64_field == x.m_unbounded_sequence_int64_field && m_unbounded_sequence_uint64_field == x.m_unbounded_sequence_uint64_field && m_unbounded_sequence_float_field == x.m_unbounded_sequence_float_field && m_unbounded_sequence_double_field == x.m_unbounded_sequence_double_field && m_unbounded_sequence_bool_field == x.m_unbounded_sequence_bool_field && m_unbounded_sequence_enum_field == x.m_unbounded_sequence_enum_field && m_unbounded_sequence_enum2_field == x.m_unbounded_sequence_enum2_field && m_unbounded_sequence_struct_field == x.m_unbounded_sequence_struct_field);
}

bool KeyedCompleteTestType::operator !=(
        const KeyedCompleteTestType& x) const
{
    return !(*this == x);
}

size_t KeyedCompleteTestType::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += StructType::getMaxCdrSerializedSize(current_alignment);
    current_alignment += ((max_array_size) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += ((max_array_size) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += ((max_array_size) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += ((max_array_size) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += ((max_array_size) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((max_array_size) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((max_array_size) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ((max_array_size) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ((max_array_size) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((max_array_size) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ((max_array_size) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += ((max_array_size) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((max_array_size) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    for(size_t a = 0; a < (max_array_size); ++a)
    {
        current_alignment += StructType::getMaxCdrSerializedSize(current_alignment);}
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (max_seq_size * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < max_seq_size; ++a)
    {
        current_alignment += StructType::getMaxCdrSerializedSize(current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += StructType::getMaxCdrSerializedSize(current_alignment);}


    return current_alignment - initial_alignment;
}

size_t KeyedCompleteTestType::getCdrSerializedSize(
        const KeyedCompleteTestType& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.string_field().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += StructType::getCdrSerializedSize(data.struct_field(), current_alignment);
    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((max_array_size) > 0)
    {
        current_alignment += ((max_array_size) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }


    for(size_t a = 0; a < data.array_struct_field().size(); ++a)
    {
            current_alignment += StructType::getCdrSerializedSize(data.array_struct_field().at(a), current_alignment);
    }
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_char_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_char_field().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_uint8_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_uint8_field().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_int16_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_int16_field().size() * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_uint16_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_uint16_field().size() * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_int32_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_int32_field().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_uint32_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_uint32_field().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_int64_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_int64_field().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_uint64_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_uint64_field().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_float_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_float_field().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_double_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_double_field().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_bool_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_bool_field().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_enum_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_enum_field().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bounded_sequence_enum2_field().size() > 0)
    {
        current_alignment += (data.bounded_sequence_enum2_field().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.bounded_sequence_struct_field().size(); ++a)
    {
        current_alignment += StructType::getCdrSerializedSize(data.bounded_sequence_struct_field().at(a), current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_char_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_char_field().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_uint8_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_uint8_field().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_int16_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_int16_field().size() * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_uint16_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_uint16_field().size() * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_int32_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_int32_field().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_uint32_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_uint32_field().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_int64_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_int64_field().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_uint64_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_uint64_field().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_float_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_float_field().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_double_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_double_field().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_bool_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_bool_field().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_enum_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_enum_field().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.unbounded_sequence_enum2_field().size() > 0)
    {
        current_alignment += (data.unbounded_sequence_enum2_field().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.unbounded_sequence_struct_field().size(); ++a)
    {
        current_alignment += StructType::getCdrSerializedSize(data.unbounded_sequence_struct_field().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void KeyedCompleteTestType::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_id;
    scdr << m_char_field;
    scdr << m_uint8_field;
    scdr << m_int16_field;
    scdr << m_uint16_field;
    scdr << m_int32_field;
    scdr << m_uint32_field;
    scdr << m_int64_field;
    scdr << m_uint64_field;
    scdr << m_float_field;
    scdr << m_double_field;
    scdr << m_bool_field;
    scdr << m_string_field;
    scdr << (uint32_t)m_enum_field;
    scdr << (uint32_t)m_enum2_field;
    scdr << m_struct_field;
    scdr << m_array_char_field;

    scdr << m_array_uint8_field;

    scdr << m_array_int16_field;

    scdr << m_array_uint16_field;

    scdr << m_array_int32_field;

    scdr << m_array_uint32_field;

    scdr << m_array_int64_field;

    scdr << m_array_uint64_field;

    scdr << m_array_float_field;

    scdr << m_array_double_field;

    scdr << m_array_bool_field;

    scdr.serializeArray(reinterpret_cast<const uint32_t*>(m_array_enum_field.data()), m_array_enum_field.size());


    scdr.serializeArray(reinterpret_cast<const uint32_t*>(m_array_enum2_field.data()), m_array_enum2_field.size());


    scdr << m_array_struct_field;

    scdr << m_bounded_sequence_char_field;
    scdr << m_bounded_sequence_uint8_field;
    scdr << m_bounded_sequence_int16_field;
    scdr << m_bounded_sequence_uint16_field;
    scdr << m_bounded_sequence_int32_field;
    scdr << m_bounded_sequence_uint32_field;
    scdr << m_bounded_sequence_int64_field;
    scdr << m_bounded_sequence_uint64_field;
    scdr << m_bounded_sequence_float_field;
    scdr << m_bounded_sequence_double_field;
    scdr << m_bounded_sequence_bool_field;
    scdr << static_cast<uint32_t>(m_bounded_sequence_enum_field.size());
    scdr.serializeArray(reinterpret_cast<const uint32_t*>(m_bounded_sequence_enum_field.data()), m_bounded_sequence_enum_field.size());

    scdr << static_cast<uint32_t>(m_bounded_sequence_enum2_field.size());
    scdr.serializeArray(reinterpret_cast<const uint32_t*>(m_bounded_sequence_enum2_field.data()), m_bounded_sequence_enum2_field.size());

    scdr << m_bounded_sequence_struct_field;
    scdr << m_unbounded_sequence_char_field;
    scdr << m_unbounded_sequence_uint8_field;
    scdr << m_unbounded_sequence_int16_field;
    scdr << m_unbounded_sequence_uint16_field;
    scdr << m_unbounded_sequence_int32_field;
    scdr << m_unbounded_sequence_uint32_field;
    scdr << m_unbounded_sequence_int64_field;
    scdr << m_unbounded_sequence_uint64_field;
    scdr << m_unbounded_sequence_float_field;
    scdr << m_unbounded_sequence_double_field;
    scdr << m_unbounded_sequence_bool_field;
    scdr << static_cast<uint32_t>(m_unbounded_sequence_enum_field.size());
    scdr.serializeArray(reinterpret_cast<const uint32_t*>(m_unbounded_sequence_enum_field.data()), m_unbounded_sequence_enum_field.size());

    scdr << static_cast<uint32_t>(m_unbounded_sequence_enum2_field.size());
    scdr.serializeArray(reinterpret_cast<const uint32_t*>(m_unbounded_sequence_enum2_field.data()), m_unbounded_sequence_enum2_field.size());

    scdr << m_unbounded_sequence_struct_field;

}

void KeyedCompleteTestType::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_id;
    dcdr >> m_char_field;
    dcdr >> m_uint8_field;
    dcdr >> m_int16_field;
    dcdr >> m_uint16_field;
    dcdr >> m_int32_field;
    dcdr >> m_uint32_field;
    dcdr >> m_int64_field;
    dcdr >> m_uint64_field;
    dcdr >> m_float_field;
    dcdr >> m_double_field;
    dcdr >> m_bool_field;
    dcdr >> m_string_field;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_enum_field = (Color)enum_value;
    }

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_enum2_field = (Material)enum_value;
    }

    dcdr >> m_struct_field;
    dcdr >> m_array_char_field;

    dcdr >> m_array_uint8_field;

    dcdr >> m_array_int16_field;

    dcdr >> m_array_uint16_field;

    dcdr >> m_array_int32_field;

    dcdr >> m_array_uint32_field;

    dcdr >> m_array_int64_field;

    dcdr >> m_array_uint64_field;

    dcdr >> m_array_float_field;

    dcdr >> m_array_double_field;

    dcdr >> m_array_bool_field;

    dcdr.deserializeArray(reinterpret_cast<uint32_t*>(m_array_enum_field.data()), m_array_enum_field.size());


    dcdr.deserializeArray(reinterpret_cast<uint32_t*>(m_array_enum2_field.data()), m_array_enum2_field.size());


    dcdr >> m_array_struct_field;

    dcdr >> m_bounded_sequence_char_field;
    dcdr >> m_bounded_sequence_uint8_field;
    dcdr >> m_bounded_sequence_int16_field;
    dcdr >> m_bounded_sequence_uint16_field;
    dcdr >> m_bounded_sequence_int32_field;
    dcdr >> m_bounded_sequence_uint32_field;
    dcdr >> m_bounded_sequence_int64_field;
    dcdr >> m_bounded_sequence_uint64_field;
    dcdr >> m_bounded_sequence_float_field;
    dcdr >> m_bounded_sequence_double_field;
    dcdr >> m_bounded_sequence_bool_field;
    {
        uint32_t seq_length = 0;
        dcdr >> seq_length;
        m_bounded_sequence_enum_field.resize(seq_length);
        dcdr.deserializeArray(reinterpret_cast<uint32_t*>(m_bounded_sequence_enum_field.data()), seq_length);
    }

    {
        uint32_t seq_length = 0;
        dcdr >> seq_length;
        m_bounded_sequence_enum2_field.resize(seq_length);
        dcdr.deserializeArray(reinterpret_cast<uint32_t*>(m_bounded_sequence_enum2_field.data()), seq_length);
    }

    dcdr >> m_bounded_sequence_struct_field;
    dcdr >> m_unbounded_sequence_char_field;
    dcdr >> m_unbounded_sequence_uint8_field;
    dcdr >> m_unbounded_sequence_int16_field;
    dcdr >> m_unbounded_sequence_uint16_field;
    dcdr >> m_unbounded_sequence_int32_field;
    dcdr >> m_unbounded_sequence_uint32_field;
    dcdr >> m_unbounded_sequence_int64_field;
    dcdr >> m_unbounded_sequence_uint64_field;
    dcdr >> m_unbounded_sequence_float_field;
    dcdr >> m_unbounded_sequence_double_field;
    dcdr >> m_unbounded_sequence_bool_field;
    {
        uint32_t seq_length = 0;
        dcdr >> seq_length;
        m_unbounded_sequence_enum_field.resize(seq_length);
        dcdr.deserializeArray(reinterpret_cast<uint32_t*>(m_unbounded_sequence_enum_field.data()), seq_length);
    }

    {
        uint32_t seq_length = 0;
        dcdr >> seq_length;
        m_unbounded_sequence_enum2_field.resize(seq_length);
        dcdr.deserializeArray(reinterpret_cast<uint32_t*>(m_unbounded_sequence_enum2_field.data()), seq_length);
    }

    dcdr >> m_unbounded_sequence_struct_field;
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void KeyedCompleteTestType::id(
        int32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
int32_t KeyedCompleteTestType::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
int32_t& KeyedCompleteTestType::id()
{
    return m_id;
}

/*!
 * @brief This function sets a value in member char_field
 * @param _char_field New value for member char_field
 */
void KeyedCompleteTestType::char_field(
        char _char_field)
{
    m_char_field = _char_field;
}

/*!
 * @brief This function returns the value of member char_field
 * @return Value of member char_field
 */
char KeyedCompleteTestType::char_field() const
{
    return m_char_field;
}

/*!
 * @brief This function returns a reference to member char_field
 * @return Reference to member char_field
 */
char& KeyedCompleteTestType::char_field()
{
    return m_char_field;
}

/*!
 * @brief This function sets a value in member uint8_field
 * @param _uint8_field New value for member uint8_field
 */
void KeyedCompleteTestType::uint8_field(
        uint8_t _uint8_field)
{
    m_uint8_field = _uint8_field;
}

/*!
 * @brief This function returns the value of member uint8_field
 * @return Value of member uint8_field
 */
uint8_t KeyedCompleteTestType::uint8_field() const
{
    return m_uint8_field;
}

/*!
 * @brief This function returns a reference to member uint8_field
 * @return Reference to member uint8_field
 */
uint8_t& KeyedCompleteTestType::uint8_field()
{
    return m_uint8_field;
}

/*!
 * @brief This function sets a value in member int16_field
 * @param _int16_field New value for member int16_field
 */
void KeyedCompleteTestType::int16_field(
        int16_t _int16_field)
{
    m_int16_field = _int16_field;
}

/*!
 * @brief This function returns the value of member int16_field
 * @return Value of member int16_field
 */
int16_t KeyedCompleteTestType::int16_field() const
{
    return m_int16_field;
}

/*!
 * @brief This function returns a reference to member int16_field
 * @return Reference to member int16_field
 */
int16_t& KeyedCompleteTestType::int16_field()
{
    return m_int16_field;
}

/*!
 * @brief This function sets a value in member uint16_field
 * @param _uint16_field New value for member uint16_field
 */
void KeyedCompleteTestType::uint16_field(
        uint16_t _uint16_field)
{
    m_uint16_field = _uint16_field;
}

/*!
 * @brief This function returns the value of member uint16_field
 * @return Value of member uint16_field
 */
uint16_t KeyedCompleteTestType::uint16_field() const
{
    return m_uint16_field;
}

/*!
 * @brief This function returns a reference to member uint16_field
 * @return Reference to member uint16_field
 */
uint16_t& KeyedCompleteTestType::uint16_field()
{
    return m_uint16_field;
}

/*!
 * @brief This function sets a value in member int32_field
 * @param _int32_field New value for member int32_field
 */
void KeyedCompleteTestType::int32_field(
        int32_t _int32_field)
{
    m_int32_field = _int32_field;
}

/*!
 * @brief This function returns the value of member int32_field
 * @return Value of member int32_field
 */
int32_t KeyedCompleteTestType::int32_field() const
{
    return m_int32_field;
}

/*!
 * @brief This function returns a reference to member int32_field
 * @return Reference to member int32_field
 */
int32_t& KeyedCompleteTestType::int32_field()
{
    return m_int32_field;
}

/*!
 * @brief This function sets a value in member uint32_field
 * @param _uint32_field New value for member uint32_field
 */
void KeyedCompleteTestType::uint32_field(
        uint32_t _uint32_field)
{
    m_uint32_field = _uint32_field;
}

/*!
 * @brief This function returns the value of member uint32_field
 * @return Value of member uint32_field
 */
uint32_t KeyedCompleteTestType::uint32_field() const
{
    return m_uint32_field;
}

/*!
 * @brief This function returns a reference to member uint32_field
 * @return Reference to member uint32_field
 */
uint32_t& KeyedCompleteTestType::uint32_field()
{
    return m_uint32_field;
}

/*!
 * @brief This function sets a value in member int64_field
 * @param _int64_field New value for member int64_field
 */
void KeyedCompleteTestType::int64_field(
        int64_t _int64_field)
{
    m_int64_field = _int64_field;
}

/*!
 * @brief This function returns the value of member int64_field
 * @return Value of member int64_field
 */
int64_t KeyedCompleteTestType::int64_field() const
{
    return m_int64_field;
}

/*!
 * @brief This function returns a reference to member int64_field
 * @return Reference to member int64_field
 */
int64_t& KeyedCompleteTestType::int64_field()
{
    return m_int64_field;
}

/*!
 * @brief This function sets a value in member uint64_field
 * @param _uint64_field New value for member uint64_field
 */
void KeyedCompleteTestType::uint64_field(
        uint64_t _uint64_field)
{
    m_uint64_field = _uint64_field;
}

/*!
 * @brief This function returns the value of member uint64_field
 * @return Value of member uint64_field
 */
uint64_t KeyedCompleteTestType::uint64_field() const
{
    return m_uint64_field;
}

/*!
 * @brief This function returns a reference to member uint64_field
 * @return Reference to member uint64_field
 */
uint64_t& KeyedCompleteTestType::uint64_field()
{
    return m_uint64_field;
}

/*!
 * @brief This function sets a value in member float_field
 * @param _float_field New value for member float_field
 */
void KeyedCompleteTestType::float_field(
        float _float_field)
{
    m_float_field = _float_field;
}

/*!
 * @brief This function returns the value of member float_field
 * @return Value of member float_field
 */
float KeyedCompleteTestType::float_field() const
{
    return m_float_field;
}

/*!
 * @brief This function returns a reference to member float_field
 * @return Reference to member float_field
 */
float& KeyedCompleteTestType::float_field()
{
    return m_float_field;
}

/*!
 * @brief This function sets a value in member double_field
 * @param _double_field New value for member double_field
 */
void KeyedCompleteTestType::double_field(
        double _double_field)
{
    m_double_field = _double_field;
}

/*!
 * @brief This function returns the value of member double_field
 * @return Value of member double_field
 */
double KeyedCompleteTestType::double_field() const
{
    return m_double_field;
}

/*!
 * @brief This function returns a reference to member double_field
 * @return Reference to member double_field
 */
double& KeyedCompleteTestType::double_field()
{
    return m_double_field;
}

/*!
 * @brief This function sets a value in member bool_field
 * @param _bool_field New value for member bool_field
 */
void KeyedCompleteTestType::bool_field(
        bool _bool_field)
{
    m_bool_field = _bool_field;
}

/*!
 * @brief This function returns the value of member bool_field
 * @return Value of member bool_field
 */
bool KeyedCompleteTestType::bool_field() const
{
    return m_bool_field;
}

/*!
 * @brief This function returns a reference to member bool_field
 * @return Reference to member bool_field
 */
bool& KeyedCompleteTestType::bool_field()
{
    return m_bool_field;
}

/*!
 * @brief This function copies the value in member string_field
 * @param _string_field New value to be copied in member string_field
 */
void KeyedCompleteTestType::string_field(
        const std::string& _string_field)
{
    m_string_field = _string_field;
}

/*!
 * @brief This function moves the value in member string_field
 * @param _string_field New value to be moved in member string_field
 */
void KeyedCompleteTestType::string_field(
        std::string&& _string_field)
{
    m_string_field = std::move(_string_field);
}

/*!
 * @brief This function returns a constant reference to member string_field
 * @return Constant reference to member string_field
 */
const std::string& KeyedCompleteTestType::string_field() const
{
    return m_string_field;
}

/*!
 * @brief This function returns a reference to member string_field
 * @return Reference to member string_field
 */
std::string& KeyedCompleteTestType::string_field()
{
    return m_string_field;
}
/*!
 * @brief This function sets a value in member enum_field
 * @param _enum_field New value for member enum_field
 */
void KeyedCompleteTestType::enum_field(
        Color _enum_field)
{
    m_enum_field = _enum_field;
}

/*!
 * @brief This function returns the value of member enum_field
 * @return Value of member enum_field
 */
Color KeyedCompleteTestType::enum_field() const
{
    return m_enum_field;
}

/*!
 * @brief This function returns a reference to member enum_field
 * @return Reference to member enum_field
 */
Color& KeyedCompleteTestType::enum_field()
{
    return m_enum_field;
}

/*!
 * @brief This function sets a value in member enum2_field
 * @param _enum2_field New value for member enum2_field
 */
void KeyedCompleteTestType::enum2_field(
        Material _enum2_field)
{
    m_enum2_field = _enum2_field;
}

/*!
 * @brief This function returns the value of member enum2_field
 * @return Value of member enum2_field
 */
Material KeyedCompleteTestType::enum2_field() const
{
    return m_enum2_field;
}

/*!
 * @brief This function returns a reference to member enum2_field
 * @return Reference to member enum2_field
 */
Material& KeyedCompleteTestType::enum2_field()
{
    return m_enum2_field;
}

/*!
 * @brief This function copies the value in member struct_field
 * @param _struct_field New value to be copied in member struct_field
 */
void KeyedCompleteTestType::struct_field(
        const StructType& _struct_field)
{
    m_struct_field = _struct_field;
}

/*!
 * @brief This function moves the value in member struct_field
 * @param _struct_field New value to be moved in member struct_field
 */
void KeyedCompleteTestType::struct_field(
        StructType&& _struct_field)
{
    m_struct_field = std::move(_struct_field);
}

/*!
 * @brief This function returns a constant reference to member struct_field
 * @return Constant reference to member struct_field
 */
const StructType& KeyedCompleteTestType::struct_field() const
{
    return m_struct_field;
}

/*!
 * @brief This function returns a reference to member struct_field
 * @return Reference to member struct_field
 */
StructType& KeyedCompleteTestType::struct_field()
{
    return m_struct_field;
}
/*!
 * @brief This function copies the value in member array_char_field
 * @param _array_char_field New value to be copied in member array_char_field
 */
void KeyedCompleteTestType::array_char_field(
        const std::array<char, max_array_size>& _array_char_field)
{
    m_array_char_field = _array_char_field;
}

/*!
 * @brief This function moves the value in member array_char_field
 * @param _array_char_field New value to be moved in member array_char_field
 */
void KeyedCompleteTestType::array_char_field(
        std::array<char, max_array_size>&& _array_char_field)
{
    m_array_char_field = std::move(_array_char_field);
}

/*!
 * @brief This function returns a constant reference to member array_char_field
 * @return Constant reference to member array_char_field
 */
const std::array<char, max_array_size>& KeyedCompleteTestType::array_char_field() const
{
    return m_array_char_field;
}

/*!
 * @brief This function returns a reference to member array_char_field
 * @return Reference to member array_char_field
 */
std::array<char, max_array_size>& KeyedCompleteTestType::array_char_field()
{
    return m_array_char_field;
}
/*!
 * @brief This function copies the value in member array_uint8_field
 * @param _array_uint8_field New value to be copied in member array_uint8_field
 */
void KeyedCompleteTestType::array_uint8_field(
        const std::array<uint8_t, max_array_size>& _array_uint8_field)
{
    m_array_uint8_field = _array_uint8_field;
}

/*!
 * @brief This function moves the value in member array_uint8_field
 * @param _array_uint8_field New value to be moved in member array_uint8_field
 */
void KeyedCompleteTestType::array_uint8_field(
        std::array<uint8_t, max_array_size>&& _array_uint8_field)
{
    m_array_uint8_field = std::move(_array_uint8_field);
}

/*!
 * @brief This function returns a constant reference to member array_uint8_field
 * @return Constant reference to member array_uint8_field
 */
const std::array<uint8_t, max_array_size>& KeyedCompleteTestType::array_uint8_field() const
{
    return m_array_uint8_field;
}

/*!
 * @brief This function returns a reference to member array_uint8_field
 * @return Reference to member array_uint8_field
 */
std::array<uint8_t, max_array_size>& KeyedCompleteTestType::array_uint8_field()
{
    return m_array_uint8_field;
}
/*!
 * @brief This function copies the value in member array_int16_field
 * @param _array_int16_field New value to be copied in member array_int16_field
 */
void KeyedCompleteTestType::array_int16_field(
        const std::array<int16_t, max_array_size>& _array_int16_field)
{
    m_array_int16_field = _array_int16_field;
}

/*!
 * @brief This function moves the value in member array_int16_field
 * @param _array_int16_field New value to be moved in member array_int16_field
 */
void KeyedCompleteTestType::array_int16_field(
        std::array<int16_t, max_array_size>&& _array_int16_field)
{
    m_array_int16_field = std::move(_array_int16_field);
}

/*!
 * @brief This function returns a constant reference to member array_int16_field
 * @return Constant reference to member array_int16_field
 */
const std::array<int16_t, max_array_size>& KeyedCompleteTestType::array_int16_field() const
{
    return m_array_int16_field;
}

/*!
 * @brief This function returns a reference to member array_int16_field
 * @return Reference to member array_int16_field
 */
std::array<int16_t, max_array_size>& KeyedCompleteTestType::array_int16_field()
{
    return m_array_int16_field;
}
/*!
 * @brief This function copies the value in member array_uint16_field
 * @param _array_uint16_field New value to be copied in member array_uint16_field
 */
void KeyedCompleteTestType::array_uint16_field(
        const std::array<uint16_t, max_array_size>& _array_uint16_field)
{
    m_array_uint16_field = _array_uint16_field;
}

/*!
 * @brief This function moves the value in member array_uint16_field
 * @param _array_uint16_field New value to be moved in member array_uint16_field
 */
void KeyedCompleteTestType::array_uint16_field(
        std::array<uint16_t, max_array_size>&& _array_uint16_field)
{
    m_array_uint16_field = std::move(_array_uint16_field);
}

/*!
 * @brief This function returns a constant reference to member array_uint16_field
 * @return Constant reference to member array_uint16_field
 */
const std::array<uint16_t, max_array_size>& KeyedCompleteTestType::array_uint16_field() const
{
    return m_array_uint16_field;
}

/*!
 * @brief This function returns a reference to member array_uint16_field
 * @return Reference to member array_uint16_field
 */
std::array<uint16_t, max_array_size>& KeyedCompleteTestType::array_uint16_field()
{
    return m_array_uint16_field;
}
/*!
 * @brief This function copies the value in member array_int32_field
 * @param _array_int32_field New value to be copied in member array_int32_field
 */
void KeyedCompleteTestType::array_int32_field(
        const std::array<int32_t, max_array_size>& _array_int32_field)
{
    m_array_int32_field = _array_int32_field;
}

/*!
 * @brief This function moves the value in member array_int32_field
 * @param _array_int32_field New value to be moved in member array_int32_field
 */
void KeyedCompleteTestType::array_int32_field(
        std::array<int32_t, max_array_size>&& _array_int32_field)
{
    m_array_int32_field = std::move(_array_int32_field);
}

/*!
 * @brief This function returns a constant reference to member array_int32_field
 * @return Constant reference to member array_int32_field
 */
const std::array<int32_t, max_array_size>& KeyedCompleteTestType::array_int32_field() const
{
    return m_array_int32_field;
}

/*!
 * @brief This function returns a reference to member array_int32_field
 * @return Reference to member array_int32_field
 */
std::array<int32_t, max_array_size>& KeyedCompleteTestType::array_int32_field()
{
    return m_array_int32_field;
}
/*!
 * @brief This function copies the value in member array_uint32_field
 * @param _array_uint32_field New value to be copied in member array_uint32_field
 */
void KeyedCompleteTestType::array_uint32_field(
        const std::array<uint32_t, max_array_size>& _array_uint32_field)
{
    m_array_uint32_field = _array_uint32_field;
}

/*!
 * @brief This function moves the value in member array_uint32_field
 * @param _array_uint32_field New value to be moved in member array_uint32_field
 */
void KeyedCompleteTestType::array_uint32_field(
        std::array<uint32_t, max_array_size>&& _array_uint32_field)
{
    m_array_uint32_field = std::move(_array_uint32_field);
}

/*!
 * @brief This function returns a constant reference to member array_uint32_field
 * @return Constant reference to member array_uint32_field
 */
const std::array<uint32_t, max_array_size>& KeyedCompleteTestType::array_uint32_field() const
{
    return m_array_uint32_field;
}

/*!
 * @brief This function returns a reference to member array_uint32_field
 * @return Reference to member array_uint32_field
 */
std::array<uint32_t, max_array_size>& KeyedCompleteTestType::array_uint32_field()
{
    return m_array_uint32_field;
}
/*!
 * @brief This function copies the value in member array_int64_field
 * @param _array_int64_field New value to be copied in member array_int64_field
 */
void KeyedCompleteTestType::array_int64_field(
        const std::array<int64_t, max_array_size>& _array_int64_field)
{
    m_array_int64_field = _array_int64_field;
}

/*!
 * @brief This function moves the value in member array_int64_field
 * @param _array_int64_field New value to be moved in member array_int64_field
 */
void KeyedCompleteTestType::array_int64_field(
        std::array<int64_t, max_array_size>&& _array_int64_field)
{
    m_array_int64_field = std::move(_array_int64_field);
}

/*!
 * @brief This function returns a constant reference to member array_int64_field
 * @return Constant reference to member array_int64_field
 */
const std::array<int64_t, max_array_size>& KeyedCompleteTestType::array_int64_field() const
{
    return m_array_int64_field;
}

/*!
 * @brief This function returns a reference to member array_int64_field
 * @return Reference to member array_int64_field
 */
std::array<int64_t, max_array_size>& KeyedCompleteTestType::array_int64_field()
{
    return m_array_int64_field;
}
/*!
 * @brief This function copies the value in member array_uint64_field
 * @param _array_uint64_field New value to be copied in member array_uint64_field
 */
void KeyedCompleteTestType::array_uint64_field(
        const std::array<uint64_t, max_array_size>& _array_uint64_field)
{
    m_array_uint64_field = _array_uint64_field;
}

/*!
 * @brief This function moves the value in member array_uint64_field
 * @param _array_uint64_field New value to be moved in member array_uint64_field
 */
void KeyedCompleteTestType::array_uint64_field(
        std::array<uint64_t, max_array_size>&& _array_uint64_field)
{
    m_array_uint64_field = std::move(_array_uint64_field);
}

/*!
 * @brief This function returns a constant reference to member array_uint64_field
 * @return Constant reference to member array_uint64_field
 */
const std::array<uint64_t, max_array_size>& KeyedCompleteTestType::array_uint64_field() const
{
    return m_array_uint64_field;
}

/*!
 * @brief This function returns a reference to member array_uint64_field
 * @return Reference to member array_uint64_field
 */
std::array<uint64_t, max_array_size>& KeyedCompleteTestType::array_uint64_field()
{
    return m_array_uint64_field;
}
/*!
 * @brief This function copies the value in member array_float_field
 * @param _array_float_field New value to be copied in member array_float_field
 */
void KeyedCompleteTestType::array_float_field(
        const std::array<float, max_array_size>& _array_float_field)
{
    m_array_float_field = _array_float_field;
}

/*!
 * @brief This function moves the value in member array_float_field
 * @param _array_float_field New value to be moved in member array_float_field
 */
void KeyedCompleteTestType::array_float_field(
        std::array<float, max_array_size>&& _array_float_field)
{
    m_array_float_field = std::move(_array_float_field);
}

/*!
 * @brief This function returns a constant reference to member array_float_field
 * @return Constant reference to member array_float_field
 */
const std::array<float, max_array_size>& KeyedCompleteTestType::array_float_field() const
{
    return m_array_float_field;
}

/*!
 * @brief This function returns a reference to member array_float_field
 * @return Reference to member array_float_field
 */
std::array<float, max_array_size>& KeyedCompleteTestType::array_float_field()
{
    return m_array_float_field;
}
/*!
 * @brief This function copies the value in member array_double_field
 * @param _array_double_field New value to be copied in member array_double_field
 */
void KeyedCompleteTestType::array_double_field(
        const std::array<double, max_array_size>& _array_double_field)
{
    m_array_double_field = _array_double_field;
}

/*!
 * @brief This function moves the value in member array_double_field
 * @param _array_double_field New value to be moved in member array_double_field
 */
void KeyedCompleteTestType::array_double_field(
        std::array<double, max_array_size>&& _array_double_field)
{
    m_array_double_field = std::move(_array_double_field);
}

/*!
 * @brief This function returns a constant reference to member array_double_field
 * @return Constant reference to member array_double_field
 */
const std::array<double, max_array_size>& KeyedCompleteTestType::array_double_field() const
{
    return m_array_double_field;
}

/*!
 * @brief This function returns a reference to member array_double_field
 * @return Reference to member array_double_field
 */
std::array<double, max_array_size>& KeyedCompleteTestType::array_double_field()
{
    return m_array_double_field;
}
/*!
 * @brief This function copies the value in member array_bool_field
 * @param _array_bool_field New value to be copied in member array_bool_field
 */
void KeyedCompleteTestType::array_bool_field(
        const std::array<bool, max_array_size>& _array_bool_field)
{
    m_array_bool_field = _array_bool_field;
}

/*!
 * @brief This function moves the value in member array_bool_field
 * @param _array_bool_field New value to be moved in member array_bool_field
 */
void KeyedCompleteTestType::array_bool_field(
        std::array<bool, max_array_size>&& _array_bool_field)
{
    m_array_bool_field = std::move(_array_bool_field);
}

/*!
 * @brief This function returns a constant reference to member array_bool_field
 * @return Constant reference to member array_bool_field
 */
const std::array<bool, max_array_size>& KeyedCompleteTestType::array_bool_field() const
{
    return m_array_bool_field;
}

/*!
 * @brief This function returns a reference to member array_bool_field
 * @return Reference to member array_bool_field
 */
std::array<bool, max_array_size>& KeyedCompleteTestType::array_bool_field()
{
    return m_array_bool_field;
}
/*!
 * @brief This function copies the value in member array_enum_field
 * @param _array_enum_field New value to be copied in member array_enum_field
 */
void KeyedCompleteTestType::array_enum_field(
        const std::array<Color, max_array_size>& _array_enum_field)
{
    m_array_enum_field = _array_enum_field;
}

/*!
 * @brief This function moves the value in member array_enum_field
 * @param _array_enum_field New value to be moved in member array_enum_field
 */
void KeyedCompleteTestType::array_enum_field(
        std::array<Color, max_array_size>&& _array_enum_field)
{
    m_array_enum_field = std::move(_array_enum_field);
}

/*!
 * @brief This function returns a constant reference to member array_enum_field
 * @return Constant reference to member array_enum_field
 */
const std::array<Color, max_array_size>& KeyedCompleteTestType::array_enum_field() const
{
    return m_array_enum_field;
}

/*!
 * @brief This function returns a reference to member array_enum_field
 * @return Reference to member array_enum_field
 */
std::array<Color, max_array_size>& KeyedCompleteTestType::array_enum_field()
{
    return m_array_enum_field;
}
/*!
 * @brief This function copies the value in member array_enum2_field
 * @param _array_enum2_field New value to be copied in member array_enum2_field
 */
void KeyedCompleteTestType::array_enum2_field(
        const std::array<Material, max_array_size>& _array_enum2_field)
{
    m_array_enum2_field = _array_enum2_field;
}

/*!
 * @brief This function moves the value in member array_enum2_field
 * @param _array_enum2_field New value to be moved in member array_enum2_field
 */
void KeyedCompleteTestType::array_enum2_field(
        std::array<Material, max_array_size>&& _array_enum2_field)
{
    m_array_enum2_field = std::move(_array_enum2_field);
}

/*!
 * @brief This function returns a constant reference to member array_enum2_field
 * @return Constant reference to member array_enum2_field
 */
const std::array<Material, max_array_size>& KeyedCompleteTestType::array_enum2_field() const
{
    return m_array_enum2_field;
}

/*!
 * @brief This function returns a reference to member array_enum2_field
 * @return Reference to member array_enum2_field
 */
std::array<Material, max_array_size>& KeyedCompleteTestType::array_enum2_field()
{
    return m_array_enum2_field;
}
/*!
 * @brief This function copies the value in member array_struct_field
 * @param _array_struct_field New value to be copied in member array_struct_field
 */
void KeyedCompleteTestType::array_struct_field(
        const std::array<StructType, max_array_size>& _array_struct_field)
{
    m_array_struct_field = _array_struct_field;
}

/*!
 * @brief This function moves the value in member array_struct_field
 * @param _array_struct_field New value to be moved in member array_struct_field
 */
void KeyedCompleteTestType::array_struct_field(
        std::array<StructType, max_array_size>&& _array_struct_field)
{
    m_array_struct_field = std::move(_array_struct_field);
}

/*!
 * @brief This function returns a constant reference to member array_struct_field
 * @return Constant reference to member array_struct_field
 */
const std::array<StructType, max_array_size>& KeyedCompleteTestType::array_struct_field() const
{
    return m_array_struct_field;
}

/*!
 * @brief This function returns a reference to member array_struct_field
 * @return Reference to member array_struct_field
 */
std::array<StructType, max_array_size>& KeyedCompleteTestType::array_struct_field()
{
    return m_array_struct_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_char_field
 * @param _bounded_sequence_char_field New value to be copied in member bounded_sequence_char_field
 */
void KeyedCompleteTestType::bounded_sequence_char_field(
        const std::vector<char>& _bounded_sequence_char_field)
{
    m_bounded_sequence_char_field = _bounded_sequence_char_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_char_field
 * @param _bounded_sequence_char_field New value to be moved in member bounded_sequence_char_field
 */
void KeyedCompleteTestType::bounded_sequence_char_field(
        std::vector<char>&& _bounded_sequence_char_field)
{
    m_bounded_sequence_char_field = std::move(_bounded_sequence_char_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_char_field
 * @return Constant reference to member bounded_sequence_char_field
 */
const std::vector<char>& KeyedCompleteTestType::bounded_sequence_char_field() const
{
    return m_bounded_sequence_char_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_char_field
 * @return Reference to member bounded_sequence_char_field
 */
std::vector<char>& KeyedCompleteTestType::bounded_sequence_char_field()
{
    return m_bounded_sequence_char_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_uint8_field
 * @param _bounded_sequence_uint8_field New value to be copied in member bounded_sequence_uint8_field
 */
void KeyedCompleteTestType::bounded_sequence_uint8_field(
        const std::vector<uint8_t>& _bounded_sequence_uint8_field)
{
    m_bounded_sequence_uint8_field = _bounded_sequence_uint8_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_uint8_field
 * @param _bounded_sequence_uint8_field New value to be moved in member bounded_sequence_uint8_field
 */
void KeyedCompleteTestType::bounded_sequence_uint8_field(
        std::vector<uint8_t>&& _bounded_sequence_uint8_field)
{
    m_bounded_sequence_uint8_field = std::move(_bounded_sequence_uint8_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_uint8_field
 * @return Constant reference to member bounded_sequence_uint8_field
 */
const std::vector<uint8_t>& KeyedCompleteTestType::bounded_sequence_uint8_field() const
{
    return m_bounded_sequence_uint8_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_uint8_field
 * @return Reference to member bounded_sequence_uint8_field
 */
std::vector<uint8_t>& KeyedCompleteTestType::bounded_sequence_uint8_field()
{
    return m_bounded_sequence_uint8_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_int16_field
 * @param _bounded_sequence_int16_field New value to be copied in member bounded_sequence_int16_field
 */
void KeyedCompleteTestType::bounded_sequence_int16_field(
        const std::vector<int16_t>& _bounded_sequence_int16_field)
{
    m_bounded_sequence_int16_field = _bounded_sequence_int16_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_int16_field
 * @param _bounded_sequence_int16_field New value to be moved in member bounded_sequence_int16_field
 */
void KeyedCompleteTestType::bounded_sequence_int16_field(
        std::vector<int16_t>&& _bounded_sequence_int16_field)
{
    m_bounded_sequence_int16_field = std::move(_bounded_sequence_int16_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_int16_field
 * @return Constant reference to member bounded_sequence_int16_field
 */
const std::vector<int16_t>& KeyedCompleteTestType::bounded_sequence_int16_field() const
{
    return m_bounded_sequence_int16_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_int16_field
 * @return Reference to member bounded_sequence_int16_field
 */
std::vector<int16_t>& KeyedCompleteTestType::bounded_sequence_int16_field()
{
    return m_bounded_sequence_int16_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_uint16_field
 * @param _bounded_sequence_uint16_field New value to be copied in member bounded_sequence_uint16_field
 */
void KeyedCompleteTestType::bounded_sequence_uint16_field(
        const std::vector<uint16_t>& _bounded_sequence_uint16_field)
{
    m_bounded_sequence_uint16_field = _bounded_sequence_uint16_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_uint16_field
 * @param _bounded_sequence_uint16_field New value to be moved in member bounded_sequence_uint16_field
 */
void KeyedCompleteTestType::bounded_sequence_uint16_field(
        std::vector<uint16_t>&& _bounded_sequence_uint16_field)
{
    m_bounded_sequence_uint16_field = std::move(_bounded_sequence_uint16_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_uint16_field
 * @return Constant reference to member bounded_sequence_uint16_field
 */
const std::vector<uint16_t>& KeyedCompleteTestType::bounded_sequence_uint16_field() const
{
    return m_bounded_sequence_uint16_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_uint16_field
 * @return Reference to member bounded_sequence_uint16_field
 */
std::vector<uint16_t>& KeyedCompleteTestType::bounded_sequence_uint16_field()
{
    return m_bounded_sequence_uint16_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_int32_field
 * @param _bounded_sequence_int32_field New value to be copied in member bounded_sequence_int32_field
 */
void KeyedCompleteTestType::bounded_sequence_int32_field(
        const std::vector<int32_t>& _bounded_sequence_int32_field)
{
    m_bounded_sequence_int32_field = _bounded_sequence_int32_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_int32_field
 * @param _bounded_sequence_int32_field New value to be moved in member bounded_sequence_int32_field
 */
void KeyedCompleteTestType::bounded_sequence_int32_field(
        std::vector<int32_t>&& _bounded_sequence_int32_field)
{
    m_bounded_sequence_int32_field = std::move(_bounded_sequence_int32_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_int32_field
 * @return Constant reference to member bounded_sequence_int32_field
 */
const std::vector<int32_t>& KeyedCompleteTestType::bounded_sequence_int32_field() const
{
    return m_bounded_sequence_int32_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_int32_field
 * @return Reference to member bounded_sequence_int32_field
 */
std::vector<int32_t>& KeyedCompleteTestType::bounded_sequence_int32_field()
{
    return m_bounded_sequence_int32_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_uint32_field
 * @param _bounded_sequence_uint32_field New value to be copied in member bounded_sequence_uint32_field
 */
void KeyedCompleteTestType::bounded_sequence_uint32_field(
        const std::vector<uint32_t>& _bounded_sequence_uint32_field)
{
    m_bounded_sequence_uint32_field = _bounded_sequence_uint32_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_uint32_field
 * @param _bounded_sequence_uint32_field New value to be moved in member bounded_sequence_uint32_field
 */
void KeyedCompleteTestType::bounded_sequence_uint32_field(
        std::vector<uint32_t>&& _bounded_sequence_uint32_field)
{
    m_bounded_sequence_uint32_field = std::move(_bounded_sequence_uint32_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_uint32_field
 * @return Constant reference to member bounded_sequence_uint32_field
 */
const std::vector<uint32_t>& KeyedCompleteTestType::bounded_sequence_uint32_field() const
{
    return m_bounded_sequence_uint32_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_uint32_field
 * @return Reference to member bounded_sequence_uint32_field
 */
std::vector<uint32_t>& KeyedCompleteTestType::bounded_sequence_uint32_field()
{
    return m_bounded_sequence_uint32_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_int64_field
 * @param _bounded_sequence_int64_field New value to be copied in member bounded_sequence_int64_field
 */
void KeyedCompleteTestType::bounded_sequence_int64_field(
        const std::vector<int64_t>& _bounded_sequence_int64_field)
{
    m_bounded_sequence_int64_field = _bounded_sequence_int64_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_int64_field
 * @param _bounded_sequence_int64_field New value to be moved in member bounded_sequence_int64_field
 */
void KeyedCompleteTestType::bounded_sequence_int64_field(
        std::vector<int64_t>&& _bounded_sequence_int64_field)
{
    m_bounded_sequence_int64_field = std::move(_bounded_sequence_int64_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_int64_field
 * @return Constant reference to member bounded_sequence_int64_field
 */
const std::vector<int64_t>& KeyedCompleteTestType::bounded_sequence_int64_field() const
{
    return m_bounded_sequence_int64_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_int64_field
 * @return Reference to member bounded_sequence_int64_field
 */
std::vector<int64_t>& KeyedCompleteTestType::bounded_sequence_int64_field()
{
    return m_bounded_sequence_int64_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_uint64_field
 * @param _bounded_sequence_uint64_field New value to be copied in member bounded_sequence_uint64_field
 */
void KeyedCompleteTestType::bounded_sequence_uint64_field(
        const std::vector<uint64_t>& _bounded_sequence_uint64_field)
{
    m_bounded_sequence_uint64_field = _bounded_sequence_uint64_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_uint64_field
 * @param _bounded_sequence_uint64_field New value to be moved in member bounded_sequence_uint64_field
 */
void KeyedCompleteTestType::bounded_sequence_uint64_field(
        std::vector<uint64_t>&& _bounded_sequence_uint64_field)
{
    m_bounded_sequence_uint64_field = std::move(_bounded_sequence_uint64_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_uint64_field
 * @return Constant reference to member bounded_sequence_uint64_field
 */
const std::vector<uint64_t>& KeyedCompleteTestType::bounded_sequence_uint64_field() const
{
    return m_bounded_sequence_uint64_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_uint64_field
 * @return Reference to member bounded_sequence_uint64_field
 */
std::vector<uint64_t>& KeyedCompleteTestType::bounded_sequence_uint64_field()
{
    return m_bounded_sequence_uint64_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_float_field
 * @param _bounded_sequence_float_field New value to be copied in member bounded_sequence_float_field
 */
void KeyedCompleteTestType::bounded_sequence_float_field(
        const std::vector<float>& _bounded_sequence_float_field)
{
    m_bounded_sequence_float_field = _bounded_sequence_float_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_float_field
 * @param _bounded_sequence_float_field New value to be moved in member bounded_sequence_float_field
 */
void KeyedCompleteTestType::bounded_sequence_float_field(
        std::vector<float>&& _bounded_sequence_float_field)
{
    m_bounded_sequence_float_field = std::move(_bounded_sequence_float_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_float_field
 * @return Constant reference to member bounded_sequence_float_field
 */
const std::vector<float>& KeyedCompleteTestType::bounded_sequence_float_field() const
{
    return m_bounded_sequence_float_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_float_field
 * @return Reference to member bounded_sequence_float_field
 */
std::vector<float>& KeyedCompleteTestType::bounded_sequence_float_field()
{
    return m_bounded_sequence_float_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_double_field
 * @param _bounded_sequence_double_field New value to be copied in member bounded_sequence_double_field
 */
void KeyedCompleteTestType::bounded_sequence_double_field(
        const std::vector<double>& _bounded_sequence_double_field)
{
    m_bounded_sequence_double_field = _bounded_sequence_double_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_double_field
 * @param _bounded_sequence_double_field New value to be moved in member bounded_sequence_double_field
 */
void KeyedCompleteTestType::bounded_sequence_double_field(
        std::vector<double>&& _bounded_sequence_double_field)
{
    m_bounded_sequence_double_field = std::move(_bounded_sequence_double_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_double_field
 * @return Constant reference to member bounded_sequence_double_field
 */
const std::vector<double>& KeyedCompleteTestType::bounded_sequence_double_field() const
{
    return m_bounded_sequence_double_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_double_field
 * @return Reference to member bounded_sequence_double_field
 */
std::vector<double>& KeyedCompleteTestType::bounded_sequence_double_field()
{
    return m_bounded_sequence_double_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_bool_field
 * @param _bounded_sequence_bool_field New value to be copied in member bounded_sequence_bool_field
 */
void KeyedCompleteTestType::bounded_sequence_bool_field(
        const std::vector<bool>& _bounded_sequence_bool_field)
{
    m_bounded_sequence_bool_field = _bounded_sequence_bool_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_bool_field
 * @param _bounded_sequence_bool_field New value to be moved in member bounded_sequence_bool_field
 */
void KeyedCompleteTestType::bounded_sequence_bool_field(
        std::vector<bool>&& _bounded_sequence_bool_field)
{
    m_bounded_sequence_bool_field = std::move(_bounded_sequence_bool_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_bool_field
 * @return Constant reference to member bounded_sequence_bool_field
 */
const std::vector<bool>& KeyedCompleteTestType::bounded_sequence_bool_field() const
{
    return m_bounded_sequence_bool_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_bool_field
 * @return Reference to member bounded_sequence_bool_field
 */
std::vector<bool>& KeyedCompleteTestType::bounded_sequence_bool_field()
{
    return m_bounded_sequence_bool_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_enum_field
 * @param _bounded_sequence_enum_field New value to be copied in member bounded_sequence_enum_field
 */
void KeyedCompleteTestType::bounded_sequence_enum_field(
        const std::vector<Color>& _bounded_sequence_enum_field)
{
    m_bounded_sequence_enum_field = _bounded_sequence_enum_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_enum_field
 * @param _bounded_sequence_enum_field New value to be moved in member bounded_sequence_enum_field
 */
void KeyedCompleteTestType::bounded_sequence_enum_field(
        std::vector<Color>&& _bounded_sequence_enum_field)
{
    m_bounded_sequence_enum_field = std::move(_bounded_sequence_enum_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_enum_field
 * @return Constant reference to member bounded_sequence_enum_field
 */
const std::vector<Color>& KeyedCompleteTestType::bounded_sequence_enum_field() const
{
    return m_bounded_sequence_enum_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_enum_field
 * @return Reference to member bounded_sequence_enum_field
 */
std::vector<Color>& KeyedCompleteTestType::bounded_sequence_enum_field()
{
    return m_bounded_sequence_enum_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_enum2_field
 * @param _bounded_sequence_enum2_field New value to be copied in member bounded_sequence_enum2_field
 */
void KeyedCompleteTestType::bounded_sequence_enum2_field(
        const std::vector<Material>& _bounded_sequence_enum2_field)
{
    m_bounded_sequence_enum2_field = _bounded_sequence_enum2_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_enum2_field
 * @param _bounded_sequence_enum2_field New value to be moved in member bounded_sequence_enum2_field
 */
void KeyedCompleteTestType::bounded_sequence_enum2_field(
        std::vector<Material>&& _bounded_sequence_enum2_field)
{
    m_bounded_sequence_enum2_field = std::move(_bounded_sequence_enum2_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_enum2_field
 * @return Constant reference to member bounded_sequence_enum2_field
 */
const std::vector<Material>& KeyedCompleteTestType::bounded_sequence_enum2_field() const
{
    return m_bounded_sequence_enum2_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_enum2_field
 * @return Reference to member bounded_sequence_enum2_field
 */
std::vector<Material>& KeyedCompleteTestType::bounded_sequence_enum2_field()
{
    return m_bounded_sequence_enum2_field;
}
/*!
 * @brief This function copies the value in member bounded_sequence_struct_field
 * @param _bounded_sequence_struct_field New value to be copied in member bounded_sequence_struct_field
 */
void KeyedCompleteTestType::bounded_sequence_struct_field(
        const std::vector<StructType>& _bounded_sequence_struct_field)
{
    m_bounded_sequence_struct_field = _bounded_sequence_struct_field;
}

/*!
 * @brief This function moves the value in member bounded_sequence_struct_field
 * @param _bounded_sequence_struct_field New value to be moved in member bounded_sequence_struct_field
 */
void KeyedCompleteTestType::bounded_sequence_struct_field(
        std::vector<StructType>&& _bounded_sequence_struct_field)
{
    m_bounded_sequence_struct_field = std::move(_bounded_sequence_struct_field);
}

/*!
 * @brief This function returns a constant reference to member bounded_sequence_struct_field
 * @return Constant reference to member bounded_sequence_struct_field
 */
const std::vector<StructType>& KeyedCompleteTestType::bounded_sequence_struct_field() const
{
    return m_bounded_sequence_struct_field;
}

/*!
 * @brief This function returns a reference to member bounded_sequence_struct_field
 * @return Reference to member bounded_sequence_struct_field
 */
std::vector<StructType>& KeyedCompleteTestType::bounded_sequence_struct_field()
{
    return m_bounded_sequence_struct_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_char_field
 * @param _unbounded_sequence_char_field New value to be copied in member unbounded_sequence_char_field
 */
void KeyedCompleteTestType::unbounded_sequence_char_field(
        const std::vector<char>& _unbounded_sequence_char_field)
{
    m_unbounded_sequence_char_field = _unbounded_sequence_char_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_char_field
 * @param _unbounded_sequence_char_field New value to be moved in member unbounded_sequence_char_field
 */
void KeyedCompleteTestType::unbounded_sequence_char_field(
        std::vector<char>&& _unbounded_sequence_char_field)
{
    m_unbounded_sequence_char_field = std::move(_unbounded_sequence_char_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_char_field
 * @return Constant reference to member unbounded_sequence_char_field
 */
const std::vector<char>& KeyedCompleteTestType::unbounded_sequence_char_field() const
{
    return m_unbounded_sequence_char_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_char_field
 * @return Reference to member unbounded_sequence_char_field
 */
std::vector<char>& KeyedCompleteTestType::unbounded_sequence_char_field()
{
    return m_unbounded_sequence_char_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_uint8_field
 * @param _unbounded_sequence_uint8_field New value to be copied in member unbounded_sequence_uint8_field
 */
void KeyedCompleteTestType::unbounded_sequence_uint8_field(
        const std::vector<uint8_t>& _unbounded_sequence_uint8_field)
{
    m_unbounded_sequence_uint8_field = _unbounded_sequence_uint8_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_uint8_field
 * @param _unbounded_sequence_uint8_field New value to be moved in member unbounded_sequence_uint8_field
 */
void KeyedCompleteTestType::unbounded_sequence_uint8_field(
        std::vector<uint8_t>&& _unbounded_sequence_uint8_field)
{
    m_unbounded_sequence_uint8_field = std::move(_unbounded_sequence_uint8_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_uint8_field
 * @return Constant reference to member unbounded_sequence_uint8_field
 */
const std::vector<uint8_t>& KeyedCompleteTestType::unbounded_sequence_uint8_field() const
{
    return m_unbounded_sequence_uint8_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_uint8_field
 * @return Reference to member unbounded_sequence_uint8_field
 */
std::vector<uint8_t>& KeyedCompleteTestType::unbounded_sequence_uint8_field()
{
    return m_unbounded_sequence_uint8_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_int16_field
 * @param _unbounded_sequence_int16_field New value to be copied in member unbounded_sequence_int16_field
 */
void KeyedCompleteTestType::unbounded_sequence_int16_field(
        const std::vector<int16_t>& _unbounded_sequence_int16_field)
{
    m_unbounded_sequence_int16_field = _unbounded_sequence_int16_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_int16_field
 * @param _unbounded_sequence_int16_field New value to be moved in member unbounded_sequence_int16_field
 */
void KeyedCompleteTestType::unbounded_sequence_int16_field(
        std::vector<int16_t>&& _unbounded_sequence_int16_field)
{
    m_unbounded_sequence_int16_field = std::move(_unbounded_sequence_int16_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_int16_field
 * @return Constant reference to member unbounded_sequence_int16_field
 */
const std::vector<int16_t>& KeyedCompleteTestType::unbounded_sequence_int16_field() const
{
    return m_unbounded_sequence_int16_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_int16_field
 * @return Reference to member unbounded_sequence_int16_field
 */
std::vector<int16_t>& KeyedCompleteTestType::unbounded_sequence_int16_field()
{
    return m_unbounded_sequence_int16_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_uint16_field
 * @param _unbounded_sequence_uint16_field New value to be copied in member unbounded_sequence_uint16_field
 */
void KeyedCompleteTestType::unbounded_sequence_uint16_field(
        const std::vector<uint16_t>& _unbounded_sequence_uint16_field)
{
    m_unbounded_sequence_uint16_field = _unbounded_sequence_uint16_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_uint16_field
 * @param _unbounded_sequence_uint16_field New value to be moved in member unbounded_sequence_uint16_field
 */
void KeyedCompleteTestType::unbounded_sequence_uint16_field(
        std::vector<uint16_t>&& _unbounded_sequence_uint16_field)
{
    m_unbounded_sequence_uint16_field = std::move(_unbounded_sequence_uint16_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_uint16_field
 * @return Constant reference to member unbounded_sequence_uint16_field
 */
const std::vector<uint16_t>& KeyedCompleteTestType::unbounded_sequence_uint16_field() const
{
    return m_unbounded_sequence_uint16_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_uint16_field
 * @return Reference to member unbounded_sequence_uint16_field
 */
std::vector<uint16_t>& KeyedCompleteTestType::unbounded_sequence_uint16_field()
{
    return m_unbounded_sequence_uint16_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_int32_field
 * @param _unbounded_sequence_int32_field New value to be copied in member unbounded_sequence_int32_field
 */
void KeyedCompleteTestType::unbounded_sequence_int32_field(
        const std::vector<int32_t>& _unbounded_sequence_int32_field)
{
    m_unbounded_sequence_int32_field = _unbounded_sequence_int32_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_int32_field
 * @param _unbounded_sequence_int32_field New value to be moved in member unbounded_sequence_int32_field
 */
void KeyedCompleteTestType::unbounded_sequence_int32_field(
        std::vector<int32_t>&& _unbounded_sequence_int32_field)
{
    m_unbounded_sequence_int32_field = std::move(_unbounded_sequence_int32_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_int32_field
 * @return Constant reference to member unbounded_sequence_int32_field
 */
const std::vector<int32_t>& KeyedCompleteTestType::unbounded_sequence_int32_field() const
{
    return m_unbounded_sequence_int32_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_int32_field
 * @return Reference to member unbounded_sequence_int32_field
 */
std::vector<int32_t>& KeyedCompleteTestType::unbounded_sequence_int32_field()
{
    return m_unbounded_sequence_int32_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_uint32_field
 * @param _unbounded_sequence_uint32_field New value to be copied in member unbounded_sequence_uint32_field
 */
void KeyedCompleteTestType::unbounded_sequence_uint32_field(
        const std::vector<uint32_t>& _unbounded_sequence_uint32_field)
{
    m_unbounded_sequence_uint32_field = _unbounded_sequence_uint32_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_uint32_field
 * @param _unbounded_sequence_uint32_field New value to be moved in member unbounded_sequence_uint32_field
 */
void KeyedCompleteTestType::unbounded_sequence_uint32_field(
        std::vector<uint32_t>&& _unbounded_sequence_uint32_field)
{
    m_unbounded_sequence_uint32_field = std::move(_unbounded_sequence_uint32_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_uint32_field
 * @return Constant reference to member unbounded_sequence_uint32_field
 */
const std::vector<uint32_t>& KeyedCompleteTestType::unbounded_sequence_uint32_field() const
{
    return m_unbounded_sequence_uint32_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_uint32_field
 * @return Reference to member unbounded_sequence_uint32_field
 */
std::vector<uint32_t>& KeyedCompleteTestType::unbounded_sequence_uint32_field()
{
    return m_unbounded_sequence_uint32_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_int64_field
 * @param _unbounded_sequence_int64_field New value to be copied in member unbounded_sequence_int64_field
 */
void KeyedCompleteTestType::unbounded_sequence_int64_field(
        const std::vector<int64_t>& _unbounded_sequence_int64_field)
{
    m_unbounded_sequence_int64_field = _unbounded_sequence_int64_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_int64_field
 * @param _unbounded_sequence_int64_field New value to be moved in member unbounded_sequence_int64_field
 */
void KeyedCompleteTestType::unbounded_sequence_int64_field(
        std::vector<int64_t>&& _unbounded_sequence_int64_field)
{
    m_unbounded_sequence_int64_field = std::move(_unbounded_sequence_int64_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_int64_field
 * @return Constant reference to member unbounded_sequence_int64_field
 */
const std::vector<int64_t>& KeyedCompleteTestType::unbounded_sequence_int64_field() const
{
    return m_unbounded_sequence_int64_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_int64_field
 * @return Reference to member unbounded_sequence_int64_field
 */
std::vector<int64_t>& KeyedCompleteTestType::unbounded_sequence_int64_field()
{
    return m_unbounded_sequence_int64_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_uint64_field
 * @param _unbounded_sequence_uint64_field New value to be copied in member unbounded_sequence_uint64_field
 */
void KeyedCompleteTestType::unbounded_sequence_uint64_field(
        const std::vector<uint64_t>& _unbounded_sequence_uint64_field)
{
    m_unbounded_sequence_uint64_field = _unbounded_sequence_uint64_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_uint64_field
 * @param _unbounded_sequence_uint64_field New value to be moved in member unbounded_sequence_uint64_field
 */
void KeyedCompleteTestType::unbounded_sequence_uint64_field(
        std::vector<uint64_t>&& _unbounded_sequence_uint64_field)
{
    m_unbounded_sequence_uint64_field = std::move(_unbounded_sequence_uint64_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_uint64_field
 * @return Constant reference to member unbounded_sequence_uint64_field
 */
const std::vector<uint64_t>& KeyedCompleteTestType::unbounded_sequence_uint64_field() const
{
    return m_unbounded_sequence_uint64_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_uint64_field
 * @return Reference to member unbounded_sequence_uint64_field
 */
std::vector<uint64_t>& KeyedCompleteTestType::unbounded_sequence_uint64_field()
{
    return m_unbounded_sequence_uint64_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_float_field
 * @param _unbounded_sequence_float_field New value to be copied in member unbounded_sequence_float_field
 */
void KeyedCompleteTestType::unbounded_sequence_float_field(
        const std::vector<float>& _unbounded_sequence_float_field)
{
    m_unbounded_sequence_float_field = _unbounded_sequence_float_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_float_field
 * @param _unbounded_sequence_float_field New value to be moved in member unbounded_sequence_float_field
 */
void KeyedCompleteTestType::unbounded_sequence_float_field(
        std::vector<float>&& _unbounded_sequence_float_field)
{
    m_unbounded_sequence_float_field = std::move(_unbounded_sequence_float_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_float_field
 * @return Constant reference to member unbounded_sequence_float_field
 */
const std::vector<float>& KeyedCompleteTestType::unbounded_sequence_float_field() const
{
    return m_unbounded_sequence_float_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_float_field
 * @return Reference to member unbounded_sequence_float_field
 */
std::vector<float>& KeyedCompleteTestType::unbounded_sequence_float_field()
{
    return m_unbounded_sequence_float_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_double_field
 * @param _unbounded_sequence_double_field New value to be copied in member unbounded_sequence_double_field
 */
void KeyedCompleteTestType::unbounded_sequence_double_field(
        const std::vector<double>& _unbounded_sequence_double_field)
{
    m_unbounded_sequence_double_field = _unbounded_sequence_double_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_double_field
 * @param _unbounded_sequence_double_field New value to be moved in member unbounded_sequence_double_field
 */
void KeyedCompleteTestType::unbounded_sequence_double_field(
        std::vector<double>&& _unbounded_sequence_double_field)
{
    m_unbounded_sequence_double_field = std::move(_unbounded_sequence_double_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_double_field
 * @return Constant reference to member unbounded_sequence_double_field
 */
const std::vector<double>& KeyedCompleteTestType::unbounded_sequence_double_field() const
{
    return m_unbounded_sequence_double_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_double_field
 * @return Reference to member unbounded_sequence_double_field
 */
std::vector<double>& KeyedCompleteTestType::unbounded_sequence_double_field()
{
    return m_unbounded_sequence_double_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_bool_field
 * @param _unbounded_sequence_bool_field New value to be copied in member unbounded_sequence_bool_field
 */
void KeyedCompleteTestType::unbounded_sequence_bool_field(
        const std::vector<bool>& _unbounded_sequence_bool_field)
{
    m_unbounded_sequence_bool_field = _unbounded_sequence_bool_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_bool_field
 * @param _unbounded_sequence_bool_field New value to be moved in member unbounded_sequence_bool_field
 */
void KeyedCompleteTestType::unbounded_sequence_bool_field(
        std::vector<bool>&& _unbounded_sequence_bool_field)
{
    m_unbounded_sequence_bool_field = std::move(_unbounded_sequence_bool_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_bool_field
 * @return Constant reference to member unbounded_sequence_bool_field
 */
const std::vector<bool>& KeyedCompleteTestType::unbounded_sequence_bool_field() const
{
    return m_unbounded_sequence_bool_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_bool_field
 * @return Reference to member unbounded_sequence_bool_field
 */
std::vector<bool>& KeyedCompleteTestType::unbounded_sequence_bool_field()
{
    return m_unbounded_sequence_bool_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_enum_field
 * @param _unbounded_sequence_enum_field New value to be copied in member unbounded_sequence_enum_field
 */
void KeyedCompleteTestType::unbounded_sequence_enum_field(
        const std::vector<Color>& _unbounded_sequence_enum_field)
{
    m_unbounded_sequence_enum_field = _unbounded_sequence_enum_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_enum_field
 * @param _unbounded_sequence_enum_field New value to be moved in member unbounded_sequence_enum_field
 */
void KeyedCompleteTestType::unbounded_sequence_enum_field(
        std::vector<Color>&& _unbounded_sequence_enum_field)
{
    m_unbounded_sequence_enum_field = std::move(_unbounded_sequence_enum_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_enum_field
 * @return Constant reference to member unbounded_sequence_enum_field
 */
const std::vector<Color>& KeyedCompleteTestType::unbounded_sequence_enum_field() const
{
    return m_unbounded_sequence_enum_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_enum_field
 * @return Reference to member unbounded_sequence_enum_field
 */
std::vector<Color>& KeyedCompleteTestType::unbounded_sequence_enum_field()
{
    return m_unbounded_sequence_enum_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_enum2_field
 * @param _unbounded_sequence_enum2_field New value to be copied in member unbounded_sequence_enum2_field
 */
void KeyedCompleteTestType::unbounded_sequence_enum2_field(
        const std::vector<Material>& _unbounded_sequence_enum2_field)
{
    m_unbounded_sequence_enum2_field = _unbounded_sequence_enum2_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_enum2_field
 * @param _unbounded_sequence_enum2_field New value to be moved in member unbounded_sequence_enum2_field
 */
void KeyedCompleteTestType::unbounded_sequence_enum2_field(
        std::vector<Material>&& _unbounded_sequence_enum2_field)
{
    m_unbounded_sequence_enum2_field = std::move(_unbounded_sequence_enum2_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_enum2_field
 * @return Constant reference to member unbounded_sequence_enum2_field
 */
const std::vector<Material>& KeyedCompleteTestType::unbounded_sequence_enum2_field() const
{
    return m_unbounded_sequence_enum2_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_enum2_field
 * @return Reference to member unbounded_sequence_enum2_field
 */
std::vector<Material>& KeyedCompleteTestType::unbounded_sequence_enum2_field()
{
    return m_unbounded_sequence_enum2_field;
}
/*!
 * @brief This function copies the value in member unbounded_sequence_struct_field
 * @param _unbounded_sequence_struct_field New value to be copied in member unbounded_sequence_struct_field
 */
void KeyedCompleteTestType::unbounded_sequence_struct_field(
        const std::vector<StructType>& _unbounded_sequence_struct_field)
{
    m_unbounded_sequence_struct_field = _unbounded_sequence_struct_field;
}

/*!
 * @brief This function moves the value in member unbounded_sequence_struct_field
 * @param _unbounded_sequence_struct_field New value to be moved in member unbounded_sequence_struct_field
 */
void KeyedCompleteTestType::unbounded_sequence_struct_field(
        std::vector<StructType>&& _unbounded_sequence_struct_field)
{
    m_unbounded_sequence_struct_field = std::move(_unbounded_sequence_struct_field);
}

/*!
 * @brief This function returns a constant reference to member unbounded_sequence_struct_field
 * @return Constant reference to member unbounded_sequence_struct_field
 */
const std::vector<StructType>& KeyedCompleteTestType::unbounded_sequence_struct_field() const
{
    return m_unbounded_sequence_struct_field;
}

/*!
 * @brief This function returns a reference to member unbounded_sequence_struct_field
 * @return Reference to member unbounded_sequence_struct_field
 */
std::vector<StructType>& KeyedCompleteTestType::unbounded_sequence_struct_field()
{
    return m_unbounded_sequence_struct_field;
}

size_t KeyedCompleteTestType::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;


     current_align += 4 + eprosima::fastcdr::Cdr::alignment(current_align, 4);

     


























































    return current_align;
}

bool KeyedCompleteTestType::isKeyDefined()
{
    return true;
}

void KeyedCompleteTestType::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     scdr << m_id;
                                                               
}
